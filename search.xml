<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.2(17C88)正式版 with Clover 4333原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.2-(17C88)-official-version-and-Clover-4333-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.2(17C88)正式版 with Clover 4333原版镜像 本镜像采用官方原版app制作，集成Clover 4333，支持UEFI启动安装; 所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相; Clover 支持UHD620/UHD630等八代核显 特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理 Clover默认配置文件config.plist为620/630/640/650； config_DalianSky.plist为部分机型增加Drop Tables,如果默认的config.plist无法进入安装界面,可以试试这个 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡； 已更新Lilu(1.2.1)、AppleALC(1.2.1)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 下载链接百毒云下载链接:https://pan.baidu.com/s/1i5hBZDV Mega网盘下载链接:https://mega.nz/#!MgUymRaR!wMyIcgmOlihCj9pMCskP9Qxkru2uEDfmGY5LVSmWnrQ 如果mega无法下载,请进群下载hosts_mega.txt MD5 (macOS High Sierra 10.13.2(17C88) Installer with Clover 4333.dmg) = 7a05f3e9ccaf81a4e8d2f5e558a075ae 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
        <tag>10.13.2</tag>
        <tag>17C88</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[显示器接口数据及参数修改]]></title>
    <url>%2FDisplay-interface-data-and-parameter-changes.html</url>
    <content type="text"><![CDATA[查看显卡platform-id显卡注入platform-id通过命令读取: 1ioreg -l | grep platform-id 显示结果如下 1"AAPL,ig-platform-id" = &lt;00001659&gt; 得出显卡注入ID是:59160000读取核显驱动的加载情况,使用命令: 1kextstat | grep -y appleintel 1234567com.apple.driver.AppleIntelLpssI2C (3.0.60) com.apple.driver.AppleIntelLpssDmac (3.0.60)com.apple.driver.AppleIntelLpssI2CController (3.0.60) com.apple.driver.AppleIntelSlowAdaptiveClocking (4.0.0) com.apple.driver.AppleIntelKBLGraphicsFramebuffer (10.2.8)com.apple.driver.AppleIntelPCHPMC (2.0.1) com.apple.driver.AppleIntelKBLGraphics (10.2.8) 由此可以判断所使用的驱动是AppleIntelKBLGraphics和AppleIntelKBLGraphicsFramebuffer,显示器的接口数据定义在AppleIntelKBLGraphicsFramebuffer里,通过AppleIntelKBLGraphicsFramebuffer提取接口数据 接口数据 接口数据 说明 00001659 00000000 2A8A0800 注入ID 00000000 01030303 00002002 端口数量定义 00000000 00000060 6C050000 6C050000 00000000 00000000 00000800 02000000 98000000 eDP接口 01050900 00040000 87010000 0105接口 02040A00 00080000 87010000 0204接口 FF000000 01000000 20000000 0306预留 显存容量修改01030303 00002002 00000000 0000 0060 0600是16进制,转换成10进制就是:153601030303 00002002 00000000 0000 0080 0800是16进制,转换成10进制就是:2048 显示器接口数值定义 连接类型(connetor type) 数值(Data) HDMI 00 08 00 00 DVI 00 02 00 00 eDP 00 04 00 00 DP 00 04 00 00 LVDS 02 00 00 00 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>platform-id</tag>
        <tag>接口</tag>
        <tag>显存</tag>
        <tag>显示器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS安装教程兼小米Pro安装过程记录]]></title>
    <url>%2FMacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html</url>
    <content type="text"><![CDATA[引言一直以来就想写个macOS的安装教程,可惜没有TransMac以及BIOS设置的截图,正好小米PRO黑苹果高级群的班长@原味菠萝最近一直在写小米Pro安装黑苹果的教程,由于他工作繁忙,一直也没有完稿,我就在他写作的基础上将这篇教程完善. Windows下制作macOS安装盘准备工具 U盘大于8G U 盘大小不限做 PE 盘 TransMac 小米PRO专用EFI文件 系统镜像 在 Windows 下安装 TransMac安装完成后，右键→管理员权限运行 TransMac 利用 TransMac 制作macOS安装USB盘 打开TransMac,选择欲制作的USB盘符 右键选择Restore with Disk Image,选择下载好的dmg文件,会弹出窗口,提示将要格式化USB磁盘,点击OK按钮继续 在此期间,您可以去给自己泡杯咖啡喝,耐心等待写盘的完成. 写入完成，系统弹出将其格式化，点击取消 macOS下制作USB安装盘如果您已经有了macOS的使用环境,那么制作用于安装的macOS将会更加方便. 准备工具 下载好的dmg镜像 用于安装macOS的USB盘,容量8GB以上 磁盘工具 制作过程 为便于截屏及加快制作时间,我没有使用USB制作,而是生成一个8GB的镜像做演示 打开欲制作的dmg镜像,两种方法: 使用磁盘工具,选择File-Open Disk Image 直接通过Finder双击dmg打开 打开磁盘工具,选择SANDISK 8GB USB 点击恢复/Restore按钮,选择XiaoMiPro 10131,点击恢复/Restore它会开始执行恢复镜像到USB的动作,恢复速度取决于你的USB盘 镜像恢复完成后,它会显示如图所示点击完成/Done按钮后,会显示完成后的USB磁盘信息 安装镜像的制作到这里就完成了,下一步,我们需要将EFI复制进刚制作好的USB磁盘的EFI分区里 将镜像里的EFI复制到USB安装盘的EFI分区下显示磁盘分区信息打开终端,输入命令:diskutil list,它会显示类似的信息: 1234567891011/dev/disk4 (disk image): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme +8.0 GB disk4 1: EFI EFI 209.7 MB disk4s1 2: Apple_HFS XiaoMiPro 10131 7.7 GB disk4s2/dev/disk5 (disk image): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme +7.0 GB disk5 1: EFI EFI 209.7 MB disk5s1 2: Apple_HFS XiaoMiPro 10131 6.7 GB disk5s2 这里显示的8.0 GB的磁盘设备为:disk4,也就是我们刚才制作的安装磁盘,EFI分区的设备为:disk4s1;7.0 GB的磁盘设备为:disk5,这个是我们刚才打开的磁盘镜像,它包含的EFI分区的设备为:disk5s1; 挂载EFI分区我们使用diskutil命令分别挂载这两个EFI分区,命令如下: 12345diskutil mount disk4s1 # 挂载USB的EFI分区Volume EFI on disk4s1 mounteddiskutil mount disk5s1 # 挂载安装镜像的EFI分区Volume EFI on disk5s1 mountedopen . # 在当前位置打开Finder 复制/替换EFI将EFI复制进USB的EFI分区下即可,至于你想替换EFI也可以参考此方法操作 小米BIOS设置小米笔记本的BIOS默认开启了安全认证,UEFI引导需要关闭安全启动Secure Boot Mode方式,否则无法加载UEFI引导设备,比如刚制作好的macOS安装USB盘 操作方法: 开机按F2进入BIOS设置,光标移动到Security,点击Set Supervisor Password设置一个BIOS密码,输入两次相同的密码,点击YES保存Supervisor Password由Not Installed变为Installed 关闭安全启动 点击Secure Boot Mode,设置为Disabled关闭安全启动 按F10保存设置 ​ 安装macOS 开机按F12键进入Boot Manager引导管理,选择EFI USB Device,回车 进入Clover主菜单 移动光标到Boot OS X Install from XiaoMiPro 10131回车如果无法进入安装界面,需要打开啰嗦模式进行排错,具体的操作方法请参考Clover使用教程 11-26-2017 19:25更新 未完待续 安装第一阶段开始引导macOS系统 这个过程需要1-2分钟,耐心等待进入安装程序,出现语言选择界面 语言选择选择简体中文 出现macOS实用工具界面,选择磁盘工具 磁盘工具选择显示所有设备:选择SSD Media,点击抹掉按钮,选择默认的Mac OS扩展(日志型),将名称修改为Macintosh HD,点击抹掉按钮 假设您的磁盘是空的且数据是已经备份过的,别怪我没提醒你!!! 抹盘成功后,它会自动生成一个200MB的EFI分区,这样做的好处是不会出现安装过程中的由于EFI分区尺寸小于200MB而引起的无法安装的错误.当然前提是你的磁盘中没有重要的数据,或者您的数据已经提前备份过了.到这里,磁盘工具的动作就已经结束了.退出磁盘工具进入安装界面,进行系统的安装了. 安装macOS进入安装界面选择继续点击同意,选择Macintosh HD选择安装期间,它会把USB安装盘上的安装文件预复制到要安装的系统分区里,这个过程在小米Pro的笔记本上它跑得飞快,数据复制完后,它会自动重启然后进行第二阶段的安装 安装第二阶段第二阶段的安装会有两种界面,一种是不进安装界面直接安装,另一种是先进入安装界面直接安装,需要注意的是,无论是哪一种界面下,安装的过程中全程是禁用鼠标和键盘的,需要你做的只是耐心等待它安装完成 安装速度取决于你的磁盘速度,第二阶段的安装已经与USB安装盘没什么关系了.macOS 10.13的安装完全区别于10.12,它不能免二次安装,甚至还需要重启多次,这些都是正常现象,请不要大惊小怪的.系统安装完成后,重启进入系统设置向导 设置向导国家选择首先让你选择国家,这里我选择中国点击继续,设置键盘 设置键盘这里询问你是否传输信息到这台Mac 数据恢复可以从Mac或者Time Machine备份恢复 我选择现在不传输任何信息,点击继续 Apple ID登录选择是否使用您的Apple ID登录,如何想现在就登录到Apple ID,请输入Apple ID和密码登录,否则选择不登录,进入系统后也可以设置登录到iCloud,点击继续阅读条款与条件,选择同意继续出现创建电脑用户的窗口,输入用户名和密码,点击继续 创建电脑用户系统会创建初始用户用户创建成功后,弹出iCloud的正在设置用户的窗口紧接着弹出设置iClound钥匙串的设置窗口,选择稍候设置,点击继续 设置iCloud钥匙串出现快捷设置,点击继续 快捷设置自定义设置定位以及数据反馈,请根据自己的喜好进行设置 出现iCloud中的所有文件,如果你需要将文稿和桌面上的文件储存在 iCloud Drive中,请勾选,否则取消勾选,点击继续 iCloud文件同步设置出现FileVault磁盘加密,如果你需要打开 Filevault 磁盘加密,请勾选,否则取消勾选,点击继续 FileVault磁盘加密设置出现正在设置您的Mac,请稍候完成设置向导 设置向导完成出现桌面后,整个的安装向导就完成了. 更新于 11-27-2017 21:15未完待续 安装后的系统设置系统安装后,你可以先喝杯咖啡兴奋会儿,马上还有更艰巨的任务在等着你呢 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇] 新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。 diskutil命令的基本用法： 查看磁盘分区表1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 256 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 3: Microsoft Basic Data WIN10 127.7 GB disk0s3 /dev/disk1(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 16 GB disk1 1: EFI EFI 200 MB disk1s1 2: Apple_HFS Install macOS Sierra 15.8 GB disk1s2 挂载磁盘EFI分区1diskutil mount disk0s1 挂载U盘EFI分区1diskutil mount disk1s1 打开Finder，注意后面有个. 1open . 左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[Windows篇]挂载EFI分区Windows操作系统下面,打开cmd窗口,输入命令: 123456diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号assign letter=X # x为EFI分区盘符 您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 添加UEFI引导选项使用工具:BOOTICE 操作过程: 打开BOOTICE软件,选择物理磁盘,选择欲操作的目标磁盘,点击分区管理,弹出分区管理的窗口,点击分配盘符,为ESP分区分配一个盘符,点击确定 选择UEFI,点击修改启动序列,点击添加按钮,菜单标题填写:CLOVER,选择启动文件,在打开的窗口里选择ESP分区下的目录\EFI\CLOVER\CLOVERX64.EFI,点击保存当前启动项设置 完善驱动小米Pro的专用镜像已经包括了笔记本本身的所有的驱动.由于众所周知的原因,小米板载的INTEL无线网卡是焊死在主板上的,扩展槽又无法添加WIFI无线网卡,所以选择一个外置的USB无线网卡是种无奈之举. USB无线网卡及安装驱动程序补充 最后更新:11-28-2017 AM11:30 特别鸣谢:@原味菠萝 @(￣(工)￣)_小哥哥 @_ 为本教程提供的部分素材 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>安装</tag>
        <tag>macOS</tag>
        <tag>小米Pro</tag>
        <tag>XiaoMi-Pro</tag>
        <tag>XiaoMiPro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[借助VoodooHDA自带的getdump找出有效节点和路径]]></title>
    <url>%2FWith-VoodooHDA-comes-getdump-find-valid-nodes-and-paths.html</url>
    <content type="text"><![CDATA[借助VoodooHDA自带的getdump找出有效节点和路径声卡驱动了,音量调节的图标也显示正常,就是不发声怎么办如果您的声卡使用了AppleALC,也注入了正确的ID后不发声怎么办呢?这个问题就出现在有效节点和路径不正确上面.所谓条条大路通罗马,我们总不能在同一棵树上吊死吧.现在可以请出VoodooHDA万能声卡驱动程序下载链接了,说它万能是不正确的,如果它万能了估计就没AppleALC啥事儿了吧.这里可以借助VoodooHDA自带的应用程序:getdump,使用方法:打开终端,输入命令: 1getdump &gt; ~/Desktop/voodoo_dump.txt 用它可以生成一份voodoo_dump.txt的文件,里面会有两段以DUMPING Playback/Record Paths开头的文字描述,这里面即包括了有效节点,同时也包括了有效的路径从上面的两张截图中,可以将有效的节点和路径整理出下面的表格: 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;12-&gt;2 0x21 33 HP out 33-&gt;13-&gt;3 0x19 25 Headset Mic in 8-&gt;35-&gt;24 8-&gt;35-&gt;29备用 0x12 18 Internal Mic in 9-&gt;34-&gt;18 9-&gt;34-&gt;29备用 有了这个表格,再结合configdata,找出有效的ID,编译AppleALC,注入ID并使用声卡驱动. 备注该种方法摘自使用AppleALC声卡仿冒驱动AppleHDA的正确姿势的部分内容,之所以单独发布就是想让更多的人看到 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>声卡仿冒</tag>
        <tag>VoodooHDA</tag>
        <tag>getdump</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS下使用dd命令制作Ubuntu安装USB盘]]></title>
    <url>%2FMacOS-use-the-dd-command-to-make-Ubuntu-install-USB-disk.html</url>
    <content type="text"><![CDATA[MacOS下使用DD命令制作Ubuntu Linux启动USB盘: 下载Ubuntu Linux镜像,可以选择国内开源镜像站点下载:网易 搜狐 阿里云 如果你只是想通过Linux提取codec的话,可以随便下载个旧的版本即可,比如这个ubuntu 14.04.5LTS,如果想做为日后的生产力工具的话,我推荐你下载最新发布的ubuntu 17.10 制作Ubuntu Linux安装盘 Windows下请使用工具UltraISO,方法略 macOS下制作过程: 插入U盘,确定设备名,方法为打开磁盘工具,选择U盘,可以看到U盘下面有两个分区:disk4s1和disk4s2,那么U盘的设备名就是:disk4 当然最简单的方法还是直接使用命令查看:diskutil list,输出的信息为: 12345/dev/disk4 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: Apple_partition_scheme *2.0 GB disk4 1: Apple_partition_map 4.1 KB disk4s1 2: Apple_HFS 2.4 MB disk4s2 这个disk4就是你要操作的设备名,后面我们会用到它 卸载U盘,准备写入镜像,输入命令:diskutil umountDisk disk4 # 卸载U盘 使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上,操作之前我有必要提醒各位小白,万一你不小心输入错了设备名,那么你连哭的机会都没有,因为dd是按扇区直接物理写入磁盘,别到时候找不到数据了再悔不当初没有认真看到这段文字 1sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m 命令输入完后,请仔细认真检查下,尤其是of=/dev/disk4这里,再三确认后回车执行,输入用户密码后请耐心等待6-7分钟,写盘速度取决于你的U盘,镜像恢复的过程中不会有任何的文字输出,U盘写入成功后会显示下面类似的输出信息: 1234567~ % diskutil umountDisk disk4Unmount of all volumes on disk4 was successful~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1mPassword:1431+1 records in1431+1 records out1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec) 我的U盘竟然写了906秒(15分钟),我先找个地方哭会儿去 同时系统会弹出一个错误的窗口,显示类似的信息: 那是因为Linux的分区格式是ext,在macOS系统下无法识别才会报错,但是其实一个支持UEFI引导的Ubuntu Linux 17.10启动U盘已经制作成功了.点击Ignore忽略或者Eject退出U盘 现在您可以使用这个新制作的Ubuntu Linux安装U盘引导Linux快乐地玩耍啦 收工喽关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>dd</tag>
        <tag>diskutil</tag>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用HIDPI解决睡眠唤醒黑屏、花屏及连接外部显示器的正确姿势]]></title>
    <url>%2FUse-HIDPI-to-solve-sleep-wake-up-black-screen%2C-Huaping-and-connect-the-external-monitor-the-correct-posture.html</url>
    <content type="text"><![CDATA[前言 经常会有网友反馈说自己的显示器黑屏或者花屏,早期的方式是注入EDID可有效解决类似问题.经常摸索后发现打开显示器的HIDPI高分辨率支持的同时可有效去掉这种现象,同时这种操作也会减少或者消除出现8个苹果的概率 教程开始提取EDID使用工具DarwinDumper操作步骤： 打开 DarwinDumper，点击Choose，选择保存位置。可以将生成的文件保存到桌面 点击Deselect All Dumps,取消所有的选择项 勾选右侧的EDID 点击Run按钮,生成EDID.BIN,保存于桌面生成的新目录中生成的HTML报告如下:如果选择Select All Dumps再按Run它会生成一份完整的系统信息,类似于WINDOWS下面的AIDA64导出的详细信息 修正EDID及打开HIDPI显示支持目的:通过此操作可有效解决开机内屏黑屏/花屏,显示器睡眠唤醒黑屏/花屏,可直接连接外部显示器备注:部分显卡需要修正显示器接口数据,可通过Clover打补丁实现 使用工具:FixEDID操作步骤: 打开FixEDID,点击Open EDID binary file,选择上面生成的EDID.BIN,这个文件位于~/Desktop/DarwinDumperxxx 依次打开EDID,EDID的目录中存在三种格式的文件,请选择打开EDID.bin 根据自己的显示器的分辨率选择16:9或者16:10,我的显示器是15.6寸,分辨率为1920x1080,长宽比为16:9,所以我需要将插图中的16:10通过下拉菜单选择调整为16:9,如下图其中:前面的16:9是程序自动检测出的长宽比,后面的16:9通过下拉菜单选择,保持前后一致 添加HIDPI高分辨率:请根据个人喜好添加,我通常会添加的分辨率如下: 3200x1800 2880x1620 1920x1080 1600x900 1440x810 点击Make按钮,会自动在桌面生成一个新目录,比如我的目录为:DisplayVendorID-dae 将该目录复制到显示器设备描述目录下,打开终端,输入命令: 1sudo cp -R ~/Desktop/DisplayVendorID-dae /System/Library/Displays/Contents/Resources/Overrides 如何修改分辨率使用工具:RDM其中:分辨率后边带有闪电符号的即为HIDPI高分辨率 另一种一键开启HIDPI并注入EDID的方法 特别感谢冰水加劲Q提供此一键命令可开启接近原生的HIDPI设置，不需要RDM软件即可在系统显示器设置中设置双击安装命令即可进入设置，可选择安装或卸载 效果：备注:此方法的分辨率是写死的,某些高分屏需要单独设备 收工关于打赏您的支持就是我更新的动力!如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EDID</tag>
        <tag>花屏</tag>
        <tag>黑屏</tag>
        <tag>HIDPI</tag>
        <tag>睡眠唤醒</tag>
        <tag>内屏黑屏</tag>
        <tag>fixEDID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用AppleALC声卡仿冒驱动AppleHDA的正确姿势]]></title>
    <url>%2FUse-AppleALC-sound-card-to-drive-the-correct-posture-of-AppleHDA.html</url>
    <content type="text"><![CDATA[大纲,写作中前言经常给网友仿冒声卡驱动, 一直都没有将过程写下来,鉴于每天会有许多人问如何仿冒声卡,就想将过程记录下来,供大家参考学习 提取codec通过linux提取codec制作Ubuntu Linux启动U盘: 下载Ubuntu Linux镜像,可以选择国内开源镜像站点下载:网易 搜狐 阿里云 如果你只是想通过Linux提取codec的话,可以随便下载个旧的版本即可,比如这个ubuntu 14.04.5LTS,如果想作为日后的生产力工具的话,我推荐你下载最新发布的ubuntu 17.10 制作Ubuntu Linux安装盘 Windows下请使用工具UltraISO,方法略 macOS下制作过程: 插入U盘,确定设备名,方法为打开磁盘工具,选择U盘,可以看到U盘下面有两个分区:disk4s1和disk4s2,那么U盘的设备名就是:disk4 当然最简单的方法还是直接使用命令查看:diskutil list,输出的信息为: 123456 /dev/disk4 (internal, physical):#: TYPE NAME SIZE IDENTIFIER0: Apple_partition_scheme *2.0 GB disk41: Apple_partition_map 4.1 KB disk4s12: Apple_HFS 2.4 MB disk4s2 这个disk4就是你要操作的设备名,后面我们会用到它 卸载U盘,准备写入镜像,输入命令: 1diskutil umountDisk disk4 # 卸载U盘 使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上,操作之前我有必要提醒各位小白,万一你不小心输入错了设备名,那么你连哭的机会都没有,因为dd是按扇区直接物理写入磁盘,别到时候找不到数据了再悔不当初没有认真看到这段文字 1sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m 命令输入完后,请仔细认真检查下,尤其是of=/dev/disk4这里,再三确认后回车执行,输入用户密码后请耐心等待6-7分钟,写盘速度取决于你的U盘,镜像恢复的过程中不会有任何的文字输出,U盘写入成功后会显示下面类似的输出信息: 1234567~ % diskutil umountDisk disk4Unmount of all volumes on disk4 was successful~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1mPassword:1431+1 records in1431+1 records out1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec) 我的U盘竟然写了906秒(15分钟),我先找个地方哭会儿去*同时系统会弹出一个警告窗口,显示类似的信息:那是因为Linux的分区格式是ext,在macOS系统下无法识别才会报错,但是其实一个支持UEFI引导的Ubuntu Linux 17.10启动U盘已经制作成功了.点击Ignore忽略或者Eject退出U盘 现在您可以使用这个新制作的Ubuntu Linux安装U盘引导Linux去提取codec 提取codec开机按引导设备快捷键F12或者F8进入引导设备选单,选择Ubuntu Linux所在的USB盘回车出现Ubuntu Linux的引导界面,选择Try Ubuntu without installing,该选项可以在不安装的情况下试用Ubuntu回车后稍候会进入Ubuntu桌面:按组合键CTRL+ALT+t打开终端,输入以下命令: 123456cd ~/Desktop/ # 进入用户桌面cp /proc/asound/card0/codec#0 . # 将codec#0复制到当时位置sudo cp -R /sys/firmware/acpi/tables . # 将acpi/tables目录复制到当时位置,tables目录包括了全部的DSDT和SSDTls -l # 列表sudo chown -R ubuntu:ubuntu * # 将当前目录下所有文件及目录所有人修改为ubuntuls -l # 列表 显示输出信息如下:将桌面上的codec#0和tables目录复制到LINUX以外的支持写入的盘符下,Linux下面的工作已经完成,您可以继续试用或者重启/关机. 整理有效节点使用到的工具：verbit.sh,下载链接用法: verbit.sh codec#0,它会生成如下显示的信息: 123456789101112131415161718192021222324252627282930Verbs from Linux Codec Dump File: codec#0Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256) Jack Color Description Node PinDefault Original Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d01 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170140 01471c40 01471d01 01471e17 01471f90 1/8 Black Speaker at Ext Rear 24 0x18 0x411111f0 01871cf0 01871d11 01871e11 01871f41 1/8 Black Speaker at Ext Rear 25 0x19 0x411111f0 01971c10 01971d20 01971e81 01971f02 1/8 Black Speaker at Ext Rear 26 0x1a 0x411111f0 01a71cf0 01a71d11 01a71e11 01a71f41 1/8 Black Speaker at Ext Rear 27 0x1b 0x411111f0 01b71cf0 01b71d11 01b71e11 01b71f41 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c2d 01d71d9a 01d71e77 01d71f40 1/8 Black Speaker at Ext Rear 30 0x1e 0x411111f0 01e71cf0 01e71d11 01e71e11 01e71f41 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f02-------------------------------------------------------------------------------------------------------- Jack Color Description Node PinDefault Modified Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d00 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170120 01471c20 01471d00 01471e17 01471f90 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c40 01d71d90 01d71e77 01d71f40 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f01--------------------------------------------------------------------------------------------------------Modified Verbs in One Line: 01271c70 01271d00 01271ea6 01271f90 01371c00 01371d00 01371e00 01371f40 01471c20 01471d00 01471e17 01471f90 01d71c40 01d71d90 01d71e77 01d71f40 02171c30 02171d10 02171e21 02171f01-------------------------------------------------------------------------------------------------------- 如果你希望将输出结果保存下来,可以将命令改为: 1verbit.sh codec#0 &gt; ALC256_dump.txt 这个ALC256_dump.txt就是上面显示的输出信息,你可以使用其它的文字编辑器打开它.重要的信息不能漏掉了,后面我们在编译声卡驱动的时候会经常用到它们: 1Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256) 其中的: 名称 解释 Codec: Realtek ALC3246 是告诉了你的声卡型号是ALC3246(ALC256) Address: 0 会告诉你生成configdata的数据的前缀是0,比如上面显示输出信息最后一行的Modified Verbs in One Line:后面所有的数据中,每组数据的第一位就是这个 0 ,如果Address: 2,那么每组数据的第一位就是 2 ,这个后面我们会用到它 DevID: 283902550 (0x10ec0256) 283902550是0x10ec0256的10进制值,0x10ec 是指vendorID(芯片供应商ID),是REALTEK的设备标识,0256是指型号,去掉前面的0,您的声卡型号就是:ALC256 过去的教程会告诉你,通过运行verbit.sh整理出来的节点是: 12318 0x12 Mic at Int20 0x14 Speaker at Int33 0x21 HP Out at Ext Front 至于上面输出信息里显示的0x13 0x1d都是无效的节点.而且它只有三个有效的节点,我的声卡ALC256是用于笔记本,按理说它至少还应该存在另一个Mic Ext的节点,我需要找出它来.看来使用传统的方法已经无法满足我的求知欲了.既然使用Linux可以提取codec,那么有没有可能 通过Linux找出有效的节点呢?为了测试我的声卡存在第四个节点,我需要找出耳机的Mic输入节点,于是乎重新引导进入Linux,插上耳机,它弹出了这个窗口:这三个选项的意思是让我选择声音设备,既然我希望找出耳机麦克风的输入,我就选择了中间带有耳麦的图标进入Sound Settings,点击 Input,选择Headset Microphone,调节Input volume,对着耳麦说话,发现有输入电平了,再切换到内置麦克风Internal Microphone,也有输入电平,那么至少说明我的声卡功能是完整的,至少在Linux下它工作的很好.测试结果已经出来了,我想要知道耳麦的有效节点是什么,使用组合键CTRL+ALT+t打开终端,输入命令:dmesg看看它会有什么变化,结果我就看到了下面的文字: 12345678[ 5.040591] snd_hda_codec_realtek hdaudioC0D0: autoconfig for ALC3246: line_outs=1 (0x14/0x0/0x0/0x0/0x0) type:speaker[ 5.040593] snd_hda_codec_realtek hdaudioC0D0: speaker_outs=0 (0x0/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: hp_outs=1 (0x21/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: mono: mono_out=0x0[ 5.040596] snd_hda_codec_realtek hdaudioC0D0: inputs:[ 5.040598] snd_hda_codec_realtek hdaudioC0D0: Headset Mic=0x19[ 5.040599] snd_hda_codec_realtek hdaudioC0D0: Headphone Mic=0x1a[ 5.040600] snd_hda_codec_realtek hdaudioC0D0: Internal Mic=0x12 我不想看到其它的输出信息,我只需要得到我想要的信息,于是将命令改为: 123456789sky@sky-Inspiron-7560:~$ dmesg | grep snd_hda_codec_realtek[ 5.040591] snd_hda_codec_realtek hdaudioC0D0: autoconfig for ALC3246: line_outs=1 (0x14/0x0/0x0/0x0/0x0) type:speaker[ 5.040593] snd_hda_codec_realtek hdaudioC0D0: speaker_outs=0 (0x0/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: hp_outs=1 (0x21/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: mono: mono_out=0x0[ 5.040596] snd_hda_codec_realtek hdaudioC0D0: inputs:[ 5.040598] snd_hda_codec_realtek hdaudioC0D0: Headset Mic=0x19[ 5.040599] snd_hda_codec_realtek hdaudioC0D0: Headphone Mic=0x1a[ 5.040600] snd_hda_codec_realtek hdaudioC0D0: Internal Mic=0x12 得到的输出结果跟上面的相同,于是我发现了在Linux下我的声卡的有效节点分别为: 0x14 Speaker out 0x21 HP out 0x19 Headset Mic in 0x1a Headphone Mic in 0x12 Internal Mic in 暂且不讨论我的声卡是几节点,我发现通过linux完全可以得出声卡的有效节点,而且这种方式好像也不需要使用什么专用的工具,只是在linux下面通过内部命令dmesg无意中就被我发现了声卡中最挠头的找有效节点的打怪秘籍,这种方法在整个Hackintosh社区里还没见有人用过.看来这跟我之前使用linux经常会通过dmesg排错的使用习惯是分不开的,这里要由衷地给自己点一个大大的 赞在这个特别的日子里11.11,没有陪女朋友的小伙伴们,都可以使用我刚get到的新技能愉快地打怪升级啦! 暂更于此,做个记号 2017年11月11日 继续更新 先将节点整理成一个表格,这个表格里会包括之前整理出的数据 有效节点 10进制 设备名称 0x14 20 Speaker out 0x21 21 HP out 0x19 25 Headset Mic in 0x1a 26 Headphone Mic in 0x12 18 Internal Mic in 之所以加上转换后的10进制,就是为了以后制作pathmap做准备 整理有效路径使用codecgraph生成pathmap图命令如下: 123$ codecgraph codec\#0Codec: Realtek ALC3246Generating codec#0.svg 如果出现error: dot executable not found (did you install graphviz?)的错误提示的话,那么还需要执行下面的动作,打开终端,输入命令: 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" # 安装brew 安装brew的过程中会提醒你安装Xcode Command Tools,请选择yes.安装完brew之后,继续执行: 1brew install graphviz # 安装codecgraph所需要的依赖程序 这个生成的codec#0.svg就是声卡的pathmap,使用Sketch.app打开它是不是看了头老大?没错,我刚开始看的时候也是一头的雾水,看多了后就会总结出经验来还记得我们在前面整理出的有效节点吧?!还是以我的声卡为例,上文中我已经整理出5个节点,按照顺序来: 0x14,这个是Speaker的节点,也就是喇叭,我们也俗称为外放,如果想让它正确地发声,就需要看看跟它连接的节点都有哪些,在图片里找到0x14位于图片的最下方,我把它放大下: 通过观察我们会发现,0x14与0x02连接,转换成10进制就是20-&gt;2,同样的,0x21与0x03连接,转换成10进制就是33-&gt;3,我们把它放到表格中 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;2 0x21 33 HP out 33-&gt;3 0x19 25 Headset Mic in 0x1a 26 Headphone Mic in 0x12 18 Internal Mic in 怎么样?也没想像的那么复杂吧?两个输出设备的节点和路径已经整理出来,下一步,我们要把输入设备和节点整理出来再来看图片的上半部,最右侧的0x08和0x09是两个声音输入的节点,0x23和0x22是两个混音设备,最前方是设备节点,这个就是输入设备的路径.我的声卡的0x12声音输入路径包括了3个节点;为了便于理解,被我圈起来的红线部分就是0x12(Mic in)的路径(pathmap),8-&gt;35-&gt;18就是路径,照样还是要将数据放到表格里 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;2 0x21 33 HP out 33-&gt;3 0x19 25 Headset Mic in 0x1a 26 Headphone Mic in 0x12 18 Internal Mic in 8-&gt;35-&gt;18 还记得文章前面通过linux找出来的有效节点不?我的耳麦可是支持输入的,节点也找出来了,是0x19(Headset Mic in),我需要将路径找出来,我发现0x19同时连接了两个节点:0x23和0x22,相应地路径为:8-&gt;35-&gt;25和9-&gt;34-&gt;25,顺手也把0x1a的路径也整理出来备用,将这两组数据补充进表格里 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;2 0x21 33 HP out 33-&gt;3 0x19 25 Headset Mic in 8-&gt;35-&gt;25 9-&gt;34-&gt;25 0x1a 26 Headphone Mic in 8-&gt;35-&gt;26 9-&gt;34-&gt;26 0x12 18 Internal Mic in 8-&gt;35-&gt;18 至于0x1a是否有效暂且放到一边,一个包括了有效节点/设备名称/路径的表格就整理完成了,这里需要强调的一点是:路径数值使用10进制 整理ConfigData ConfigData的获得有两种方法:这两种方法分别为:通过codec里面的Pin Default提取以及通过PinConfigs提取,然后修正ConfigData.下面我们将分别介绍这两种提取方法 通过PinConfigs提取ConfigDataConfigData数据位于PinConfigs.kext/Contents/Info.plist里,PinConfigs.kext作为AppleALC插件被加载.用到的工具:Plist Editor Pro.app还是以我的ALC256为例:打开Info.plist后,使用组合快捷键⌘+f打开搜索: ALC256 或者 283902550 ,它会直接定位到你需要查找的数据位置,再按⌘+g,将相同的字符串全部搜索完毕,直到它又跳转到第一个搜索结果的位置,结果如下图:ALC256的ConfigData的数据有三组,分别对应的LayoutID为:13 28 56将这三组ConfigData复制出来: id:1301271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 02171C50 02171D10 02171E2B 02171F02 01470c02 id:2801471C50 01471D00 01471E17 01471F90 01470c02 01A71C30 01A71D00 01A71EA0 01A71F90 02171C20 02171D10 02171E21 02171F00 id:5601271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 01A71C40 01A71D10 01A71E81 01A71F02 01D71CF0 01D71D11 01D71E11 01D71F41 02171C50 02171D10 02171E2B 02171F02 01470c02 02170c02 这么看起来是杂乱无章的,我们将它格式化一下,每个节点一行,四组数据:id:13 123401271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 02171C50 02171D10 02171E2B 02171F02 01470c02 id:28 12301471C50 01471D00 01471E17 01471F90 01470c02 01A71C30 01A71D00 01A71EA0 01A71F90 02171C20 02171D10 02171E21 02171F00 id:56 12345601271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01470c02 01971C30 01971D10 01971E8B 01971F02 01A71C40 01A71D10 01A71E81 01A71F02 01D71CF0 01D71D11 01D71E11 01D71F41 02171C50 02171D10 02171E2B 02171F02 02170c02 从中我们可以发现:id:13为四行四节点,节点为:0x12 0x14 0x19 0x21id:28为三行三节点,节点为:0x14 0x1A 0x21id:56为六行六节点,节点为:0x12 0x14 0x19 0x1A 0x1D 0x21现在有个问题摆在你们的面前,我上面明明刚说过每个节点为四组数据,那为什么在0x14和0x21的节点后面又多出来一组数据呢?这组数据又有什么作用呢?原来秘密都藏在codec里面,它定义了某些输出设备具有EAPD,比如0x14节点的数据: 1234567891011121314151617Node 0x14 [Pin Complex] wcaps 0x40058d: Stereo Amp-Out Control: name="Speaker Playback Switch", index=0, device=0 ControlAmp: chs=3, dir=Out, idx=0, ofs=0 Amp-Out caps: ofs=0x00, nsteps=0x00, stepsize=0x00, mute=1 Amp-Out vals: [0x00 0x00] Pincap 0x00010014: OUT EAPD Detect EAPD 0x2: EAPD Pin Default 0x90170120: [Fixed] Speaker at Int N/A Conn = Analog, Color = Unknown DefAssociation = 0x2, Sequence = 0x0 Misc = NO_PRESENCE Pin-ctls: 0x40: OUT Unsolicited: tag=00, enabled=0 Power states: D0 D1 D2 D3 EPSS Power: setting=D0, actual=D0 Connection: 1 0x02 具有EAPD的节点需要添加参数SET_EAPD_BTLENABLE,转换成数值为0x70c,完整的数值为:Address+节点+70c+02,即:01470c02,它通过hda-verb可以执行,比如CodecCommander就是调用的hda-verb执行的命令.更多的hda-verb参数请参考我之前的文章:hda-verb参数详表这里我教大家一个简单判断EAPD节点的方法:那就是它通常会位于Speaker Out和HP Out这两个输出节点上.至于其它教程提到过的关于01470c02是组神奇的代码,可以让外放发声的说法是错误的,它可能刚好声卡的Speaker Out的输出节点是0x14而已.如果您的Speaker Out输出节点是0x16,那么就需要把它修改为01670c02,当然要遵守这个公式:Address+节点+71c+02 本节教程先更新到这里 11-13-2017 10:25PM 续更 另外一种找出EAPD节点的方法:使用工具node_dump.sh,它会显示出每个节点的信息,包括EAPD输出,详细的用法以后再补充上. 说了半天,也只说了一个01470c02是干什么用的,其它的四组数据都分别代表什么呢?这个话题如果展开讲的话,没个一两天是说不明白的.接下来的部分就会介绍到这四组数据是怎么整理出来的. 通过codec里面的Pin Default提取并整理将使用verbit.sh整理出来的ALC256_dump.txt重新打开: 1234567891011121314151617Verbs from Linux Codec Dump File: codec#0Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256) Jack Color Description Node PinDefault Original Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d01 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170140 01471c40 01471d01 01471e17 01471f90 1/8 Black Speaker at Ext Rear 24 0x18 0x411111f0 01871cf0 01871d11 01871e11 01871f41 1/8 Black Speaker at Ext Rear 25 0x19 0x411111f0 01971c10 01971d20 01971e81 01971f02 1/8 Black Speaker at Ext Rear 26 0x1a 0x411111f0 01a71cf0 01a71d11 01a71e11 01a71f41 1/8 Black Speaker at Ext Rear 27 0x1b 0x411111f0 01b71cf0 01b71d11 01b71e11 01b71f41 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c2d 01d71d9a 01d71e77 01d71f40 1/8 Black Speaker at Ext Rear 30 0x1e 0x411111f0 01e71cf0 01e71d11 01e71e11 01e71f41 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f02-------------------------------------------------------------------------------------------------------- 将数据整理成如下的样式: [Fixed]是内部设备 [Jack]是通过插孔进行连接的外部设备 [N/A]是其它未知设备 12345678910111213Node PinDefault Description ----------------------------------------------------------0x12 0x90a60170 [Fixed] Mic at Int 0x13 0x40000000 [N/A] Line Out at Ext N/A 0x14 0x90170140 [Fixed] Speaker at Int 0x18 0x411111f0 [N/A] Speaker at Ext Rear 0x19 0x411111f0 [N/A] Speaker at Ext Rear 0x1a 0x411111f0 [N/A] Speaker at Ext Rear 0x1b 0x411111f0 [N/A] Speaker at Ext Rear 0x1d 0x40779a2d [N/A] Modem Hand at Ext N/A0x1e 0x411111f0 [N/A] Speaker at Ext Rear 0x21 0x02211030 [Jack] HP Out at Ext Front ---------------------------------------------------------- 将PinDefault进行小端转换little-endian,这里借用一张紫米教程里面的图片进行小端转换的理解:就是把PinDefault的数据两两对调,比如:0x12节点的[Fixed] Mic at Int原始数据为:0x90a60170,去掉前面的0x,变成90 a6 01 70,最前面的90跑到了最后,最后的70又跑到了最前面,中间的a6和01再对调下,就变成了70 01 a6 90.整理后,变成如下的格式: 1234567891011Node c d e f Description12 70 01 a6 90 [Fixed] Mic at Int 13 00 00 00 40 [N/A] Line Out at Ext N/A 14 40 01 17 90 [Fixed] Speaker at Int 18 f0 11 11 41 [N/A] Speaker at Ext Rear 19 f0 11 11 41 [N/A] Speaker at Ext Rear 1a f0 11 11 41 [N/A] Speaker at Ext Rear 1b f0 11 11 41 [N/A] Speaker at Ext Rear 1d 2d 9a 77 40 [N/A] Modem Hand at Ext N/A1e f0 11 11 41 [N/A] Speaker at Ext Rear 21 30 10 21 02 [Jack] HP Out at Ext Front 下一步,我们要对数据进行修正,让它看起来更像APPLE. 修正PinDefault,并生成ConfigData上一节我们只是把数据进一步地整理出来,并进行了格式化,我们并没有对数据进行修正.本节我们就开始进行PinDefault的修正,先上一张我整理出来的表格: 前面我提到过通过Linux找到的节点0x19,它在Linux下面显示的设备为Headset Mic,在上一节中我们整理出的0x19的设备为:[N/A] Speaker at Ext Rear , PinDefault值为:f0 11 11 41,通过上表我们得知,这个端口是被屏蔽掉的,就是不起作用的节点. 现在我们希望它能正常工作,我的想法是把它修正为:[Jack] Mic at Ext,一个可以正常工作的外部麦克输入设备,结合上面的表格,我将f0 11 11 41修改为:70 20 a1 02. 由于我的耳机插孔只有一个,也就是俗称的二合一插孔,我希望在上面的外麦克工作不正常的情况下,可以将耳麦和耳机输出定义成组合插孔(2in1),上表中Connection Type的连接类型中,正好有个B=Combination,它的意思就是:组合,我需要同时修正耳麦和耳机的数值: Mic at Ext : f0 11 11 41-&gt;70 20 ab 02 HP Out Ext : 30 10 21 02-&gt;30 10 2b 02 屏蔽无效节点:f0 00 00 40屏蔽掉无效的节点,避免产生杂音和底噪,更详细的描述请见其它问题 0x1d的节点为无效节点,所以必须把它屏蔽起来,为了让它更符合APPLE的规范,我们使用f0 00 00 40来屏蔽,包括其它的不用的节点.修正后的数据为: 1234567891011Node c d e f Description12 70 01 a6 90 [Fixed] Mic at Int 13 f0 00 00 40 [N/A] Line Out at Ext N/A 14 40 01 17 90 [Fixed] Speaker at Int 18 f0 00 00 40 [N/A] Speaker at Ext Rear 19 70 10 ab 02 [Jack] Mic at Ext 1a f0 00 00 40 [N/A] Speaker at Ext Rear 1b f0 00 00 40 [N/A] Speaker at Ext Rear 1d f0 00 00 40 [N/A] Modem Hand at Ext N/A1e f0 00 00 40 [N/A] Speaker at Ext Rear 21 30 10 2b 02 [Jack] HP Out at Ext Front 现在, 我们可以生成最终的ConfigData了,ConfigData的计算公式为: 12345Final Config:Address + Node + 71c +【c】Address + Node + 71d +【d】Address + Node + 71e +【e】Address + Node + 71f +【f】 这里的c d e f就是上面整理出来的2位数值我的ALC256的Address值为0,现在我将节点0x12的ConfigData值通过上面的公式整理后得出: 101271c70 01271d01 01271ea6 01271f90 相应地,其它的节点整理出来的数据如下: 1234567891001271c70 01271d01 01271ea6 01271f9001371cf0 01371d00 01371e00 01371f4001471c40 01471d01 01471e17 01471f90 01470c0201871cf0 01871d00 01871e00 01871f4001971c70 01971d10 01971eab 01971f0201a71cf0 01a71d00 01a71e00 01a71f4001b71cf0 01b71d00 01b71e00 01b71f4001d71cf0 01d71d00 01d71e00 01d71f4001e71cf0 01e71d00 01e71e00 01e71f4002171c30 02171d10 02171e2b 02171f02 02170c02 我将编辑的过程做了段视频,方便大家理解. 打开Sublime Text.app,按住鼠标中键打开块复制,将c d e f下面的数据块拷贝一份到最下面空白处,在第一列按鼠标中键一下拉到下面,输入Address值0,再把上方的Node下面的数据做块复制,粘贴到0后面,再输入:71c,再将01271做块复制到后面,再分别输入d e f即可.最后在0x14和0x21节点后面添加两组EAPD数据.将上面整理出来的数据去掉每行的硬回车后得到的一组数据就是最终的ConfigData01271c70 01271d01 01271ea6 01271f90 01371cf0 01371d00 01371e00 01371f40 01471c40 01471d01 01471e17 01471f90 01470c02 01871cf0 01871d00 01871e00 01871f40 01971c70 01971d10 01971eab 01971f02 01a71cf0 01a71d00 01a71e00 01a71f40 01b71cf0 01b71d00 01b71e00 01b71f40 01d71cf0 01d71d00 01d71e00 01d71f40 01e71cf0 01e71d00 01e71e00 01e71f40 02171c30 02171d10 02171e2b 02171f02 02170c02 到这里,ConfigData的数据就算整理完了. 找出适合你的id这一节里,我们就来一起动手找出最适合你的注入id正确的注入id可以保证您的声卡各项功能都能正常使用,它至关重要,这里给出的方法也是为了进一步验证前面我们所做的工作.到找注入id这一步,您至少已经有了这些数据: 声卡基础资料: 名称 解释 Codec: Realtek ALC3246 是告诉了你的声卡型号是ALC3246(ALC256) Address: 0 会告诉你生成configdata的数据的前缀是0,比如上面显示输出信息最后一行的Modified Verbs in One Line:后面所有的数据中,每组数据的第一位就是这个 0 ,如果Address: 2,那么每组数据的第一位就是 2 ,这个后面我们会用到它 DevID: 283902550 (0x10ec0256) 283902550是0x10ec0256的10进制值,0x10ec 是指vendorID(芯片供应商ID),是REALTEK的设备标识,0256是指型号,去掉前面的0,您的声卡型号就是:ALC256 整理出来的有效节点及路径 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;2 0x21 33 HP out 33-&gt;3 0x19 25 Headset Mic in 8-&gt;35-&gt;25 9-&gt;34-&gt;25 0x1a 26 Headphone Mic in 8-&gt;35-&gt;26 9-&gt;34-&gt;26 0x12 18 Internal Mic in 8-&gt;35-&gt;18 最终的ConfigData数据:01271c20 01271d01 01271ea6 01271f90 01371cf0 01371d00 01371e00 01371f40 01471c40 01471d01 01471e17 01471f90 01470c02 01871cf0 01871d00 01871e00 01871f40 01971c10 01971d10 01971e8b 01971f02 01a71cf0 01a71d00 01a71e00 01a71f40 01b71cf0 01b71d00 01b71e00 01b71f40 01d71cf0 01d71d00 01d71e00 01d71f40 01e71cf0 01e71d00 01e71e00 01e71f40 02171c30 02171d10 02171e2b 02171f02 02170c02 下一步,我们就要将这些数据放进AppleALC相应的位置,让它发挥作用. 下载AppleALC操作步骤: 创建AppleALC的本地仓库的克隆版本: 使用git命令,更多git命令的用法请参考git使用简易指南: 123mkdir ~/git # 在家目录下新建立`git`目录cd ~/git # 进入`git`目录git clone https://github.com/vit9696/AppleALC # 克隆AppleALC到本地 或者通过浏览器下载 AppleALC最新版 打开AppleALC目录,进入Resources目录,你会发现这里面躺着截止到目前所支持的声卡的全部型号.我的声卡是ALC256,我就点击ALC256为便于理解,我将除了ALC256之外的其它型号的声卡目录全部删除了,它看起来如下图所示: 我们会发现该目录下包括了一个定义文件Info.plist,打开Info.plist,你会发现,它定义了一个声卡驱动所需要的数据,CodecID后面的598是ALC256的0x256的10进制数值,CodecName是声卡名称的描述,这里是ALC256(3246),接下来是Files,它分成两部分,一部分是Layouts,它定义声卡设备的布局,另一部分是Platforms,它定义声卡的平台注入,包括有效节点和路径的定义. ![ALC256_Info.plist](http://ous2s14vo.bkt.clouddn.com/ALC256_Info.plist.png) 三个layout开头的文件以及三个Platforms开头的文件,Platforms为路径定义文件.其中layout13.xml.zlib layout28.xml.zlib layout56.xml.zlib就是注入的id,只是你的声卡需要注入的是哪个ID才能获得最佳效果,还需要分析其它的数据. 如何找出适合你的id通过制作几十个声卡仿冒的驱动,我发现找出注入的id还是有些窍门的,比如说我可以通过PinConfigs.kext的Info.plist,将同一型号的声卡的ConfigData都找出来,方法: 根据上面整理的声卡基础资料将Address不为0的排除出去 剩下的LayoutID里,再通过ConfigData将有效节点的数据留下,无效的排除,这样剩下来的LayoutID也就没几个了 最后,通过PlatformsID,找出有效节点及路径,最终确定注入的id 需要注意的是,某些型号的声卡的注入id可以是唯一的,也可以是多个,这些都需要通过分析数据进行确认 这里插句题外话:之前给群友做声卡仿冒的时候,ALC269和ALC887我都是直接绕路走的,或者让群友用VoodooHDA,或者直接拒绝.现在可以使用排除法,很快就能找到注入的id 更新于:11-21-2017 22:30 如何修改layout和Platforms数据 上文中我们提到了通过PlatformsID,找出有效节点及路径,最终确定注入的id 如何确认路径是否正确,我应该怎么做呢?先打开Platforms文件,需要用到的工具:zlib转换器.app.操作方法: 打开zlib转换器.app,把需要解压缩的后缀为.zlib的文件拖进窗口里,按下CONVERT按钮,就会在当前的目录下生成去掉了.zlib后缀的可以编辑的.xml文件了.相应地,当你编辑好了的.xml文件,拖进窗口里,按下CONVERT按钮,会在当前目录下生成.zlib后缀的文件了. 使用工具PlistEdit Pro.app打开Platforms56.xml,依次打开PathMap-&gt;0-&gt;0-&gt;0,这里的NodeID就是节点id.为便于理解,我将Mic Int的路径做了说明,如下图显示: 如何新建一个注入id为什么要建立一个全新的layout-id呢?很多时候,我们其实仿冒声卡驱动,只是为了让自己的声卡驱动正常,而通常的做法是找出一个存在的ID,然后整理数据,修改路径和ConfigData,最后编译使用. 那如果AppleALC的维护者vit9696更新了源代码怎么办呢?你总不能再重复做一遍驱动吧?或者说你好不容易找人帮你做好了一个驱动程序,然后AppleALc就升级了,旧的驱动无法用到新的系统当中,这个时候你的选择是什么?继续找人帮你做驱动?或者自己动手仿冒? 其实最好的方法是:如果你的声卡不存在于AppleALC支持的Codecs列表中,或者其中的某个注入id并不会很好地工作,那么你就需要新建一个注入id编译使用,测试无误后,你甚至还可以将这些修改提交给vit9696,他会将这些更新合并到AppleALC的源代码中,这样以后再有更新你只需要下载个AppleALC的发行版直接使用就好了. 上图中,是我给小米Pro制作的全新的ALC298注入ID:99,只要是小米Pro的机型,可以直接注入id:99来驱动你的声卡. 如果你想制作属于你的专属声卡注入ID,可添加文章最后的QQ群,进入群内一起讨论. 编译AppleALC使用xcode通过lilu联合编译 注入id测试检查AppleALC是否正确加载打开终端,输入命令: 1kextstat | grep AppleALC 显示内容如下: 1234kextstat | grep AppleALC 36 0 0xffffff7f8331b000 0xb0000 0xb0000 as.vit9696.AppleALC (1.2.1) 7CDA2635-8BE4-36E1-B882-8CA3B90284F3 &lt;35 7 5 4 3 2 1&gt; 我们可以看到AppleALC驱动已经被正确加载,版本是1.2.1,如果没有内容输出,那么就有可能没有加载.通常这种情况是因为Lilu的版本引起的,可以尝试使用Lilu Debug版本. 检查注入id是否正确打开终端,输入命令: 1ioreg -l | grep layout-id 显示内容如下: 12345678~ % ioreg -l | grep layout-id | | | | "layout-id" = &lt;38000000&gt; | | | | | "IOAudioEngineDeviceDescription" = &#123; "num-internal-mics"=1, "driver digital input gain"=0, "layout-id"=56, "post-processing input gain"=25, "VP-pregain"=25&#125; 为了便于讲解,我将内容做了换行处理.其中的&quot;layout-id&quot;=56就是指注入id是 56 ,而&lt;38000000&gt;是56的16进制 检查PinConfigurations使用IORegistryExplorer.app,找到HDEF@1F,3,右侧的PinConfigurations就是最终的四个节点的数值,同时我们发现其它的节点已经不存在了,这样的结果正是我们需要的. 其它问题解决耳机切换/睡眠唤醒/去除底噪等常见问题 经常会有群友在使用AppleALC声卡仿冒驱动程序驱动了声卡后,出现最多的问题就是外放正常,耳机不正常,具体表现为:耳机在插入一半的时候有声音,完全插入后却没有声音的现象;另一种最常见的现象是开机声音正常,睡眠唤醒后无声/出现杂音/有电流声(底噪)/单声道/只有伴奏音,没有人声等等的问题. 本节教程就让我们来一起解决这些常见问题,还你一个干净的,没有杂音的声卡驱动. 在我们着手解决这些问题之前,需要先说说这些问题是如何产生的: 让我们打开电脑,进入MacOS系统后,AppleALC仿冒驱动会成功加载AppleHDA以驱动你的声卡,这个时候声卡通常工作都是正常的.为了证明AppleALC加载后的有效节点的状态,我们需要使用两个工具widget_dump.sh和node_dump.sh,使用方法:打开终端,输入命令: 1widget_dump.sh 显示的输出信息如下: 12345678910111213141516171819202122232425262728293031323334353637sky@skys-MacBookPro ~ widget_dump.shPin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000020 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000040 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000000 # 耳麦 nid = 0x1a --&gt; result 0x00000000 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000000 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x00000000 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000 我们可以看到,刚开机没有插入耳机的情况下,只有外放的喇叭和内置的麦克风是工作的,其它所有的节点的数据都是空白的. 当我们插入耳机后,再输入命令: 1widget_dump.sh 显示的输出信息如下: 12345678910111213141516171819202122232425262728293031323334353637sky@skys-MacBookPro ~ widget_dump.shPin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000000 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000000 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000020 # 耳麦 nid = 0x1a --&gt; result 0x00000000 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000000 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x000000c0 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000 这时我们会发现,之前工作的喇叭和内置麦克风的数据已经发生了变化 节点 名称 外放状态 耳机状态 0x12 内置麦克风(Mic Int) 0x00000020 0x00000000 0x14 喇叭(Speaker Out) 0x00000040 0x00000000 0x19 耳麦(Mic Ext/Line In) 0x00000000 0x00000020 0x21 耳机(HP Out) 0x00000000 0x000000c0 通过上面的表格,我们可以发现内部设备和外部设备正常工作的情况下会自动切换. widget_dump.sh是调用hda-verb这个外部命令执行的,hda-verb依赖于CodecCommander,所以请确认你已经加载了CodecCommander CodecCommander 编解码器指挥官CodecCommander用于更新在扬声器或耳机节点上使用给定放大器的HDA（高清晰度音频）编解码器上的EAPD（外部放大器）状态（两者，甚至在某些情况下甚至是额外的）。 在OSX中，EAPD在休眠状态下关闭，因此唤醒机器后音频仍然不起作用。 通常情况下，这个外部放大器出现在笔记本电脑和ITX板上，在使用ALC269，ALC665和类似编解码器的机器上最常见。 当机器进入睡眠状态时，功放处于关机状态，在唤醒之后，即使音频正常工作，扬声器/耳机仍然没有声音，因为功放需要发送一个编解码器命令才能启动。 最典型的两条命令是: 120x19 SET_PIN_WIDGET_CONTROL 0x240x21 SET_UNSOLICITED_ENABLE 0x82 其中:SET_PIN_WIDGET_CONTROL是作用于Mic Ext节点,SET_UNSOLICITED_ENABLE是作用于HP Out节点 Pin Widget Control关于Pin Widget Control的描述请参阅英特尔HDA规范 7.3.3.13 Enable VRef Verb ID Payload (8 Bits) Response (32 Bits) Get F07h 0 Bits 31:8 are 0Bits 7:0 are PinCntl Set 707h Bits 7:0 are PinCntl 0 PinCntl定义: 7 6 5 4:3 2 1:0 H-Phn Enable Out Enable In Enable Rsvd VrefEn[2] VRefEn[1:0]/EPT VRefEn 值: VRefEn Encoding VREF Signal Level 000b Hi-Z 001b 50% 010b Ground (0 V) 011b Reserved 100b 80% 101b 100% 110b-111b Reserved SET_PIN_WIDGET_CONTROL: 7654 3210 ALC256 0x19 707 24 -&gt; 0010 0100 -&gt; In Enable,VrefEn 80% 0x21 707 C0 -&gt; 1100 0000 -&gt; Headphone Enable,Out Enable SET_PIN_WIDGET_CONTROL命令最终格式为: Address+NodeID+707+Pin-ctls 最终的命令为:01970724 关于这部分的讨论请参阅Any fix to the Garbled/Distorted Headphone issue? 原引: RehabMan对于VrefEn和EPT的部分讨论内容: 我也尝试了节点0x19的0x20。 这也工作。 所以不知道在我的情况下是否需要VrefEn或EPT。 但是他们与巫毒有关，所以我使用了这个价值。我没有看过Voodoo是否明确地设置了这些值，或者是复位后的状态结果。 我认为我的设置0xC0到0x21也是没有必要的（仍在试验）。 节点0x19不在任何路径图上，所以我对于如何知道节点需要调整有些困惑。 尽管它在Linux转储中有连接到路径图上的其他节点。 进一步造成神秘，它被描述为Linux转储中的外部麦克风插孔。 为什么麦克风上的控件配置会影响耳机，这是一个谜。 还要注意，VrefEn和EPT之间有一些奇怪的重叠，这在规范中是不清楚的（它们似乎都使用相同的位）。 例如，将VRefEn设置为001b或010b（50％/地面）将设置标记为“保留”的EPT编码01b / 10b。 它确实说EPT是特定于“关联的数字Pin Widget”，所以也许这个重叠解释了VrefEn不适用于这样的小部件。 它还指出VRefEn的有效值取决于PinCaps，所以推测数字Pin小部件的PinCap不包含任何有效的VRefEn值。 如果你沿着这条路走下去，你应该计划阅读大量的东西，让整个过程神秘化。 Unsolicited Response 未经请求的响应 关于Unsolicited Response的描述请参阅英特尔HDA规范 7.3.3.14 非请求响应控件确定节点是否被允许发送主动提供的响应，以及该标签将用于响应。此控制仅适用于支持主动响应的节点，如Function Group Type参数（第7.3.4.4节）和Audio Widget Capabilities参数（第7.3.4.6节）中所声明的。在获取或设置此控件之前，应该查询节点以确定它是否支持未经请求的响应。 Connection Select Control连接选择控制: Verb ID Payload (8 Bits) Response (32 Bits) Get F08h 0 Bits 31:8 are 0EnableUnsol is bits 7:0 Set 708h EnableUnsol is bits 7:0 0 EnableUnsol 格式: 7 6 5:0 Enable 0 Tag 设定值是8bits的一个数。记作a7 a6 a5 a4 a3 a2 a1 a0.a7=1，表示enabled。a6=0，没具体应用，不用管。a5-a0，存放tag，需要将tag的值用6为数的二进制值表示tag=1（十进制）=000001（二进制）则a7 a6 a5 a4 a3 a2 a1 a0=10000001a7 a6 a5 a4=1000（二进制）=8（十进制）a3 a2 a1 a0=0001（二进制）=1（十进制）则设定值=81最后加得到的设定值加1，即82 SET_UNSOLICITED_ENABLE命令最终格式为: Address+NodeID+708+Unsolicited 最终的命令为: 02170882 目前CodecCommander所起的作用有限,我基本上都忽略了CodecCommander的存在,因为它并不能从根本上解决这些问题.在我完善我的ALC256声卡驱动期间,我还试用过EAPDFix,最后都不得不放弃治疗.直到我遇到了ALCPlugFix,它能解决几乎所有的耳机切换问题. ALCPlugFix能做什么? 它可以解决耳机插拔状态的切换 它是通过使用命令:hda-verb 0xNode SET_PIN_WIDGET_CONTROL 0xVerbs的方式进行状态切换 hda-verb的由来 hda-verb是linux下面的alsa-project的一条命令，它的作用是发送HD-audio命令 ALCPlugFix如何使用? 将ALCPlugFix同步到本地 1git clone https://github.com/daliansky/ALCPlugFix 打开ALCPlugFix目录下面的main.m,将包含hda-verb语句的几行修改成如图所示 其中0x12是Mic Int节点,0x19是Mic Ext节点,之所以要这么修改,是因为我的ALC256的0x19节点总是无法工作,在插入耳机的时候我希望内置的Mic Int可以工作的同时还可以使用耳机. 将XCODE编译生成的ALCPlugFix文件复制到alc_fix目录,然后双击install双击自动安装.command,输入用户密码即可. ALCPlugFix工具下载 刚才我前面讲了,ALCPlugFix是依赖于CodecCommander执行的,那我为什么不介绍下CodecCommander的工作原理呢,其实说白了CodecCommander里面通常执行的也是hda-verb 0x19 0x707 0x20之类的语句,只是在睡醒唤醒后CodecCommander已经无法执行hda-verb 0x19 0x707 0x20这样的语句了,而ALCPlugFix却是以守护进程的方式存在于系统中,无论什么时候它都会监听声卡的状态,该切换时它就会发出命令切换,这样就保证了声卡总是可以工作在正确的状态下. 基本上所有的耳机睡眠后没有声音的,只需要使用一条命令:hda-verb 0x19 0x707 0x20,就可以让你的耳机出声的.当然前提是你得先加载了CodecCommander这个驱动.估计我写完这段你们看完了还是一头雾水,我教大家一个简单的记法:ALCPlugFix作用于耳机,所以你需要知道自己的两个耳机节点,而0x19是耳麦的麦克风输入节点,只要找对了耳麦的节点,一条命令就可以搞定你的耳机切换. 杂音和底噪的去除在着手解决这个问题之前,让我们先来搞清楚杂音和底噪产生的原因. 打开终端,输入命令: 1node_dump.sh 它会输出很多的信息出来,我们只需要最后面的这组数据: 123456789101112131415161718192021222324252627282930313233343536Configuration Default nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x90a60170 # 内置麦克风 nid = 0x13 --&gt; result 0x400000f0 nid = 0x14 --&gt; result 0x90170140 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x400000f0 nid = 0x19 --&gt; result 0x02ab1070 # 耳麦 nid = 0x1a --&gt; result 0x400000f0 nid = 0x1b --&gt; result 0x400000f0 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x400000f0 nid = 0x1e --&gt; result 0x400000f0 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x022b1030 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000 这些数据里:0x00000000是无效的节点,0x400000f0是被屏蔽掉的节点.其它的四个有效的节点我做了备注,方便你们看清楚.这些PinConfigurations决定了你的声卡音质.如果你的命令输出信息里面除了有效节点和0x400000f0之外的其它任何格式的数据都会产生杂音和底噪.比如0x40000000或者0x411111f0,这些无效的节点就会一直在起作用,这就好比一个流行乐队里,需要一个架子鼓,一台电钢琴,两个吉他手,再加上一个歌手,如果你生硬地再加进一把小提琴,再弄个竖琴,就会不和谐,就会产生噪音. 再让我们搬出widget_dump.sh命令: 1widget_dump.sh 输出信息如下: 123456789101112131415161718192021222324252627282930313233343536Pin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000000 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000000 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000020 # 耳麦 nid = 0x1a --&gt; result 0x00000020 # 无效节点 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000020 # 无效节点 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x000000c0 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000 我故意在四个有效的节点之外添加了两个无效的节点,为了让大家看清楚一些,这些无效的节点就会工作,它会产生底噪,尤其是戴上耳机,关闭音源,就会听到沙沙沙的声音,也有人说它是电流声,严重时还会产生杂音,包括单声道输出等等. 既然我们知道了问题是如何产生的,那么就让我们来消除这些杂音,还原干净的声音. 让我们回到整理ConfigData这一章,将有效节点之外的其它节点全部使用f0 00 00 40进行屏蔽. 声卡驱动了,音量调节的图标也显示正常,就是不发声怎么办如果您的声卡使用了AppleALC,也注入了正确的ID后不发声怎么办呢?这个问题就出现在有效节点和路径不正确上面.所谓条条大路通罗马,我们总不能在同一棵树上吊死吧.现在可以请出VoodooHDA万能声卡驱动程序下载链接了,说它万能是不正确的,如果它万能了估计就没AppleALC啥事儿了吧.这里可以借助VoodooHDA自带的应用程序:getdump,使用方法:打开终端,输入命令: 123sudo cp ~/Downloads/getdump /usr/local/bin # 将getdump命令复制到/usr/local/bin目录下sudo chmod +x /usr/local/bin/getdump # 为getdump添加执行权限getdump &gt; ~/Desktop/voodoo_dump.txt 用它可以生成一份voodoo_dump.txt的文件,里面会有两段以DUMPING Playback/Record Paths开头的文字描述,这里面即包括了有效节点,同时也包括了有效的路径从上面的两张截图中,可以将有效的节点和路径整理出下面的表格: 有效节点 10进制 设备名称 路径 0x14 20 Speaker out 20-&gt;12-&gt;2 0x21 33 HP out 33-&gt;13-&gt;3 0x19 25 Headset Mic in 8-&gt;35-&gt;24 8-&gt;35-&gt;29备用 0x12 18 Internal Mic in 9-&gt;34-&gt;18 9-&gt;34-&gt;29备用 有了这个表格,再结合configdata,找出有效的ID,编译AppleALC,注入ID并使用声卡驱动. HDA工具下载及使用制作声卡仿冒需要用到的工具,我已经同步到仓库,您可以打包下载也可以通过git同步到本地 下载链接:https://github.com/daliansky/dell7000/tree/master/hda-tools 如何安装 将hda-tools目录下的所有文件复制到/usr/local/bin下,如果/usr/local/bin目录不存在,需要新建立,命令如下: 12sudo mkdir /usr/local/bin # 建立/usr/local/bin子目录sudo cp ~/Downloads/hda-tools/* /usr/local/bin # 将hda-tools目录下所有的应用程序复制到/usr/local/bin目录下 12345678* 如何使用 * 打开终端,输入命令,直接执行.例如: ```sh verbit.sh codec#0 &gt; codec_dump.txt # 有效节点格式化 codecgraph codec#0 # 自动生成pathmap图,文件位于codec#0相同目录下 hda-verb 0x19 0x707 0x20 # 耳机睡眠唤醒无声修正 widget_dump.sh # 读取SET_PIN_WIDGET_CONTROL数值 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群] 688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>AppleHDA</tag>
        <tag>声卡仿冒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CloverALC给AppleHDA打补丁，适用于台式机]]></title>
    <url>%2FClover-Patched-Desktop-AppleHDA-Realtek-ALC-Audio.html</url>
    <content type="text"><![CDATA[教程 使用 CloverALC 给 AppleHDA 打补丁， 适用于台式机 原生支持 AppleHDA 使用 Clover 为Realtek ALC芯片打补丁，这种方法可以启用macOS AppleHDA 板载音频，无论是否带有HDMI和DP音频。 该脚本添加了编解码器特定的布局和平台文件，并将二进制补丁和引脚配置数据注入到本地安装的 AppleHDA.kext 。 版本: audio_cloverALC-1x0 简单: .command命令, 请看 C.安装 Bash: .sh命令, 请看 D. 终端 更新列表 9-26-17 支持10.13, 支持ALC269/ALC283 支持PikeralphaALC弃用的 12-14-15 audio_pikeralpha-110 (Clover版本的Piker Aplha AppleHDA8Series.sh) 11-8-15 Skylake/100系统更新，加入ALC1150/Audio ID: 3 7-19-15 ALC283更新 6-15-15 10.11 - El Capitan Realtek ALC AppleHDA.kext 初始支持 A. 需求 macOS/Clover_v2696及以后版本 10.13/High Sierra, 关闭 SIP, 挂载 EFI 10.12/Sierra, 关闭 SIP, 挂载 EFI 10.11/El Capitan, 设置 boot flag: rootless=0 10.10/Yosemite, 设置 boot flag: kext-dev-mode=1 10.9/Mavericks 10.8/Mountain Lionon 原生的、未修改的 AppleHDA.kext Need native? 支持Realtek板载的音频编解码器 Unknown codec? B. Realtek ALCxxx (验证过的编解码器和音频ID) 支持的编解码器 (* 不支持 audio_pikeralpha-110) 885 887 888 889 892 898 1150 1220 支持的音频ID 音频ID: 1 支持 885, 887, 888, 889, 892, 898, 1150, 1220 Realtek ALC audio (默认, 1/2/3/5/6 主板音频端口) 音频ID: 2 支持 887, 888, 889, 892, 898, 1150, 1220 Realtek ALC/5.1声道 (3主板音频端口，2进/1出变成3出) 音频ID: 3 支持 887, 888, 889, 892, 898, 1150 带有Realtek ALC音频的HD3000 / HD4000 HDMI音频 C. 安装 通过 Clover 为 AppleHDA 打补丁 下载 audio_cloverALC-1x0.command 双击: audio_cloverALC-1x0.command Password: Confirm Codec ALCxxx: (885, 887, 888, 889, 892, 898, 1150, 1220 only) Clover/Legacy: answer y to Confirm Clover Legacy Install (y/n) Clover Audio ID Injection (y/n): Use Audio ID: x (y/n): Optional: Terminal/Terminal Saved Output 重启电脑 验证ALC板载音频 系统偏好设置/声音/输出/选择音频设备 D. 终端 通过 Clover 为 AppleHDA 打补丁 下载 audio_cloverALC-1x0.sh 打开终端 1./audio_cloverALC-1x0....sh 其它步骤同 C. E. 更多的信息 Details Onboard Audio Solutions Requirements - Supported/Unsupported Notes Guides Tools Problem Reporting Terminal Saved Output Clover/EFI Clover/Legacy CreditTHe KiNG, bcc9, RevoGirl, PikeRAlpha, SJ_UnderWater, RehabMan, TimeWalker75a, lisai9093, abxite toleda https://github.com/toleda/audio_cloverALC 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <tags>
        <tag>Clover</tag>
        <tag>AppleHDA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.1(17B48)正式版 with Clover 4278原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.1-(17B48)-official-version-and-Clover-4278-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.1(17B48)正式版 with Clover 4278原版镜像 本镜像采用官方原版app制作，集成Clover 4278，支持UEFI启动安装。 Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理 Clover默认配置文件config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡； 已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接https://pan.baidu.com/s/1sla8aQhMD5 (macOS High Sierra 10.13.1(17B48) Installer with Clover 4278.dmg) = 2e6b403eed5a18ffbbaaf53b3261c71c 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
        <tag>10.13.1</tag>
        <tag>17B48</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一条命令教你如何确认自己的机型及如何开启HWP]]></title>
    <url>%2FA-command-to-teach-you-how-to-confirm-their-own-models-and-how-to-open-the-HWP.html</url>
    <content type="text"><![CDATA[HWP是什么？HWP是Hardware Work Package的简称，翻译过来叫做：硬件标准部件在macOS下,HWP是指Intel SpeedShift，开启全功率的电源管理，更多的解释请参阅原文 用到的工具： freqVectorsEdit.sh用法： 打开终端，复制下面命令：cd /tmp &amp;&amp; curl -s https://raw.githubusercontent.com/Piker-Alpha/freqVectorsEdit.sh/master/freqVectorsEdit.sh &gt; /tmp/freqVectorsEdit.sh &amp;&amp; chmod +x freqVectorsEdit.sh &amp;&amp; /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/Mac-*.bin 注意上面的命令为一条，须全部复制 系统会使用 curl 自动下载一个程序，保存到 /tmp ,之后自动执行，期间需要你输入自己的用户密码，程序执行完后会自动清除临时文件； 屏幕会输出40个机型，其中亮白加粗为你当时设置的机型，带 绿色 显示的那三行前面括号里的机型为可选机型，带 HWP 字样的为可以开启 HWPEnable 输入方括号里面的数字并回车，可以修改相对应的机型，同时开启 HWP 本文不讨论开启 HWP 的步骤及用法，更多的信息请参阅其它文章 收工关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>HWP</tag>
        <tag>机型</tag>
        <tag>变频</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC常用快捷键整理]]></title>
    <url>%2FMAC-commonly-used-shortcut-keys-finishing.html</url>
    <content type="text"><![CDATA[写在前面 苹果 Mac 系统常用快捷键有很多，但是很多童鞋对于这些 Mac 快捷键都不是很熟悉，今天小编为大家整理了一份 Mac 系统常用快捷键大全，大家快收藏起来吧!平时在使用 Mac 系统的时候可以提高不少工作效率哦! 本文转自 Xclient.info，转载请注明原出处 小普及 Mac中主要有四个修饰键，分别是 Command，Control，Option 和 Shift。 这四个键分别有自己的图案，他们经常出现在Mac应用程序中的菜单栏里，方便你随时学习新的快捷键。 如下 正文通用快捷键 Command 是 Mac 里最重要的修饰键，在大多数情况下相当于 Windows 下的 Ctrl，黑果通常是 Alt 键。 Command + Z 撤销。 Command + X 剪切。 Command + C 拷贝(Copy)。 Command + V 粘贴。 Command + A 全选(All)。 Command + S 保存(Save)。 Command + F 查找(Find)。 系统快捷键 Option 开机后立即按下，将显示启动管理器。 Command + R 开机后立即按下，可打开OS X 的恢复功能。 Command + Option + P + R 开机后立即按下，重置 NVRAM。有些时候电脑会出现些小问题，重置 NVRAM 是你除了重新启动，尝试修复的第一选择。 Command + Option + Control + Power 退出所有应用程序，允许你进行文稿储存，然后关机。 按住 Power 按钮 5 秒 强制 Mac 关机。 截图 Command + Shift + 3 截取全部屏幕到文件。 Command + Shift + Control + 3 截取全部屏幕到剪贴板。 Command + Shift + 4 截取所选屏幕区域到一个文件，或按空格键仅捕捉一个窗口。 Command + Shift + Control + 4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗口。 文件管理器 Command + Shift + N (New) 新建文件夹。 Command + Shift + G (Go) 调出窗口，可输入绝对路径直达文件夹。 return 这个其实不算快捷键，点击文件，按下可重命名文件。 Command + O 打开所选项。在 Mac 里打开文件不像 Windows 里直接按 Enter。 Command + Option + V 作用相当于Windows里的文件剪切。在其它位置上对文件复制(Command-C)，在目的位置按下这个快捷键，文件将被剪切到此位置。 Command + ↑ 打开包含当前文件夹的文件夹，相当于 Windows 里的“向上”。 Command + Delete 将文件移至废纸篓。 Command + Shift + Delete 清倒废纸篓。 Space 快速查看选中的文件，也就是预览功能。 切换 Command + Tab 在应用程序间切换。 Command + Shift + Tab 在应用程序间切换(反向)。 Command + ~ 在各应用中的窗口间切换。 浏览器 Command + L 光标直接跳至地址栏。 Control + Tab 转向下一个标签页。 Control + Shift + Tab 转向上一个标签页。 Command + ‘+’或’=’ 放大页面。 Command + ‘-‘ 缩小页面。 应用程序中 Command + H 隐藏(Hide)当前正在运行的应用程序窗口。 Command + Option + H 隐藏(Hide)其他应用程序窗口。 Command + Q 退出(Quit)最前面的应用程序。 Command + Shift + Z 重做，也就是撤销的逆向操作。 Command + Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于 Windows 中(Alt+Tab)。 Command + Option + esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出。 文本处理 Command + B 切换所选文字粗体(Bold)显示。 fn + Delete 相当于 PC 全尺寸键盘上的 Delete，也就是向后删除。 fn + ↑ 向上滚动一页(Page Up)。 fn + ↓ 向下滚动一页(Page Down)。 fn + ← 滚动至文稿开头(Home)。 fn + → 滚动至文稿末尾(End)。 Command + → 将光标移至当前行的行尾。 Command + ← 将光标移至当前行的行首。 Command + ↓ 将光标移至文稿末尾。 Command + ↑ 将光标移至文稿开头。 Option + → 将光标移至下一个单词的末尾。 Option + ← 将光标移至上一个单词的开头。 Control + A 移至行或段落的开头。 更多快捷键如果你还想学习更多快捷键，请点击这里查看苹果官方的快捷键帮助文档。 关于打赏 您的支持就是我的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>shortcut-keys</tag>
        <tag>快捷键</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clover使用教程]]></title>
    <url>%2Fclover-user-manual.html</url>
    <content type="text"><![CDATA[Clover的前世今生 前言：先将最最基本的操作发出来，然后再写完整的教程 如何打开啰嗦模式进行排错开机进入clover引导界面，在要引导的分区卷标上按 空格 即可进入勾选以下选项：选择 Boot macOS with selected options 启动出现错误画面拍照发群里寻求帮助。 Clover是什么什么是Clover（三叶草）呢？显然它不是指的草地里用来喂牛的草啦。Clover是一个软件，是一个新型的启动器，它能够让普通的PC上用上Mac OS X系统。 苹果公司（Apple）限制Mac OS X系统只能在Apple设备上使用，并且苹果不保证Mac OS X在其它设备上能够正常工作。所以，用户需要承担一定的风险。当然，为了避免其它的法律纠纷，你不应该用作商业用途。装上了Mac OS X的非苹果电脑，就叫做黑苹果(Hackintosh)。 名字的来源启动器的名字 Clover 由一位创建者kabyl命名。他发现了四叶草和Mac键盘上Commmand键的相似之处，由此起了Clover这个名字。 维基百科：四叶草是三叶草的稀有变种。根据西方传统，发现者四叶草意味的是好运，尤其是偶然发现的，更是祥瑞之兆。另外，第一片叶子代表信仰，第二片叶子代表希望，第三片叶子代表爱情，第四片叶子代表运气。 Clover能干什么Clover是一个操作系统启动加载器(boot loader)，能够同时运行于支持EFI方式启动的新式电脑和不支持它的老式电脑上。一些操作系统可以支持以EFI方式启动，比如OS X, Windows 7/8/10 64-bit, Linux；也有不支持的，比如Windows XP，它只能通过传统的BIOS方式来启动，也就是通过启动扇区来启动。 EFI不仅存在于操作系统的启动过程中，它还会创建操作系统可访问的表和服务(tables and services)，操作系统的运行依赖于EFI正确的提供功能。从内建的UEFI来启动OS X是不可能的，用原始的DUET来启动OS X也不可能。CloverEFI和CloverGUI做了大量的工作来修正内部表，让运行OS X成为可能。 译注：DUET(Developer’s UEFI Emulation)，开发者的UEFI模拟 Clover的两种启动方式启动方式A: 基于BIOS的电脑（老式主板）BIOS-&gt;MBR-&gt;PBR-&gt;boot-&gt;CLOVERX64.efi-&gt;OSLoader 启动方式B: 基于UEFI的电脑（新式主板）UEFI-&gt;CLOVERX64.efi-&gt;OSLoader Clover兼EFI的目录结构 Clover驱动程序详解BIOS启动过程中（启动方式A）要用到drivers32或drivers64目录，UEFI启动过程中（启动方式B）则使用 drivers64UEFI 目录。它们的内容会根据配置和BIOS版本而有所不同。必须要提的一点是这些驱动程序只在bootloader运行时有效，不会影响最终启动的操作系统。至于到底要使用哪些驱动程序由用户来决定。 Drivers64UEFI目录几必备的驱动程序： 驱动程序 详解 apfs.efi 苹果新推出的文件系统，macOS 10.13必备 FSInject.efi 控制文件系统注入kext到系统的可能性。详细解释请参照WithKexts HFSPlus.efi HFS+文件系统驱动程序。这个驱动对于通过启动方式B来启动Mac OS X是必须的。启动方式A中用到的启动程序(CloverEFI)已经包含了这个驱动 OsxAptioFixDrv-64.efi 修复AMI Aptio EFI内存映射。如果没有就不能启动OS X OsxFatBinaryDrv-64.efi 允许加载FAT模块比如boot.efi CsmVideoDxe.efi 比UEFI里提供更多分辨率的显卡驱动(可选) OsxAptioFix2Drv-64.efi 部分机型可能会需要(可选) Clover Bootloader详解本节会详细介绍Clover各项功能的用法 Clover主界面使用Clover开机引导后，默认的系统界面如下： 本例中: 蓝色图标为 Windows 10 的引导 绿色图标为 Ubuntu Linux 的引导 橙色图标为 macOS High Sierra 的引导 红色图标为 macOS Sierra的引导 当你想引导到不同的操作系统，只需要移动键盘上的左右键到各自的图标后回车即可。 帮助菜单 F1按 F1 键会呼出 Clover 的帮助信息 ESC 退出子菜单，恢复到主菜单 F1 帮助 F2 保存 preboot.log 到 EFI/CLOVER/misc/ 目录下，以便于您排错 F3 显示 被隐藏 的入口 比如你在 config.plist 中隐藏了 Recovery HD 当你想进入恢复模式的时候，可以不需要修改 config.plist 而直接按 F3 显示出那些被你隐藏的引导项。如下图： F4 提取 DSDT 保存到 EFI/CLOVER/ACPI/origin/ 此选项会经常用到。比如你的机器出现问题，需要别人帮助你解决问题，人家会跟你要 DSDT ，这个时候你只需要在 Clover 引导界面按下快捷键 F4 即可提取 F5 提取修正过的 DSDT 保存到 EFI/CLOVER/ACPI/origin/ F6 提取显卡ROM VideoBios 保存到 EFI/CLOVER/misc/ F10 截屏，截取当前界面，保存到 EFI/CLOVER/misc/ F11 重置NVRAM,r4299版本新增 空格 选定菜单项的详细信息 数字 1-9 菜单项的快捷键 A 关于 Clover O Clover 选项 此选项是 Clover 的核心，所有的选项都在这个菜单里，当你无法引导进入 macOS 系统使用 Clover Configurator 进行选项调整时，可以通过该选项进行修改进入系统。后面会详细介绍 R 软复位 U 退出 如何打开啰嗦模式进行排错【重复内容，目的是加深印象】开机进入clover引导界面，在要引导的分区卷标上按 空格 即可进入勾选以下选项：选择 Boot macOS with selected options 启动出现错误画面拍照发群里寻求帮助。 Clover Options：Clover选项 文章上面已经提到了Clover的选项是它的核心，那么现在就让我们走进Clover选项设置 照例先上一张图： Boot Args 引导参数传递，比如前面教大家的使用 -v 打开啰嗦模式，就是通过它传递的；再比如你使用了不兼容版本的 Lilu 和 AppleALC 而导致无法进入系统时，可以在这上面手动添加上： -liluoff 或者 -alcoff 跳过相关的驱动而进入系统 Configs 配置文件选择。当你有不止一个 config.plist 配置文件时，可以通过该选项选择不同的配置文件进入系统 操作过程 光标移动到 Configs 回车后进入子菜单 通过光标上下移动选择其它的配置文件，回车后按 ESC 键退到主菜单 GUI tuning Clover主题切换，当你有不止一套主题的时候，可以通过该选项切换主题 操作过程 光标移动到 GUI tuning 回车后进入子菜单 光标移动到 Themes ，回车后进入子菜单 通过光标上下移动选择其它的主题，回车后按 ESC 键退到主菜单，Clover主界面已经刷新为选择的新主题 ACPI patching 电源补丁：进不去电脑的，需要drop tables的，禁用/调用 DSDT.aml ，禁用 hotpatch ，无关关机的，无法重启的；总之跟电源相关的都在这里边。 操作过程光标移动到 ACPI patching 回车后进入子菜单 Debug DSDT 打开DSDT调试模式 DSDT name 默认文件名为：DSDT.aml Tables dropping 光标移动到 Tables dropping 回车进入 通过移动光标按空格勾选各选项，按 ESC 退出该子菜单 该表格等同于使用 Clover Configurator 打开 config.plist 后，在 ACPI 选项的左下角 Drop Tables Drop OEM _DSM 丢弃_DSM 光标移动到 Drop OEM _DSM 回车进入 通过移动光标按空格勾选各选项 按 ESC 退出该子菜单 DSDT fix mask DSDT修复遮盖 详细说明如下： 参数 描述 AddDTGP 修改 DSDT 添加方法所必须依赖的函数。必不可缺 FixDarwin Fixshutdown 关机修复，主要是添加 _PTS 函数，判断寄存器 arg0 值是否为 5 ，华硕主板建议勾选. AddMCHC 这个功能是在 dsdt 中添加一装置具体是 DveiceID=0X0044,匹配 Intel Clarkdale 平台。有些芯片需要这个装置来解决 PCI 的电源管理问题，一般不启用 FixHPET 修复 HPET ，添加 IRQ(0,8,11) 加载原生电源管理，10.9 不需要 FakeLPC 仿冒 LPC ，一般 Clover 会自动注入合适的芯片参数到 dsdt 中，来达到加载 AppleLPC.kext 的目的。对以 Intel and NForce 芯片，建议勾选。特别是芯片组比较老的如：ICH7,ICH9 FixIPIC 从 decice IPIC 移除中断语句 (IRQ(2)),有助于电源按钮的工作，对于笔记本而言，更希望增加这个中断功能 FixSBUS 增加 SMBusControlle 到设备树种，可修复因缺失 SBUS 控制而在系统 log 中出现的警告，建议勾选 Fixdisplay 增加 GFX0,和 HDMI 音频设置 HADU. 如果设置了 FAKEID 也会增加到这边，建议勾选 FixIDE 修复在 10.6 事五国出现的 AppleIntelPIIXATA 错误。 一般不启用 FixSATA 内建磁盘，用 ICH6 的 ID 匹配，解决橙色磁盘问题，一般启用 FixFIREWIRE 在火线控制装置中增加 fwhub 属性。一般不启用 FixUSB 注入 USB 属性，帮助内建 USB FixLAN 注入网卡属性，帮助网卡内建。建议启用 FixAirport 为支持 Airport 的无线网卡注入属性，以开启 Airport 功能，无此设备的不启用 FixHDA 修正 AZAL to HDEF or HDAU, 增加 layout -id 和 pinconfig,MaximumBootBeepVolume 属性 FixDarwin7 这项补丁只有Darwin OS系统［苹果系统］识别 FixRTC 从RTC装置中删除IRQ（0），作用是否与patch里的防RTC重置类似？ FixTMR 从TMR装置中删除IRQ(8)，适用于较早的dos设备，现代新的计算机不需要补丁，这个问题只是以前没发现［作者］ AddIMEI 这个设置用于intelHDxxx集成显卡，解决完美注入。这项也需要开启fakeid -&gt; IMEI FixIntelGfx 开启对IntelGFX显卡的新补丁设置，不开启则补丁不会生效［配合imei］ FixWAK 这个补丁主要是消除警告，如在method_WAK下缺少返回语句则加入Return(Package(0))，我不知道会有什么 DeleteUnuse 从DSDT中删除没有使用的设备如软盘驱动器，打印机端口和其他没用的设备 FixADP1 将“ AC0 ”设备 重命名为“ ADP1”设备. AddPNLF 添加一个非常实用的PNLF 设置代码：当然只有你可以调节亮度控制时才有用。这个补丁也会对系统良好的睡眠/唤醒 FixS3D 修正了 _S3Dmethods函数，也解决了一些睡眠/唤醒的问题 FixACST ACST项含义对于苹果和华硕意义不同，对于华硕是AC适配器状态，而苹果是一个替代_cst，c-states table［CPU 闲置休眠状态的功能］。如果要没有冲突就要将其重名为其他名称的东西 AddHDMI 修复HDMI音频输出问题（无需修改AppleHDA） FixRegions 因为BIOS当中的一些内容改变了。这个浮动的区域导致无法使用自定义DSDT（custom DSDT），因为这个区域可移动且不符合当前的状态。这个补丁的目的是找到BIOS中所有这样的区域并在自定义DSDT中加以修正。所以现在你可以生成有错误区域的自定义DSDT然后使用这个补丁 FixHeaders MACH reboot修复 光标移动到 DSDT fix mask 回车进入 通过移动光标按空格勾选各选项 按 ESC 退出该子菜单 Custom DSDT patches 自定义的DSDT补丁 光标移动到 Custom DSDT patches 回车进入 通过移动光标按空格勾选各选项 按 ESC 退出该子菜单 Kext Inject Management 管理你的驱动程序通过Clover加载的驱动程序位于 EFI/CLOVER/kexts/Other ，也有可能位于 EFI/CLOVER/kexts/10.13 或者 EFI/CLOVER/kexts/10.12 目录中。它至少包括以下驱动程序： 驱动程序 详细信息 备注 FakeSMC.kext 安装hackintosh的核心程序，没有它就没法在你的电脑上面运行macOS 必备 Lilu.kext 内核扩展程序，离开它，下面的几个程序都无法正常运行 必备 AppleALC.kext 动态对系统注入必要的文件/打补丁以驱动声卡(依赖于Lilu) 可选 IntelGraphicsFixup.kext 修补 Intel 核显综合问题 (开机花屏，Haswell/Skylake 因 PAVP 导致的死机等等)(依赖于Lilu) 可选 IntelGraphicsDVMTFixup.kext 修正 Broadwell/Skylake 平台核显因 DVMT 不足而导致的死机(依赖于Lilu) 可选 NvidiaGraphicsFixup.kext 修正 N 卡 (可能也适用于 I 卡) 使用某些 SMBios 如 MacPro6,1 等引发黑屏的问题(依赖于Lilu) 可选 WhateverGreen.kext 修补 AMD 独显综合问题 （单卡启动黑屏，唤醒黑屏 等等）(依赖于Lilu) 可选 AirportBrcmFixup 修补 Broadcom Wi-Fi 综合问题 可选 FakePCIID.kext 仿冒PCI设备核心驱动，部分驱动依赖于它 可选 ACPIBatteryManager.kext 笔记本电池管理驱动 可选 RealtekRTL8xxx.kext Realtek 8xxx网卡驱动程序 可选 VoodooPS2Controller.kext Voodoo键盘/鼠标驱动程序 可选 当你面对这么一堆驱动的时候，如何让它们有条不紊地正常工作呢？万一出现问题的时候又如何让这些驱动在Clover引导的时候禁用它们呢？这个时候 Kext Inject Management 就派上用场了。新版的 Clover Bootloader 已经将 Kext Inject Management 放到了 macOS 系统分区的图标下面了。 操作方法： 开机进入clover引导界面，要引导的分区卷标上按 空格 即可进入 光标移动到 Kext Inject Management 回车进入 选择当前系统加载的驱动程序目录 勾选禁用的驱动程序 按 ESC 退出该子菜单 后记Clover Bootloader的使用暂时先写到这里，还有更多的用法等着我们去发掘。您有什么想法或者需要补充的，请点击下面的QQ群与我联系更新。 特别感谢群友 (￣(工)￣)_小哥哥 帮忙整理部分资料 关于打赏整整写了两天的博文，如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>clover</tag>
        <tag>手册</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[惠普HP ENVY Laptop 13-ad1xx笔记本电脑安装MacOS手记及EFI分享]]></title>
    <url>%2FHP-HP-ENVY-Laptop-13-ad1xx-Notebook-PC-Mac-OS-Note-and-EFI-Share.html</url>
    <content type="text"><![CDATA[惠普HP ENVY Laptop 13-ad1xx笔记本电脑安装MacOS手记及EFI分享 群里有网友新购买了惠普HP ENVY Laptop 13-ad110tu笔记本电脑，想安装MacOS系统。本着折腾的原则，制作了hotpatch补丁。现将安装过程记录下来，以供后来者参考。 电脑配置 规格 详细信息 电脑型号 HP ENVY Laptop 13-ad1xx 笔记本电脑 操作系统 Windows 10 64位 ( DirectX 12 ) 处理器 英特尔 Core i5-8250U @ 1.60GHz 四核 主板 惠普 83A8 ( 英特尔 Xeon E3 - 1200 v6/7th Gen Intel Core) 显卡 英特尔 UHD Graphics 620 ( 128 MB / 惠普 ) 内存 8 GB 主硬盘 英特尔 NVMe SSDPEKKF25 ( 256 GB / 固态硬盘 ) 显示器 京东方 BOE070E ( 13.3 英寸 ) 声卡 瑞昱 @ 英特尔 High Definition Audio 控制器 网卡 英特尔 Dual Band Wireless-AC 7265 制作EFI 提取 DSDT/SSDT，制作hotpatch； 添加独显屏蔽补丁，以适用于其它相似机型； 添加虚拟网卡驱动，以解决icloud及AppStore登录问题； 配置其它驱动程序； 打包EFI。 安装过程制作USB安装盘，替换EFI，进入Clover报错，将Drivers64UEFI目录下的OsxAptioFixDrv-64.efi替换为OsxAptioFix2Drv-64.efi，顺利进入Clover，可以正确识别NVMe SSD以及外置移动硬盘，分区抹盘完成安装，过程顺利。 完善驱动程序 声卡：型号为ALC298，注入ID：28，使用AppleALC仿冒，顺利加载；修正HDMI Audio输出信息； 网卡：INTEL的无线网卡截止到目前还是全球无解，使用购买赠送的TYPE-C转EtherNet网卡免驱动直接使用； 显卡：Intel UHD Graphics 620，Platform-id为：0x59170000，目前还没法原生驱动，上次在安装小米Pro的时候已经折腾很久也没有驱动上，昨晚又花了近三个小时还是无果，最后采取的是仿冒方式，Platform-id为：0x19160000，通过SSDT-Config.aml注入，修改显存为2048MB；通过读取Clover的源程序，发现UHD 620仿冒的是HD 620的Platform-id:0x59160000，有机会再测试吧。 蓝牙使用Intel，工作正常； 电池信息正常； 触摸板正常工作； 显示器亮度调节正常； USB端口信息未完善，需要使用SSDT-UIAC.aml进行修改； PCI设备信息未修正； 系统截图 备注:该截图为显卡未驱动状态 EFI更新源https://github.com/daliansky/hp-envy13 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>教程</tag>
        <tag>惠普</tag>
        <tag>ENVY</tag>
        <tag>ad1xx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将CLOVER引导添加进UEFI BOOT Option Menu的正确姿势]]></title>
    <url>%2FAdd-the-CLOVER-boot-to-the-correct-posture-of-the-UEFI-Boot-Option-Menu.html</url>
    <content type="text"><![CDATA[将CLOVER引导添加进UEFI BOOT Option Menu的正确姿势 很多网友在安装完 MacOS 后的第一件事情就是要将USB的EFI复制进磁盘里，同时需要将CLOVER的引导项添加UEFI BOOT里，这里我教大家一个最简单的方法 将 MacOS 系统的EFI移动进磁盘的EFI分区里单磁盘单 MacOS 系统两种方式： 请使用工具： Clover Configurator 或者 ESP Mounter Pro，分别挂载U盘的EFI分区和磁盘里的EFI分区，然后将U盘下的EFI分区里面的EFI目录复制到磁盘里的EFI分区下即可 使用系统命令 diskutil ，具体操作请移步 单磁盘双系统最简单的分区结构是：一个 EFI 分区，一个 MacOS 分区，一个 Windows 分区 假设你想在同一块磁盘里同时安装 MacOS 和 Windows 10 双系统的话，那么我给你的建议是无论是先安装 MacOS 系统还是先安装 Windows 10 系统，都要在安装完 Windows 10 系统后再将U盘的EFI移动到磁盘的EFI分区里。因为当你安装完 Windows 10 的系统后，它会重新将EFI分区格式化的。 安装完的 Windows 10 的EFI分区里面会有个EFI的目录，目录里面会包括 BOOT 和 MICROSOFT 这两个目录,它看起来是这样的： 将U盘里的EFI目录下面的 CLOVER 目录复制到磁盘里的EFI分区EFI目录下 切记一点：千万不要动另外的Boot和Microsoft目录 双磁盘双系统每块磁盘都分别包括各自不同的EFI分区，两块磁盘通过开机按Boot快捷键选择引导进入不同的系统，该种情况不在本教程讨论范围内。 将 CLOVER 引导项添加进 UEFI Boot Option Menu两种方式： 通过BIOS添加，教程略通过 CLOVER 自带的工具添加 开机进入 CLOVER 引导界面，将光标移动到 Clover Boot Options ，回车进入 选择 Add Clover boot options for all entries 回车 拔掉U盘，重新开机，按 Boot 快捷键，你会发现多了很多以 Clover start 开头的引导项，选择 Clover start boot.efi at MAC 即可进入 MacOS 系统 备注：该种方法在Clover v4261版本后已经失效[感谢群里 @(￣(工)￣)_小哥哥 的反馈]，我先找个地方哭一会儿关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>Clover</tag>
        <tag>UEFI</tag>
        <tag>引导</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS系统下使用gpt命令修复损坏的EFI分区以及dd命令的基本用法]]></title>
    <url>%2FUse-the-gpt-command-to-repair-a-damaged-EFI-partition-under-Mac-OS-As-well-as-the-basic-usage-of-the-dd-command.html</url>
    <content type="text"><![CDATA[MacOS系统下使用gpt命令修复损坏的EFI分区 今天在远景论坛里看到有坛友将EFI的分区损坏，于是就跟帖回复，现将回复的内容整理下放到博客上，让更多遇到问题的人看到。 命令及用法显示gpt分区命令如下： 123456789101112131415161718192021222324sudo gpt -r show disk0 start size index contents 0 1 PMBR 1 1 Pri GPT header 2 32 Pri GPT table 34 2014 2048 614400 1 GPT part - C12A7328-F81F-11D2-BA4B-00A0C93EC93B 616448 409600 2 GPT part - E3C9E316-0B5C-4DB8-817D-F92DF00215AE 1026048 157696000 3 GPT part - EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 158722048 32000000 4 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 190722048 262144 190984192 196116728 5 GPT part - 7C3457EF-0000-11AA-AA11-00306543ECAC 387100920 400937448 6 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 788038368 262144 788300512 1280000 7 GPT part - 5361644D-6163-11AA-AA11-00306543ECAC 789580512 129175576 8 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 918756088 1269536 9 GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC 920025624 19594968 10 GPT part - EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 939620592 59325048 11 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 998945640 1269536 12 GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC 1000215176 7 1000215183 32 Sec GPT table 1000215215 1 Sec GPT header 其中： C12A7328-F81F-11D2-BA4B-00A0C93EC93B 是EFI系统分区(ESP)的标志 index 是指磁盘分区，这里的数值是 1 ，也就是说是设备 disk0 的第一个分区 start 是指开始的扇区，这里的数值是: 2048 size 是指扇区的偏移量，这里的数值是: 614400 删除“坏”的EFI分区，请先阅读下面的警告信息，再运行以下命令： 确保你知道你在做什么，然后再从这里开始 - 如果你搞砸，你可能会丢失数据。 您无法使用 gpt 编辑分区表，而驱动器上的分区已装入，因此您需要从另一个驱动器（例如，使用OSX安装程序的USB记忆棒）引导，或者以目标磁盘模式运行mac并从另一个mac进行分区操作。 您可能需要使用 diskutil unmountDisk disk0 卸载任何自动安装的卷，然后再继续执行下面的操作。 1sudo gpt remove -i 1 disk0 确保disk0真的是要更改的磁盘 - 数字可以在重新启动之间更改。 而且，只有在EFI系统分区(ESP)已经存在的情况下才能运行，如果没有，则删除分区1可能是灾难性的！ 在这种情况下，您需要移动索引，因为我认为ESP必须具有索引 1 重新添加分区与正确的布局和类型：1sudo gpt add -b 2048 -i 1 -s 614400 -t C12A7328-F81F-11D2-BA4B-00A0C93EC93B disk3 执行完这三条命令，您的EFI系统分区(ESP)也就恢复正常了。 dd命令的基本用法其实在做修复之前，也可以使用 dd 命令将EFI分区做个备份，尤其是准备在同一块磁盘里面安装Windows和MacOS的同学，更应该先做个EFI分区的备份，以便EFI被 玩坏 后可以恢复如初。 EFI分区备份到文件，命令如下：1sudo dd if=/dev/rdisk0s1 of=~/Desktop/ESP.img # 将EFI分区备份到用户目录-桌面，文件名为：ESP.img 从备份文件恢复到ESP分区，命令如下：1sudo dd if=~/Desktop/ESP.img of=/dev/rdisk0s1 # 将备份文件ESP.img恢复到EFI分区 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>gpt</tag>
        <tag>MacOS</tag>
        <tag>EFI</tag>
        <tag>Fix</tag>
        <tag>修复</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS多系统下蓝牙设备的自动连接]]></title>
    <url>%2FMacOS-multi-system-Bluetooth-device-automatically-connected.html</url>
    <content type="text"><![CDATA[MacOS多系统下蓝牙设备的自动连接 因为测试的需要，我的DELL燃7000笔记本上面同时安装了三套MacOS系统。我使用的是logitech的M557蓝牙鼠标，当我在一套系统下面配对使用后，切换到另一套MacOS系统，需要重新配对使用；再切换回到前一个系统还需要重新配对。我的需求是希望把配对好的蓝牙设备可以在这三套系统里同时使用而不需要重复配对 操作方法：经爬帖发现蓝牙设备的配对连接信息文件位于 /private/var/root/Library/Preferences/bluetoothaudiod.plist将该文件复制到另外的MacOS系统，使用命令如下： 1sudo -s # 切换到root用户 复制文件[10.13到10.13]：cp /private/var/root/Library/Preferences/bluetoothaudiod.plist /Volumes/test/private/var/root/Library/Preferencescp /private/var/root/Library/Preferences/com.apple.bluetoothd.plist /Volumes/test/private/var/root/Library/Preferences 复制文件[10.13到10.12]cp /private/var/root/Library/Preferences/bluetoothaudiod.plist /Volumes/test/private/var/root/Library/Preferences/blued.plistcp /private/var/root/Library/Preferences/com.apple.bluetoothd.plist /Volumes/test/private/var/root/Library/Preferences 这样操作之后，就可以在不同的MacOS系统下使用配对过的蓝牙设备而无须重复配对。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>蓝牙</tag>
        <tag>BlueTooth</tag>
        <tag>鼠标</tag>
        <tag>Mouse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版更新(17A405) with Clover 4238原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13-official-version-update-17A405-with-Clover-4238-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像 本镜像采用官方原版app制作，集成Clover 4238，支持UEFI启动安装。 Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理 Clover默认config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡； 已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: https://pan.baidu.com/s/1o8gIsY2 MD5 (macOS High Sierra 10.13(17A405) Installer with Clover 4238.dmg) = 7a6894bad093285ffe6801c55f1a032c QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
        <tag>17A405</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[High Sierra全新安装或者升级时禁止进行APFS转换]]></title>
    <url>%2FGuide-High-Sierra-prohibits-APFS-conversion-when-installing-or-upgrading.html</url>
    <content type="text"><![CDATA[[指南]High Sierra全新安装或者升级时禁止进行APFS转换 假设安装的分区为 test ，挂载路径为 /Volumes/test 如您所知，macOS High Sierra包括一个新的文件系统APFS。 如果您的系统驱动器是固态，安装程序将在新的安装方案和更新方案中将HFS + J转换为APFS。 幸运的是，这种自动转换有一些方法。 它由 /macOS Install Data/minstallconfig.xml 中的ConvertToAPFS 选项控制。 升级升级方案比新安装程序稍微简单一些，因为我们可以运行一个命令行工具，可以使用命令行选项将 ConvertToAPFS 设置为 false 。 下载10.13安装程序后，请退出。打开终端，输入命令： /Applications/&quot;Install macOS High Sierra.app&quot;/Contents/Resources/startosinstall --converttoapfs NO --agreetolicense --volume /Volumes/test系统将复制一些文件，然后重新启动，您将可以启动安装程序（无需APFS转换），方法是在 Clover 中引导 Boot macOS Install from test 选项。 全新安装假设您已经创建了一个用于全新安装的HFS+格式的U盘，如果安装目标是SSD，安装程序仍将转换为APFS。为避免这种情况，在运行安装程序(第一阶段)之后，并且在首次重新启动之后(第二阶段之前)，重新通过 Clover 选择进入U盘 Boot OS X Install from Install macOS High Sierra，打开终端，进入要安装的系统分区(假设安装分区为 test )： 123cd /Volume/testcd "macOS Install Data"vi minstallconfig.xml 将 12&lt;key&gt;ConvertToAPFS&lt;/key&gt;&lt;true/&gt; 修改为： 12&lt;key&gt;ConvertToAPFS&lt;/key&gt;&lt;false/&gt; 输入:wq保存退出 vi编辑器的用法请自行脑补或者google 重启，在 Clover 中引导 Boot macOS Install from test 选项，进入第二阶段完成安装，您得到的是一个未转换成 APFS 的 HFS+ 分区格式的系统。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
        <category>指南</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>APFS</tag>
        <tag>转换</tag>
        <tag>Guide</tag>
        <tag>conversion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 10.13安装中常见的问题及解决方法]]></title>
    <url>%2FmacOS-10.13-installation-of-common-problems-and-solutions.html</url>
    <content type="text"><![CDATA[去掉Lilu的输出信息,还原10.13 内核崩溃(kernel pance)的真相 援引:如果你有一个kernel panic，请确保你有一个DEBUG版本的扩展，并且已经添加了-v keepyms = 1 debug = 0x100引导参数。 在10.13上，为了避免kext名字在崩溃日志(panic log)中滚动，你也应该[修补你的内核] 10.13的系统引导中,万一发生了kernel panic,也就是内核崩溃后,Lilu输出的信息过多,造成无法看清内核崩溃时的问题所在,这里教大家一种方法,去掉Lilu的输出信息,还原造成内核崩溃后面的真相 解决方法1:使用文本编辑器打开config.plist文件,在 1&lt;key&gt;KernelToPatch&lt;/key&gt; 下面添加: 12345678910111213141516171819202122232425262728293031323334&lt;array&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on 10.13 Debug kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; sABMi1Xw &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; SIPEQF3D &lt;/data&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on 10.13 Release kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; igKEwHRE &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; igKEwOtE &lt;/data&gt; &lt;/dict&gt;&lt;/array&gt; 解决方法2:使用Clover Configurator打开config.plist - Kernel and Kext Patches - kernelToPatch，新添加： 123456789Comment: Disable panic kext logging on 10.13 Debug kernelFind: b0004c8b 55f0Replace: 4883c440 5dc3MatchOS: 10.13Comment: Disable panic kext logging on 10.13 Release kernelFind: 8a0284c0 7444Replace: 8a0284c0 eb44MatchOS: 10.13 安装10.13时卡在Service only ran for 0 seconds. Pushing respawn out by 10 second 此种现象常见于笔记本机型，由于10.13中的DSDT屏蔽独显方式失效，现使用 hotpatch 方式进行独显屏蔽。 使用方法：将 SSDT-Disable-DGPU.aml 复制到 /EFI/CLOVER/ACPI/patched 目录下即可 下载链接：https://pan.baidu.com/s/1skRcIyL解决安装时提示 OSInstall.mpkg似乎已缺失或已损坏 的问题解决方法：删除 /EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi 和 /EFI/ 分区根目录下的 nvram.plist修改SMBIOS,使用Clover Configurator将机型设置为2012年及以后机型解决10.13 NVIDIA安装Web Driver黑屏问题解决方法：在 /EFI/CLOVER/kexts/Other 目录下添加驱动： NvidiaGraphicsFixup 该驱动依赖于 Lilu 更多基于Lilu的插件列表请移步：Lilu插件列表 解决10.13下某些机械硬盘无法读取的问题使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加： 12345Name: AppleAHCIPortComment: 修复ICH10芯片 I/O Error 错误Find: 4585F60F 95C289C8 83E0FE66 85C9780F 84D2750BReplace: 89C883E0 FE6685C9 0F98C141 08CC9090 9090750BMatchOS: 10.13.x 另一种格式： 1234567891011121314&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;修复ICH10芯片 I/O Error 错误&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt;RYX2D5XCiciD4P5mhcl4D4TSdQs=&lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AppleAHCIPort&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt;iciD4P5mhckPmMFBCMyQkJCQdQs=&lt;/data&gt; &lt;/dict&gt; 解决10.13(High Sierra)/10.12(Sierra) Clover开机出现8个苹果使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加： 12345Name: IOGraphicsFamilyComment: 10.12+-第二阶段花屏Find: 01000075 25Replace: 010000eb 25MatchOS: 10.12.x 12345Name: IOGraphicsFamilyComment: 10.13+-第二阶段花屏Find: 01000075 22Replace: 010000eb 22MatchOS: 10.13.x 另一种格式： 123456789101112131415161718192021222324252627282930313233343536&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.12+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSU= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yU= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.13+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSI= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yI= &lt;/data&gt;&lt;/dict&gt; 不使用任何程序教你提取显示器的EDID，解决笔记本显示器内屏黑屏/花屏的问题 经常有网友需要解决笔记本显示器内屏黑屏问题，尤其新发布的10.13的系统会出现睡眠唤醒后屏幕花屏问题。 目前最简单的方案就是通过clover注入显示器的EDID信息，之前网上的教程都是使用Windows下的应用程序进行操作。其实显示器的EDID信息都会在显卡正确驱动后存在于ioreg中的。 最简单的命令是：1ioreg -lw0 | grep -i "IODisplayEDID" | sed -e 's/.*&lt;//' -e 's/&gt;//' 显示信息如下：00ffffffffffff000daee01500000000161a0104952213780228659759548e271e505400000001010101010101010101010101010101b43b804a713834405036680058c11000001ac32f804a713834405036680058c11000001a000000fe0035324b4636803135364843410a000000000000413196011000000a010a202000e8 接着输入下面的两条命令：12345ioreg -l | grep "DisplayVendorID" "DisplayVendorID" = 3502 ioreg -l | grep "DisplayProductID" "DisplayProductID" = 5600 其中&lt;&gt;里面的内容就是显示器的EDID信息，将提取出来的EDID信息粘贴到clover的 config.plist 中，顺便将 VendorID 和 ProductID 填入相应的位置，然后保存重启你的电脑。 选择-v时出现Attempting system restart...MACH Reboot的解决方法 在安装High Sierra启动过程中，选择-v跑时会出现”Attempting system restart…MACH Reboot”，而不用-v图跑直接显示苹果标志时则不会出现。 解决方法在config.plist配置文件DropTables下添加以下代码： 123456789101112&lt;key&gt;ACPI&lt;/key&gt;&lt;key&gt;DropTables&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;MATS&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;DMAR&lt;/string&gt; &lt;/dict&gt;&lt;/array&gt; 关于开机出现Welcome to Clover xxxx user settings卡住不动的解决方法 根源是Clover目录下自带的config.plist它并不适用于你的系统 解决方法 删除config.plist,找个适合你的机型的配置文件改名为:config.plist 如果还是卡住的话,就把ACPI/patched目录下除了SSDT-Disable-DGPU.aml的所有文件全部删除. 或者使用与您相同机型的EFI直接替换 写在最后 本文会不定期更新最后更新：11-22-2017 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>EDID</tag>
        <tag>安装</tag>
        <tag>常见问题</tag>
        <tag>屏蔽独显</tag>
        <tag>花屏</tag>
        <tag>黑屏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13-official-version-and-Clover-4221-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像 本镜像采用官方原版app制作，集成Clover 4221，支持UEFI启动安装。 Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理 Clover默认config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡； 已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: http://pan.baidu.com/s/1dFCOnML MD5 (macOS High Sierra 10.13 Installer with Clover 4221.dmg) = 524fc80704b693ad6191a9191436cb5c QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小米笔记本Pro安装10.13随手记及EFI分享]]></title>
    <url>%2FXiaoMiPro-notebook-Installation-10.13-readily-remember-and-share-EFI.html</url>
    <content type="text"><![CDATA[小米笔记本Pro安装10.13随手记 帮朋友订购的小米Pro笔记本，配置是i5-8250/8GB/256GB，15.6寸显示器 安装中遇到的几个难点：无法进入安装界面，需要屏蔽独显卡在Service only ran for 0 seconds. Pushing respawn out by 10 second，这是由于没有屏蔽独显而加载显卡驱动造成的，于是又开始爬帖子学习如何禁用独显，经过两个小时的研究，总算是把独显给屏蔽了。感觉自己是不是年龄大了，变得越来越笨了呢。 Clover无法识别苹果分区卷标显卡的问题解决了，终于进入安装界面了，10.13可以直接识别出NVME的磁盘而不需要任何的补丁，这点超赞。打开磁盘工具，直接把小米预装的Windows 10儿童版给干掉了，然后分了三个区，一个8GB的安装分区，省去制作安装U盘的麻烦，一个MAC，另一个WINDOWS，这么做的好处是直接会生成一个200MB的EFI分区。【这里插句题外话：我自从学习黑苹果以来，很少使用Windows工具，无论是调整分区还是恢复镜像，能在苹果环境下做的绝不进Windows】要说NVME的速度真不是盖的，10.13的第一阶段的安装也就10几秒就自动进入重启了，要知道这个过程中可是复制了5GB的数据呢。重启后发现个奇怪的问题：无论是安装分区还是MAC分区的卷标就是无法显示，于是停下来开始检查Drivers64UEFI目录下是否包含APFS及HFS驱动，发现这些驱动都躺在那儿，而且正常的情况下还没进第二阶段，磁盘的分区还没有自动转换成APFS。于是又不得不停下来开始继续爬帖，发现小米13.3的EFI，提取驱动及hotpatch做修正后CLOVER可以显示安装分区和MAC分区的卷标了，顺利进入第二阶段完成安装。 安装驱动程序进入新安装的系统，发现面临的工作还是不少的：网卡没有驱动，显卡没有驱动，声卡没有驱动，那系统怎么用呀？！于是乎，找出USB的无线网卡，安装驱动，联网成功；显卡是UHD620，platform-id是:59170000，折腾了好久总是没驱动好，于是乎就先仿冒吧，使用0x19160000可以顺利驱动显卡；声卡通过linux提取codec，发现是ALC298，298的layoutid只有3、13、28、72这几个，于是直接编译个AppleALC，通过Clover注入总是无法发声，通过ioreg检查发现layoutid一直为3,于是又折回去检查hotpatch，发现有声卡的注入id，小刀一飞直接把它删除了。重启了三遍，发现id为28时可以正确发声。 one more thing: 触控板开机正常，功能单一；睡眠唤醒后支持多手势 收工喽！！！ 更新日期： 10-14-2017 EFI更新，触摸板工作正常 10-17-2017 EFI更新，修正显卡驱动 增加HDMI Audio声音输出 驱动更新： Lilu v1.2.0 AppleALC v1.2.1 IntelGraphicsDVMTFixup v1.2.0 AirportBrcmFixup v1.1.0 驱动修复： IntelGraphicsFixup v1.2.0 10-18-2017 经测试显卡驱动不如第一版的好，现将显卡驱动恢复为仿冒0x19160000 ACPI修复 驱动程序修正 去掉USBInjectAll采用SSDT-UIAL.aml内建USB设备 10-19-2017 显卡驱动正常 触摸板开机正常，睡眠唤醒后多手势使用正常 睡眠正常 电池信息正常 10-31-2017 更新声卡驱动，修复耳机问题 新驱动增加layoutid：13 支持四节点，支持耳麦自由切换，Mic/LineIn工作正常 11-2-2017 Lilu v1.2.0更新，支持10.13.2Beta AppleALC更新，使用最新修正版Lilu联合编译，解决10.13.1更新后无法驱动的问题 11-5-2017 整合 AppleALC_ALC298_id13_id28.kext 驱动到EFI EFI目录下添加ALCPlugFix目录，请安装完成后进入ALCPlugFix目录，双击 install双击自动安装.command 安装耳机插入状态修正守护程序 修正Drivers64UEFI，解决无法安装问题 更新apfs.efi到10.13.1版本 11-7-2017 Lilu v1.2.1目前还不稳定，存在无法进入系统的风险，所以降级到v1.2.0版本 AppleALC降级到V1.2.0 EFI暂不支持macOS 10.13.2Beta版本的安装，Lilu不抽风后会持续更新 EFI更新源https://github.com/daliansky/XiaoMi-Pro 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>小米Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13GM 17A362a with Clover 4207原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13GM-17A362a-and-clover-4207-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13GM 17A362a with Clover 4207原版镜像 本镜像采用官方原版app制作，集成Clover 4207，支持UEFI启动安装。 Clover默认config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: https://pan.baidu.com/s/1pLNY8HX MD5 (macOS High Sierra 10.13GM 17A362a with Clover 4207.dmg) = 6d1ddfad2882f665bd0a11c5b291cb06 QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
        <tag>GM</tag>
        <tag>17A362a</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPUFriend的安装与使用]]></title>
    <url>%2FCPUFriend-Installation-and-Usage.html</url>
    <content type="text"><![CDATA[CPUFriend安装和使用系统要求CPUFriend 需要macOS v10.8或更高版本 安装强烈建议让引导程序注入CPUFriend，否则您将需要LiluFriend，以确保CPUFriend正常工作。 可用的内核标志添加-cpufdbg以启用调试日志记录（仅在DEBUG二进制文件中可用）添加-cpufoff来关闭CPUFriend添加-cpufbeta以在不支持的操作系统版本上启用CPUFriend 配置使用CPUFriend/ResourceConverter.sh生成CPUFriendProvider.kext或ssdt_data.dsl的工作副本。如果您还有ssdtPRGen.sh生成的SSDT，则可能需要合并它们。我不建议暂时添加这样的支持。所以我建议你使用CPUFriendProvider.kext存储您的定制数据。 ResourceConverter.sh的使用执行命令如下： `./ResourceConverter.sh –kext “/Users/sky/Desktop/Mac-CAD6701F7CEA0921.plist” 它会在当前目录生成CPUFriendProvider.kext,将CPUFriendProvider.kext和CPUFriend.kext复制到/EFI/Clover/kexts/Other，重建缓存，然后重启。 说明： 其中的/Users/sky/Desktop/Mac-CAD6701F7CEA0921.plist是我自行修改的，可以通过直接调用系统提供的/System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources/Mac-CAD6701F7CEA0921.plist --kext &quot;file&quot; 用”file”提供的信息创建CPUFriendProvider.kext --acpi &quot;file&quot; 使用”file”提供的信息创建ssdt_data.dsl 注意： 创建的 kext/ssdt 位于当前工作目录中 变量 &quot;file&quot; 应该是 /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources 中的一个完整的plist，具有某些修改，而不是像原始的 FrequencyVectors 条目 原文链接CPUFriend Installation &amp; Usage 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Lilu</tag>
        <tag>CPUFriend</tag>
        <tag>Plugins</tag>
        <tag>CPU变频</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Broadcom BCM94352z/DW1560驱动新姿势[新方法]]]></title>
    <url>%2FBroadcom-BCM94352z-DW1560-drive-new-posture.html</url>
    <content type="text"><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)驱动新姿势[新方法]引言 昨晚口袋妖怪进群闲聊的时候提到过 她 之前维护的BrcmWLFixup已被 AirportBrcmFixup 取代。同时 她 发给我的AirportBrcmFixup/kern_brcmfx.cpp源码中已经增加了包括 _si_pmu_fvco_pllreg / Chip identificator checking patch / Wi-Fi 5 Ghz/Country code patch (required for 10.11) / Third party device patch / White list restriction patch / Failed PCIe configuration (device-id checking) 等问题的修复补丁 之前我写的一篇教程已经不适用了，所以就测试之后重写一篇教程，目的是希望大家都少走弯路，更顺畅地用上黑苹果 问题的提出：黑苹果的系统安装好后的第一件事情是得让它连接上互联网，以完善其它的驱动程序。也可借此安装类似TeamViewer或者向日葵之类的远程控制程序，让其它人通过远程的方式帮你完善系统。本文要介绍的就是教你如何驱动BCM94352z这款最常采用的无线网卡。 在macOS上，当使用BMC94532z NGFF WiFi卡时，AirportBrcm4360.kext不再成功加载。这个问题是由于驱动程序无法初始化fvco（频率压控振荡器）等原因引起的。 解决方案：同时支持10.11-10.13系统Clover设置： 使用应用程序Clover Configurator 在Clover - Devices - FakeID - WIFI中添加仿冒ID: 0x43a014e4 在Clover - KextsToPatch 应用以下补丁，以使BCM94352z启用蓝牙： 1234Name: IOBluetoothFamilyComment: 10.11+-BT4LE-Handoff-Hotspot-lisai9093Find: 4885ff74 47488b07 Replace: 41be0f00 0000eb44 可以使用文本编辑器直接打开config.plist，将下面的内容粘贴到&lt;key&gt;KextsToPatch&lt;/key&gt;里 12345678910111213141516&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.11+-BT4LE-Handoff-Hotspot-lisai9093&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; SIX/dEdIiwc= &lt;/data&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOBluetoothFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; Qb4PAAAA60Q= &lt;/data&gt;&lt;/dict&gt; 驱动： 下载：RehabMan-FakePCIID RehabMan-BrcmPatchRAM AirportBrcmFixup 将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/EFI/CLOVER/kexts/Other目录下 将文件FakePCIID_Broadcom_WiFi.kext和FakePCIID.kext复制到/EFI/CLOVER/kexts/Other目录下 将文件AirportBrcmFixup.kext复制到/EFI/CLOVER/kexts/Other目录下,由于AirportBrcmFixup.kext是依赖于Lilu运行的插件，所以还需要检查该目录下必须存在Lilu.kext 包括这些文件的目录看起来是这样的： 当然，在重启前，还要重建一下系统的缓存，命令为： 123sudo rm -rf /System/Library/Caches/com.apple.kext.caches/Startup/kernelcachesudo rm -rf /System/Library/PrelinkedKernels/prelinkedkernelsudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u / 重启你的系统，检查WIFI/蓝牙是否工作正常。 写在最后这是驱动BCM94352z(DW1560)的基础教程，还有些高级设置需要各位多爬帖。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DW1560</tag>
        <tag>BCM94352z</tag>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>驱动</tag>
        <tag>WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AppleALC支持的Codecs列表及AppleALC的使用]]></title>
    <url>%2FAppleALC-Supported-codecs.html</url>
    <content type="text"><![CDATA[如何使用AppleALC如果您的编解码器支持，您需要完成的唯一任务是加载内核扩展，并查看它是否工作。您可以使用您的引导加载程序(比如：Clover)，但请记住在AppleHDA之前加载AppleALC（有关更多详细信息，请参阅sudo kextstat输出）。 请注意，Lilu 也必须出现在AppleALC上。 按照一个易于使用的指南来添加您的编解码器支持，如果它不在这里。请分享您的成功结果。 备注：AppleALC不处理layout-id值，它希望你提供正确的DSDT(SSDT)。 如何控制AppleALCAppleALC接受不同的引导参数来控制其行为： -alcoff - 禁用自身; -alcdbg - 打印调试信息（如果扩展在调试模式下编译）; -alcbeta - 在不支持的系统（通常未发布或旧版）上启用AppleALC; -x或-s - 也将禁用AppleALC。 所有Lilu启动参数都会影响AppleALC。 如何提取调试日志在使用-alcdbg -liludbg引导后，在终端Terminal中运行以下命令并保存输出。 10.12及以后版本： log show --predicate &#39;process == &quot;kernel&quot; AND (eventMessage CONTAINS &quot;AppleALC&quot; OR eventMessage CONTAINS &quot;Lilu&quot;)&#39; --style syslog --source 10.11及以前版本 cat /var/log/system.log | egrep &#39;(AppleALC|Lilu)&#39; 附：AppleALC支持的编解码器列表 更新日期：12-18-2017 Vendor Codec Revisions MinKernel MaxKernel Creative CA0132 0x100918 layout 0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12 13 (10.9) — CirrusLogic CS4210 0x100101 layout 13 13 (10.9) — CirrusLogic CS4213 0x100100 layout 28 13 (10.9) — Realtek ALC221 layout 11 12 (10.8) — Realtek ALC225/ALC3253 layout 28 13 (10.9) — Realtek ALC233 layout 3, 13, 27 13 (10.9) — Realtek ALC235 layout 3, 11, 28 13 (10.9) — Realtek ALC236 0x100001, 0x100002 layout 3, 11, 13 13 (10.9) — Realtek ALC3236 layout 4, 5, 28, 29 13 (10.9) — Realtek ALC255 layout 3, 13, 17, 27, 28,99 13 (10.9) — Realtek ALC256 (3246) layout 13,28,56 13 (10.9) — Realtek ALC260 layout 11, 12 13 (10.9) — Realtek ALC262 0x100202 layout 11, 12 13 (10.9) — Realtek ALC268 layout 3 13 (10.9) — Realtek ALC269 0x100004, 0x100100, 0x100202, 0x100203 layout 1-9, 11, 13, 14, 15, 16, 18, 19, 20, 27, 28, 29, 32, 33, 35, 40, 76,93,99,127 12 (10.8) — Realtek ALC270 0x100100, layout 3, 4, 27, 28 13 (10.9) — Realtek ALC271x layout 9, 31 12 (10.8) — Realtek ALC272 0x100001, layout 3, 11 13 (10.9) — Realtek ALC275 0x100005, 0x100008, layout 3, 13, 28 13 (10.9) — Realtek ALC280 layout 3, 4, 11 13 (10.9) — Realtek ALC282 0x100003, layout 3, 4, 13, 27, 28, 29, 86 12 (10.8) — Realtek ALC283 layout 3, 11, 66 13 (10.9) — Realtek ALC284 layout 3 13 (10.9) — Realtek ALC286 0x100002, 0x100003 layout 3 13 (10.9) — Realtek ALC288 layout 3, 13 13 (10.9) — Realtek ALC290 layout 3, 28 13 (10.9) — Realtek ALC3241 layout 4 13 (10.9) — Realtek ALC292 layout 12, 18, 28 13 (10.9) — Realtek ALC293 layout 28, 29 13 (10.9) — Realtek ALC295 layout 3, 28 13 (10.9) — Realtek ALC298 0x100103, layout 3, 11, 13, 28, 29, 47, 72, 99 13 (10.9) — Realtek ALC662 0x100101, 0x100300 layout 5, 7, 11, 12, 13 13 (10.9) — Realtek ALC663 0x100002, layout 3, 4, 28 13 (10.9) — Realtek ALC665 layout 12, 13 13 (10.9) — Realtek ALC668 0x100003, layout 3, 20, 27, 28, 29 13 (10.9) — Realtek ALC670 0x100002, layout 12 13 (10.9) — Realtek ALC671 layout 12 13 (10.9) — Realtek ALC882 0x100101, layout 5, 7 13 (10.9) — Realtek ALC883 0x100002, layout 7 13 (10.9) — Realtek ALC885 0x100101, 0x100103 layout 1, 12 13 (10.9) — Realtek ALC887 0x100202, 0x100302, layout 1, 2, 3, 5, 7, 11, 13, 17, 18, 33, 99 13 (10.9) — Realtek ALC888/ALC1200 0x100101, 0x100001, 0x100202, 0x100302 layout 1, 2, 3, (4 for laptop), 5, 7, 11, 28, 29 13 (10.9) — Realtek ALC889 0x100004, layout 1, 11, 12 13 (10.9) — Realtek ALC891/ALC867 0x100002, layout 13 13 (10.9) — Realtek ALC892 0x100302, layout 1, 2, 3, (4 for laptop), 5, 7, 28, 31, 92, 99 13 (10.9) — Realtek ALC898/ALC899 0x100003, layout 1, 2, 3, 5, 7, 11, 13, 28, 65 13 (10.9) — Realtek ALC1150 0x100001, layout 1, 2, 3, 5, 7, 11 12 (10.8) — Realtek ALC1220 0x100003, layout 1, 2, 5, 7, 11 15 (10.11) — Realtek ALCS1220A layout 1, 2, 5, 7 15 (10.11) — AnalogDevices AD1984 0x100400, layout 11 13 (10.9) — AnalogDevices AD1984A 0x100400, layout 11, 13 13 (10.9) — AnalogDevices AD1988B layout 5, 7, 12 13 (10.9) — AnalogDevices AD2000B layout 5, 7 13 (10.9) — Conexant CX8050 layout 3 16 (10.12) — Conexant CX8200 layout 3 16 (10.12) — Conexant CX20561 0x100000, layout 11 13 (10.9) — Conexant CX20583 layout 3 13 (10.9) — Conexant CX20585 layout 3, 13 13 (10.9) — Conexant CX20588 layout 3 13 (10.9) — Conexant CX20590 0x100000, 0x100002, 0x100003, layout 3, 12, 28 13 (10.9) — Conexant CX20722 layout 3 16 (10.12) — Conexant CX20724 layout 3, 13 13 (10.9) — Conexant CX20751/20752 layout 3, 28 13 (10.9) — Conexant CX20753/4 layout 3 16 (10.12) — Conexant CX20755 layout 3 13 (10.9) — Conexant CX20756 layout 3, 13 13 (10.9) — Conexant CX20757 layout 3 13 (10.9) — IDT IDT92HD66C3/65 layout 3 13 (10.9) — IDT IDT92HD71B7X layout 3 13 (10.9) — IDT IDT92HD73C1X5 layout 19 13 (10.9) — IDT IDT92HD75B2X5 layout 3 13 (10.9) — IDT IDT92HD75B3X5 layout 3, 11 13 (10.9) — IDT IDT92HD99BXX layout 3 13 (10.9) — IDT IDT92HD87B1 layout 3 13 (10.9) — IDT IDT92HD81B1C5 layout 3, 11 13 (10.9) — IDT IDT92HD81B1X5 layout 3, 11, 12, 20, 21, 28 13 (10.9) — IDT IDT92HD87B1/3 layout 12 13 (10.9) — IDT IDT92HD87B2/4 layout 12 13 (10.9) — IDT IDT92HD90BXX layout 3, 12 13 (10.9) — IDT IDT92HD91BXX 0x100102, 0x100303 layout 3, 12, 33 13 (10.9) — IDT IDT92HD93BXX 0x100203, layout 12 13 (10.9) — IDT IDT92HD95 layout 12 13 (10.9) — VIA VT1802 0x100000, layout 3, 33 13 (10.9) — VIA VT2020/2021 0x100100, layout 5, 7, 9 13 (10.9) — Intel HD4000 HDMI ig-platform-id 0x01660003, 0x01660009, 0x0166000A 13 (10.9) — Intel HD4600 HDMI ig-platform-id 0x0d220003 13 (10.9) — Intel HD5500 HDMI ig-platform-id 0x16260006 15 (10.11) — Intel HD5600 HDMI ig-platform-id 0x16260006 15 (10.11) — Intel HD6000 HDMI ig-platform-id 0x16260004 15 (10.11) — Intel HD515 HDMI ig-platform-id 0x191E0000 15 (10.11) — Intel HD520 HDMI ig-platform-id 0x19160000 15 (10.11) — Intel HD530 HDMI ig-platform-id 0x19160000, 0x191B0000, 0x19120000 15 (10.11) — Intel HD620 HDMI ig-platform-id 0x59160000 15 (10.11) — Intel HD630 HDMI ig-platform-id 0x59120000 15 (10.11) — AMD Radeon 290/290X 15 (10.11) — 附表:已知的编解码器型号及厂商列表 声卡型号 厂商 ADXXXX Analog Devices AGEREXXXX LSI ALCXXXX Realtek ATIXXXX ATI CAXXXX Creative CMIXXXX CMedia CMIXXXX2 CMedia CSXXXX Cirrus Logic CXXXXX Conexant CHXXXX Chrontel LGXXXX LG WMXXXX Wolfson Microelectronics QEMUXXXX QEMU IDTXXXX IDT INTELXXXX Intel MOTOXXXX Motorola NVIDIAXXXX NVIDIA SIIXXXX Silicon Image STACXXXX Sigmatel VTXXXX VIA 扩展阅读：Lilu支持的内核参数及插件列表 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>Codec</tag>
        <tag>Lilu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)的正确驱动姿势[原始方法]]]></title>
    <url>%2FBroadcom-WiFi-BlueTooth-BCM94352z-DW1560-the%20correct-drive-posture.html</url>
    <content type="text"><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)的正确驱动姿势[原始方法] 黑苹果的系统安装好后的第一件事情是得让它连接上互联网，以完善其它的驱动程序。也可借此安装类似TeamViewer或者向日葵之类的远程控制程序，让其它人通过远程的方式帮你完善系统。本文要介绍的就是教你如何驱动BCM94352z这款最常采用的无线网卡。 问题的提出： 在macOS Sierra上，当使用BMC94532z NGFF WiFi卡时，AirportBrcm4360.kext不再成功加载。这个问题是由于驱动程序无法初始化fvco（频率压控振荡器）引起的。 解决方案：两种方法任选其一【我假设你的系统是10.12.x，同时也给出即将发布的10.13.x的方法】 使用应用程序Clover Configurator在Clover中的KextsToPatch应用以下补丁，以使BCM94352z启用WiFi： 1234567891011121314151617181920212223Name: AirPortBrcm4360Comment: 在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4Find: pci14e4,43a0Replace: pci14e4,43b1MatchOS: 10.12.xInfoPlistPatch: trueName: AirPortBrcmNICComment: 在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4Find: pci14e4,43a0Replace: pci14e4,43b1MatchOS: 10.13.xInfoPlistPatch: trueName: AirPortBrcm4360Comment: 初始化fvco以加载BCM4360驱动[10.12.x] - DarkvoidFind: 81F952AA00007529 Replace: 81F952AA00006690Name: AirPortBrcmNICComment: 初始化fvco以加载BCM4360驱动[10.13.x]Find: 81F952AA00007529 Replace: 81F952AA00006690 可以使用文本编辑器直接打开config.plist，将下面的内容粘贴到&lt;key&gt;KextsToPatch&lt;/key&gt;里 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;string&gt;pci14e4,43a0&lt;/string&gt; &lt;key&gt;InfoPlistPatch&lt;/key&gt; &lt;true/&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcm4360&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;string&gt;pci14e4,43b1&lt;/string&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;初始化fvco以加载BCM4360驱动[10.12.x] - Darkvoid&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; gflSqgAAdSk= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;com.apple.driver.AirPort.Brcm4360&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; gflSqgAAZpA= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;string&gt;pci14e4,43a0&lt;/string&gt; &lt;key&gt;InfoPlistPatch&lt;/key&gt; &lt;true/&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcmNIC&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;string&gt;pci14e4,43b1&lt;/string&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;初始化fvco以加载BCM4360驱动[10.13.x]&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; gflSqgAAdSk= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcmNIC&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; gflSqgAAZpA= &lt;/data&gt;&lt;/dict&gt; 它看起来是这个样子的： config.plist文件的修改到此结束现在BCM94352z的WIFI应该已经可以工作了，你甚至都不需要添加仿冒WIFI的设备ID。当然，在重启前，还要重建一下系统的缓存，命令为： 123sudo rm -rf /System/Library/Caches/com.apple.kext.caches/Startup/kernelcachesudo rm -rf /System/Library/PrelinkedKernels/prelinkedkernelsudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u / 重启你的系统，检查WIFI是否工作正常。 驱动你的蓝牙Clover设置： 使用应用程序Clover Configurator在Clover中的KextsToPatch应用以下补丁，以使BCM94352z启用蓝牙： 1234Name: IOBluetoothFamilyComment: 10.11+-BT4LE-Handoff-Hotspot-lisai9093Find: 4885ff74 47488b07 Replace: 41be0f00 0000eb44 可以使用文本编辑器直接打开config.plist，将下面的内容粘贴到&lt;key&gt;KextsToPatch&lt;/key&gt;里 12345678910111213141516&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.11+-BT4LE-Handoff-Hotspot-lisai9093&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; SIX/dEdIiwc= &lt;/data&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOBluetoothFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; Qb4PAAAA60Q= &lt;/data&gt;&lt;/dict&gt; 驱动： 下载：RehabMan-FakePCIID RehabMan-BrcmPatchRAM AirportBrcmFixup 将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/EFI/CLOVER/kexts/Other目录下 将文件FakePCIID_Broadcom_WiFi.kext和FakePCIID.kext复制到/EFI/CLOVER/kexts/Other目录下 将文件AirportBrcmFixup.kext复制到/EFI/CLOVER/kexts/Other目录下,由于AirportBrcmFixup.kext是依赖于Lilu运行的插件，所以还需要检查该目录下必须存在Lilu.kext 包括这些文件的目录看起来是这样的： 当然，在重启前，还要重建一下系统的缓存，命令为： 123sudo rm -rf /System/Library/Caches/com.apple.kext.caches/Startup/kernelcachesudo rm -rf /System/Library/PrelinkedKernels/prelinkedkernelsudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u / 重启你的系统，检查蓝牙是否工作正常。 写在最后这是驱动BCM94352z(DW1560)的基础设置，还有些高级设置需要各位多爬帖。 QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DW1560</tag>
        <tag>BCM94352z</tag>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>驱动</tag>
        <tag>WIFI</tag>
        <tag>蓝牙</tag>
        <tag>BlueTooth</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[持续更新] 黑苹果常见问题（某些未解决的问题）]]></title>
    <url>%2FUpdated-Frequently-Asked-Questions-in-Sierra-or-high-sierra.html</url>
    <content type="text"><![CDATA[[持续更新] 黑苹果常见问题HD520/HD530/HD620/HD630显卡驱动的正确姿势 在CLOVER里注入platform-id，下表是整理出的部分资料供参考；更详细的资料请移步 显卡型号 platform-id 机型 接口 LVDS DP HDMI Intel HD Graphics 520 0x19160000 3 1 2 Intel HD Graphics 520 0x19160002 3 1 2 Intel HD Graphics 530 0x19120000 iMac17,1 3 3 Intel HD Graphics 530 0x191b0000 MacBookPro13,3 3 1 2 Intel HD Graphics 530 0x191b0006 1 Intel HD Graphics 620 0x59160000 MacBookPro14,2 3 1 1 1 Intel HD Graphics 630 0x59120000 iMac18,2iMac18,3 3 3 Intel HD Graphics 630 0x591b0000 MacBookPro14,3 3 1 1 1 还需要在CLOVER/kexts/Other放入Lilu.kext和IntelGraphicsFixup.kext，其它的基于Lilu的插件列表请稳步：Lilu插件列表 更多的platform-id请移步：黑苹果必备：Intel核显platform ID整理 系统偏好设置里的触控板设置是空白的 请更新VoodooPS2Controller.kext到1.8.25或以上版本，VoodooPS2Controller.kext下载链接 HD4400 / HD4600在Safari浏览器播放视频崩溃 在CLOVER/kexts/Other放入Lilu.kext和IntelGraphicsFixup.kext 还有可能会需要IntelGraphicsDVMTFixup 延伸阅读：其它的基于Lilu的插件列表请稳步：Lilu插件列表 Haswell（和Broadwell）在引导后不久（睡眠醒来后）滞后/暂停/无响应 登录后不久（有些在登录之前），鼠标和/或图形可能看起来没有反应。 这通常在大约20秒后清除。 从睡眠醒来后观察到相同的效果。 这似乎只影响了Haswell的图形硬件。 可能与SMBIOS的变化有关，当使用MacBookPro11,2与之前版本的OS X / macOS时，观察到类似的效果。 但现在的问题也出现在MacBookAir6,2和MacBookPro11,1上。 该解决方案似乎是从帧缓冲区kext中的ig-platform数据中删除未使用的连接器： 原文： 在我的u430与10.12.4上遭遇了这个问题（醒来后和登录后的短暂滞后）。u430具有LVDS和单个HDMI。 我使用ig-platform-id 0xa260006。 0xa260006具有LVDS，0105 DP，0204 DP。 HDMI连接到0204，所以我修补该端口的HDMI（启用HDMI音频）。 我也使用vbo 9mb光标字节补丁 1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 9MB cursor bytes, vboFind: 0600260a 01030303 00000002 00003001 00006000Replace: 0600260a 01030303 00000002 00003001 00009000 1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: HDMI-audio, port 0204, 0x0a260005 0x0a260006Find: 02040900 00040000 87000000Replace: 02040900 00080000 87000000 现在，0105端口在帧缓冲区中的0204端口之前，但是我们不需要0105端口，因为它没有连接任何东西（并导致滞后），所以…策略是用0204替代0105，将端口数从3减少到2。我们已经知道，在AppleIntelFramebufferCapri中，0x01660004只有一个LVDS连接器，所以我们可以查看该ig-platform-id数据的标题，以发现我们需要将Azul中的ig平台数据从3个端口减少到2个。AppleIntelFramebufferCapri 0x01660004: 104006601 01030101 AppleIntelFramebufferAzul 0x0a260006: 10600260A 01030303 所以，最终有两个计数与连接器的数量有关，现在让我们来修改它们： 1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 9MB光标字节(vbo)，仅2端口(RehabMan)Find: 0600260a 01030303 00000002 00003001 00006000Replace: 0600260a 01030202 00000002 00003001 00009000 1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 关闭 0204 端口, 改变 0105 DP 端口为 0204 HDMI (RehabMan)Find: 01050900 00040000 87000000 02040900 00040000 87000000Replace: 02040900 00080000 87000000 FF000000 01000000 40000000 结果：登录后睡眠不再滞后。 解决10.13(High Sierra)/10.12(Sierra) Clover开机出现8个苹果使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加： 12345Name: IOGraphicsFamilyComment: 10.12+-第二阶段花屏Find: 01000075 25Replace: 010000eb 25MatchOS: 10.12.x 12345Name: IOGraphicsFamilyComment: 10.13+-第二阶段花屏Find: 01000075 22Replace: 010000eb 22MatchOS: 10.13.x 另一种格式： 123456789101112131415161718192021222324252627282930313233343536&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.12+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSU= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yU= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.13+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSI= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yI= &lt;/data&gt;&lt;/dict&gt; 未完待续关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Lilu</tag>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>Plugins</tag>
        <tag>常见问题</tag>
        <tag>Clover</tag>
        <tag>platform-id</tag>
        <tag>Patch</tag>
        <tag>wake</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hda-verb参数详表]]></title>
    <url>%2Fhda-verb-parameter-detail-table.html</url>
    <content type="text"><![CDATA[hda-verb参数详表 hda-verb的由来hda-verb是linux下面的alsa-project的一条命令，它的作用是发送HD-audio命令。 命令格式： linux: % hda-verb /dev/snd/hwC0D0 0x12 0x701 2 Mac: $ hda-verb 0x12 0x701 2 输入命令： 1hda-verb 输出信息： 1234hda-verb for CodecCommander (based on alsa-tools hda-verb) usage: hda-verb [option] hwdep-device nid verb param -l List known verbs and parameters -L List known verbs and parameters (one per line) 参数 数值 GET_STREAM_FORMAT 0x0a00 GET_AMP_GAIN_MUTE 0x0b00 GET_PROC_COEF 0x0c00 GET_COEF_INDEX 0x0d00 PARAMETERS 0x0f00 GET_CONNECT_SEL 0x0f01 GET_CONNECT_LIST 0x0f02 GET_PROC_STATE 0x0f03 GET_SDI_SELECT 0x0f04 GET_POWER_STATE 0x0f05 GET_CONV 0x0f06 GET_PIN_WIDGET_CONTROL 0x0f07 GET_UNSOLICITED_RESPONSE 0x0f08 GET_PIN_SENSE 0x0f09 GET_BEEP_CONTROL 0x0f0a GET_EAPD_BTLENABLE 0x0f0c GET_DIGI_CONVERT_1 0x0f0d GET_DIGI_CONVERT_2 0x0f0e GET_VOLUME_KNOB_CONTROL 0x0f0f GET_GPIO_DATA 0x0f15 GET_GPIO_MASK 0x0f16 GET_GPIO_DIRECTION 0x0f17 GET_GPIO_WAKE_MASK 0x0f18 GET_GPIO_UNSOLICITED_RSP_MASK 0x0f19 GET_GPIO_STICKY_MASK 0x0f1a GET_CONFIG_DEFAULT 0x0f1c GET_SUBSYSTEM_ID 0x0f20 SET_STREAM_FORMAT 0x200 SET_AMP_GAIN_MUTE 0x300 SET_PROC_COEF 0x400 SET_COEF_INDEX 0x500 SET_CONNECT_SEL 0x701 SET_PROC_STATE 0x703 SET_SDI_SELECT 0x704 SET_POWER_STATE 0x705 SET_CHANNEL_STREAMID 0x706 SET_PIN_WIDGET_CONTROL 0x707 SET_UNSOLICITED_ENABLE 0x708 SET_PIN_SENSE 0x709 SET_BEEP_CONTROL 0x70a SET_EAPD_BTLENABLE 0x70c SET_DIGI_CONVERT_1 0x70d SET_DIGI_CONVERT_2 0x70e SET_VOLUME_KNOB_CONTROL 0x70f SET_GPIO_DATA 0x715 SET_GPIO_MASK 0x716 SET_GPIO_DIRECTION 0x717 SET_GPIO_WAKE_MASK 0x718 SET_GPIO_UNSOLICITED_RSP_MASK 0x719 SET_GPIO_STICKY_MASK 0x71a SET_CONFIG_DEFAULT_BYTES_0 0x71c SET_CONFIG_DEFAULT_BYTES_1 0x71d SET_CONFIG_DEFAULT_BYTES_2 0x71e SET_CONFIG_DEFAULT_BYTES_3 0x71f SET_CODEC_RESET 0x7ff 已知参数： 参数 数值 VENDOR_ID 0x00 SUBSYSTEM_ID 0x01 REV_ID 0x02 NODE_COUNT 0x04 FUNCTION_TYPE 0x05 AUDIO_FG_CAP 0x08 AUDIO_WIDGET_CAP 0x09 PCM 0x0a STREAM 0x0b PIN_CAP 0x0c AMP_IN_CAP 0x0d CONNLIST_LEN 0x0e POWER_STATE 0x0f PROC_CAP 0x10 GPIO_CAP 0x11 AMP_OUT_CAP 0x12 VOL_KNB_CAP 0x13 例子：设置节点0x19参数为SET_PIN_WIDGET_CONTROL，值为0x24 1234$ hda-verb 0x19 SET_PIN_WIDGET_CONTROL 0x24nid = 0x19, verb = 0x707, param = 0x24command 0x01970724 --&gt; result = 0x00000000 也可以写成： 1234$ hda-verb 0x19 0x707 0x24nid = 0x19, verb = 0x707, param = 0x24command 0x01970724 --&gt; result = 0x00000000 CodecCommander经常使用的命令： 12$ hda-verb 0x19 SET_PIN_WIDGET_CONTROL 0x25$ hda-verb 0x21 SET_UNSOLICITED_ENABLE 0x83 备注： 字符串不区分大小写此外，它不一定是完整的字符串，但只能是唯一的例如 par和PARAMETER的参数是相同的set_a就足以代替SET_AMP_GAIN_MUTE 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>linux</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>CC</tag>
        <tag>CodecCommander</tag>
        <tag>codec</tag>
        <tag>hda-verb</tag>
        <tag>ALCPlugFix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB9 17A360a with Clover 4189原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10-13DB9-17A360a-with-Clover-4189.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB9 17A360a with Clover 4189原版镜像 本镜像采用官方原版app制作，集成Clover 4189，支持UEFI启动安装。 Clover默认config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: https://pan.baidu.com/s/1pLMBX4B MD5 (macOS High Sierra 10.13DB9 17A360a with Clover 4189.dmg) = 186b3b10d8f4c4f2a6642454784dfc12 QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>DB9</tag>
        <tag>17A360a</tag>
        <tag>dmg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Sierra(10.12.6)和High Sierra(10.13)安装文件下载]]></title>
    <url>%2FMac-Sierra-and-High-Sierra-Installer-App-Download.html</url>
    <content type="text"><![CDATA[Mac Sierra(10.12.6)和High Sierra(10.13)安装文件下载 需要在Mac系统下通过App Store进行下载 Mac Sierra(10.12.6)正式版下载链接：https://itunes.apple.com/cn/app/macos-sierra/id1127487414?mt=12 Mac High Sierra(10.13)正式版下载链接：https://itunes.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <tags>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>10.12.6</tag>
        <tag>Download</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑苹果必备：Intel核显platform ID整理及smbios速查表]]></title>
    <url>%2FIntel-core-display-platformID-finishing.html</url>
    <content type="text"><![CDATA[本文的由来 经常有网友进群问某某机型需要注入哪个platform-id才能正确地驱动显卡，每到这个时候，我都需要翻出Clover自带的gma.c查找显卡参数。于是我就想把它整理出来方便大家查询，markdown的表格排版对我来说是一种考验，但更像是一种折磨。还好还好，它没花费我太长的时间。 smbios速查表 SMBIOS ID CPU Family GPUs (S = Switchable) Year and size MacBook1,1 Yonah GMA 950 13” 2006 MacBook2,1 Merom GMA 950 13” 2006/07” MacBook3,1 Merom GMA X3100 13” 2007 MacBook4,1 Penryn GMA X3100 13” 2008 MacBook4,2 Penryn GMA X3100 13” 2008 MacBook5,1 Penryn GeForce 9400M 13” 2008 MacBook5,2 Penryn GeForce 9400M 13” 2009 MacBook6,1 Penryn GeForce 9400M 13” 2009 MacBook7,1 Penryn GeForce 320M 13” 2010 MacBook8,1 Broadwell m HD 5300 12” 2015 MacBook9,1 Skylake m HD 515 12” 2016 MacBook10,1 Kaby Lake m HD 615 12” 2017 — — — — MacBookAir1,1 Merom GMA X3100 13” 2008 MacBookAir2,1 Penryn GeForce 9400M 13” 2008/09” MacBookAir3,1 Penryn GeForce 320M 11” 2010 MacBookAir3,2 Penryn GeForce 320M 13” 2010 MacBookAir4,1 Sandy Bridge HD 3000 11” 2011 MacBookAir4,2 Sandy Bridge HD 3000 13” 2011 MacBookAir5,1 Ivy Bridge HD 4000 11” 2012 MacBookAir5,2 Ivy Bridge HD 4000 13” 2012 MacBookAir6,1 Haswell HD 5000 11” 2013 MacBookAir6,2 Haswell HD 5000 13” 2013 MacBookAir7,1 Broadwell HD 6000 11” 2015 MacBookAir7,2 Broadwell HD 6000 13” 2015 — — — — MacBookPro1,1 Yonah Radeon X1600 15” 2006 MacBookPro1,2 Yonah Radeon X1600 17” 2006 MacBookPro2,1 Merom Radeon X1600 15” 2006 MacBookPro2,2 Merom Radeon X1600 17” 2006 MacBookPro3,1 Merom GeForce 8600M GT 15”/17” 2007 MacBookPro4,1 Penryn GeForce 8600MG GT 17” 2008 MacBookPro5,1 Penryn GeForce 9400M/9600M GT S, 15” 2008/09” MacBookPro5,2 Penryn GeForce 9400M/9600M GT S, 17” 2009 MacBookPro5,3 Penryn GeForce 9400M/9600M GT S, 15” 2009 MacBookPro5,4 Penryn GeForce 9400M/9600M GT S, 15” 2009 MacBookPro5,5 Penryn GeForce 9400M/9600M GT S, 13” 2009 MacBookPro7,1 Penryn GeForce 320M 13” 2010 MacBookPro6,1 Arrandale HD Graphics/GeForce GT 330M S, 17” 2010 MacBookPro6,2 Arrandale HD Graphics/GeForce GT 330M S, 15” 2010 MacBookPro8,1 Sandy Bridge HD 3000 13” 2011 MacBookPro8,2 Sandy Bridge HD 3000/Radeon HD 6490M S, 15” 2011 MacBookPro8,3 Sandy Bridge HD 3000/Radeon HD 6750M S, 17” 2011 MacBookPro9,1 Ivy Bridge HD 4000/GeForce GT 650M S, 15” 2012 MacBookPro9,2 Ivy Bridge HD 4000 13” 2012 MacBookPro10,1 Ivy Bridge HD 4000/GeForce GT 650M S, 15” 2012/13” MacBookPro10,2 Ivy Bridge HD 4000 13” 2012/13” MacBookPro11,1 Haswell Iris 5100 13” 2013/14” MacBookPro11,2 Haswell Iris Pro 5200 15” 2013/14” MacBookPro11,3 Haswell Iris Pro 5200/GeForce GT 750M S, 15” 2013/14” MacBookPro11,4 Haswell Iris Pro 5200 15” 2015 MacBookPro11,5 Haswell Iris Pro 5200/Radeon R9 M370X S, 15” 2015 MacBookPro12,1 Broadwell Iris 6100 13” 2015 MacBookPro13,1 Skylake Iris 540 13” 2016 MacBookPro13,2 Skylake Iris 550 13” 2016 MacBookPro13,3 Skylake HD 530/Radeon Pro 450 S, 15” 2016 MacBookPro14,1 Kaby Lake Iris Plus 640 13” 2017 MacBookPro14,2 Kaby Lake Iris Plus 650 13” 2017 MacBookPro14,3 Kaby Lake HDs 630/Radeon Pro 555 S, 15” 2017 — — — — iMac4,1 Yonah Radeon X1600 17”/20” 2006 iMac4,2 Yonah GMA 950 17” 2006 iMac5,1 Merom Radeon X1600 17”/20” 2006 iMac5,2 Merom GMA 950 17” 2006 iMac6,1 Merom GeForce 7300GT 24” 2006 iMac7,1 Merom Radeon HD 2400 XT 20”/24” 2007 iMac8,1 Penryn Radeon HD 2400 XT 20”/24” 2008 iMac9,1 Penryn GeForce 9400M 20”/24” 2009 iMac10,1 Wolfdale GeForce 9400M 21.5”/27” 2009 iMac10,1 Wolfdale Radeon HD 4670 21.5”/27” 2009 iMac11,1 Lynnfield Radeon HD 4850 27” 2009 iMac11,2 Clarkdale Radeon HD 4670 21.5” 2010 iMac11,3 Clarkdale Radeon HD 5670 27” 2010 iMac12,1 Sandy Bridge Radeon HD 6750M 21.5” 2011 iMac12,2 Sandy Bridge Radeon HD 6770M 27” 2011 iMac13,1 Ivy Bridge GeForce GT 640M 21.5” 2012 iMac13,2 Ivy Bridge GeForce GTX 660M 27” 2012 iMac13,1 Ivy Bridge HD 4000 21.5” 2013 iMac14,1 Haswell Iris Pro 5200 21.5” 2013 iMac14,1 Haswell GeForce GT 750M 21.5” 2013 iMac14,2 Haswell GeForce GT 755M 27” 2013 iMac14,4 Haswell HD 5000 21.5” 2014 iMac15,1 Haswell Radeon R9 M290X 27” 2014/15” iMac16,1 Broadwell HD 6000 or Iris Pro 6200 21.5” 2015 iMac16,2 Broadwell Iris Pro 6200 21.5” 2015 iMac17,1 Skylake Radeon R9 M380 27” 2015 iMac18,1 Kaby Lake Iris Plus 640 21.5” 2017 iMac18,2 Kaby Lake Radeon Pro 555 21.5” 2017 iMac18,3 Kaby Lake Radeon Pro 570 27” 2017 — — — — Macmini1,1 Yonah GMA 950 2006 Macmini2,1 Merom GMA 950 2007 Macmini3,1 Penryn GeForce 9400M 2009 Macmini4,1 Penryn GeForce 320M 2010 Macmini5,1 Sandy Bridge HD 3000 2011 Macmini5,2 Sandy Bridge Radeon HD 6630M 2011 Macmini5,3 Sandy Bridge HD 3000 2011 Macmini6,1 Ivy Bridge HD 4000 2012 Macmini6,2 Ivy Bridge HD 4000 2012 Macmini7,1 Haswell HD 5000 or Iris 5100 2014 — — — — MacPro1,1 Woodcrest GeForce 7300 GT 2006 MacPro2,1 Clovertown GeForce 7300 GT 2006 MacPro3,1 Harpertown Radeon HD 2600 XT 2008 MacPro4,1 Nehalem GeForce GT 120 2009 MacPro5,1 Nehalem Radeon HD 5770 2010 MacPro5,1 Westmere Radeon HD 5770 2012 MacPro6,1 Ivy BridgeEP FirePro D300 2013 — — — — Xserve1,1 Woodcrest Radeon X1300 2006 Xserve2,1 Harpertown Radeon X1300 2008 Xserve3,1 Nehalem GeForce GT 120 2009 sandy bridge平台[BL:0x0710] 显卡型号 platform-id 机型 接口 LVDS DP HDMI Intel HD Graphics 3000 0x00010000 MacBookPro8,1 4 1 3 Intel HD Graphics 3000 0x00020000 MacBookPro8,2MacBookPro8,3 3 1 2 Intel HD Graphics 3000 0x00030010 Macmini5,1 3 2 1 Intel HD Graphics 3000 0x00030020 Macmini5,2 4 3 1 Intel HD Graphics 3000 0x00040000 MacBookAir4,1 3 1 2 Intel HD Graphics 3000 0x00050000 1 1 123456789101112131415UINT8 sandy_bridge_hd_vals[13][4] = &#123; &#123; 0x04, 0x00, 0x00, 0x00 &#125;, //0 "graphic-options" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //1 "AAPL00,DataJustify" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,Dither" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //3 "AAPL00,LinkFormat" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,LinkType" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //5 "AAPL00,PixelFormat" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,T1" &#123; 0x14, 0x00, 0x00, 0x00 &#125;, //7 "AAPL00,T2" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //8 "AAPL00,T3" &#123; 0x2c, 0x01, 0x00, 0x00 &#125;, //9 "AAPL00,T4" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,T5" &#123; 0x14, 0x00, 0x00, 0x00 &#125;, //11 "AAPL00,T6" &#123; 0xf4, 0x01, 0x00, 0x00 &#125;, //12 "AAPL00,T7"&#125;; ivy bridge平台[BL:0x0710] 型号 platform-id 机型 接口 LVDS DP HDMI Intel HD Graphics 4000 0x01660000 4 1 3 Intel HD Graphics 4000 0x01660001 MacBookPro10,2 4 1 2 1 Intel HD Graphics 4000 0x01660002 MacBookPro10,1 1 1 Intel HD Graphics 4000 0x01660003 MacBookPro9,2 4 1 3 Intel HD Graphics 4000 0x01660004 MacBookPro9,1 1 1 Intel HD Graphics 4000 0x01660005 3 3 Intel HD Graphics 4000 0x01660006 iMac13,1 0 Intel HD Graphics 4000 0x01660007 iMac13,2 0 Intel HD Graphics 4000 0x01660008 MacBookAir5,1 3 1 2 Intel HD Graphics 4000 0x01660009 MacBookAir5,2 3 1 2 Intel HD Graphics 4000 0x0166000a Macmini6,1 3 2 1 Intel HD Graphics 4000 0x0166000b Macmini6,2 3 2 1 123UINT8 ivy_bridge_hd_vals[1][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options"&#125;; haswell平台 显卡型号 platform-id 机型 接口 LVDS DP eDP HDMI 0x04060000 3 1 1 1 0x0c060000 3 1 1 1 Intel HD Graphics 4600 0x04160000 3 1 1 1 Intel HD Graphics 4400 0x0a160000 3 1 1 1 0x0c160000 3 1 1 1 Intel HD Graphics 5000 0x04260000 3 1 1 1 Intel HD Graphics 5000 0x0a260000 3 1 1 1 0x0c260000 3 1 1 1 Intel Iris Pro Graphics 5200 0x0d260000 3 1 1 1 0x0d220003 iMac14,1 iMac14,4 3 1 2 Intel HD Graphics 4600 0x04120004 Intel HD Graphics 5000 0x0a260005 3 1 2 Intel HD Graphics 5000 0x0a260006 MacBookAir6,1MacBookAir6,2Macmini7,1 3 1 2 Intel Iris Pro Graphics 5200 0x0d260007 MacBookPro11,2 MacBookPro11,3 4 1 2 1 Intel Iris Graphics 5100 0x0a2e0008 MacBookPro11,1 3 1 2 Intel HD Graphics 4600 0x0412000b iMac15,1 0 123UINT8 haswell_hd_vals[1][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options"&#125;; broadwell平台 显卡型号 platform-id 机型 接口 LVDS DP eDP HDMI 0x16060000 3 1 1 1 0x160e0001 3 1 2 Intel HD Graphics 5500 0x16160000 3 1 1 1 Intel HD Graphics 5300 0x161e0000 3 1 1 1 Intel Iris Pro Graphics 6200 0x16220000 3 1 1 1 Intel HD Graphics 6000 0x16260000 3 1 1 1 Intel Iris Graphics 6100 0x162b0000 3 1 1 1 Intel HD Graphics 5300 0x161e0001 MacBook8,1 3 1 2 0x16060002 3 1 2 Intel HD Graphics 5500 0x16160002 3 1 2 Intel Iris Pro Graphics 6200 0x16220002 3 1 2 Intel HD Graphics 6000 0x16260002 3 1 2 Intel Iris Graphics 6100 0x162b0002 MacBookPro12,1 3 1 2 Intel HD Graphics 5600 0x16120003 3 1 2 Intel HD Graphics 6000 0x16260004 3 1 2 Intel Iris Graphics 6100 0x162b0004 3 1 2 Intel HD Graphics 6000 0x16260005 3 1 2 Intel HD Graphics 6000 0x16260006 iMac16,1MacBookAir7,1MacBookAir7,2 3 1 2 Intel Iris Pro Graphics6200 0x16220007 iMac16,2 3 1 2 Intel HD Graphics 6000 0x16200008 2 1 1 Intel Iris Graphics 6100 0x162b0008 3 1 2 1234UINT8 broadwell_hd_vals[2][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options" &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,ig-tcon-scaler"&#125;; skylake平台[BL:0x056c] 显卡型号 platform-id 机型 接口 LVDS DP HDMI Intel HD Graphics 530 0x19120000 iMac17,1 3 3 Intel HD Graphics 520 0x19160000 3 1 2 Intel Iris Graphics 540 0x19260000 3 1 2 Intel Iris Graphics 550 0x19270000 3 1 2 Intel HD Graphics 530 0x191b0000 MacBookPro13,3 3 1 2 Intel HD Graphics 515 0x191e0000 3 1 2 Intel Iris Pro Graphics 580 0x193b0000 3 1 1 1 Intel HD Graphics 520 0x19160002 3 1 2 Intel Iris Graphics 540 0x19260002 MacBookPro13,1 3 1 2 Intel HD Graphics 515 0x191e0003 MacBook9,1 3 1 2 Intel Iris Graphics 540 0x19260004 3 1 2 Intel Iris Graphics 550 0x19270004 MacBookPro13,2 3 1 2 Intel HD Graphics 530 0x191b0006 1 Intel Iris Graphics 540 0x19260007 3 1 2 1234567891011121314UINT8 skylake_hd_vals[12][4] = &#123; &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //0 "AAPL,Gfx324" &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,GfxYTile" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,PanelCycleDelay" &#123; 0x11, 0x00, 0x00, 0x08 &#125;, //3 "AAPL00,PanelPowerDown" - MacBook &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PanelPowerOff" - MacBook &#123; 0xe2, 0x00, 0x00, 0x08 &#125;, //5 "AAPL00,PanelPowerOn" - MacBook &#123; 0x48, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,PanelPowerUp" - MacBook &#123; 0x3c, 0x00, 0x00, 0x08 &#125;, //7 "AAPL00,PanelPowerDown" - MacBookPro &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //8 "AAPL00,PanelPowerOff" - MacBookPro &#123; 0x19, 0x01, 0x00, 0x08 &#125;, //9 "AAPL00,PanelPowerOn" - MacBookPro &#123; 0x30, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,PanelPowerUp" - MacBookPro &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //11 "graphic-options"&#125;; kabylake平台[BL:0x056c] 显卡型号 platform-id 机型 接口 LVDS DP HDMI Intel HD Graphics 630 0x59120000 iMac18,2iMac18,3 3 3 Intel HD Graphics 620 0x59160000 MacBookPro14,2 3 1 1 1 Intel Iris Plus Graphics 640 0x59260000 3 1 2 Intel Iris Plus Graphics 650 0x59270000 3 1 2 Intel HD Graphics 630 0x591b0000 MacBookPro14,3 3 1 1 1 Intel HD Graphics 615 0x591e0000 3 1 2 Intel HD Graphics 635 0x59230000 3 1 2 Intel HD Graphics 615 0x591e0001 MacBook10,1 3 1 2 0x59180002 0 Intel Iris Plus Graphics 640 0x59260002 MacBookPro14,1iMac18,1 3 1 2 Intel Iris Plus Graphics 650 0x59270004 MacBookPro14,2 3 1 2 Intel HD Graphics 630 0x59120003 iMac18,2iMac18,3 0 Intel HD Graphics 650 0x59270004 MacBookPro14,2 3 1 2 Intel HD Graphics 630 0x591b0006 1 1 Intel Iris Plus Graphics 640 0x59260007 3 1 2 Intel Iris Plus Graphics 650 0x59270009 3 1 2 1234567891011121314UINT8 kabylake_hd_vals[12][4] = &#123; &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //0 "AAPL,Gfx324" &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,GfxYTile" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,PanelCycleDelay" &#123; 0x11, 0x00, 0x00, 0x08 &#125;, //3 "AAPL00,PanelPowerDown" - MacBook &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PanelPowerOff" - MacBook &#123; 0xe2, 0x00, 0x00, 0x08 &#125;, //5 "AAPL00,PanelPowerOn" - MacBook &#123; 0x48, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,PanelPowerUp" - MacBook &#123; 0x3c, 0x00, 0x00, 0x08 &#125;, //7 "AAPL00,PanelPowerDown" - MacBookPro &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //8 "AAPL00,PanelPowerOff" - MacBookPro &#123; 0x19, 0x01, 0x00, 0x08 &#125;, //9 "AAPL00,PanelPowerOn" - MacBookPro &#123; 0x30, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,PanelPowerUp" - MacBookPro &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //11 "graphic-options"&#125;; 新增平台 显卡型号 platform-id 机型 接口 LVDS DP HDMI Intel UHD Graphics 620 0x59170000 Mobile Intel UHD Graphics 610 0x3e900000 Desktop Intel UHD Graphics 610 0x3e930000 Desktop Intel UHD Graphics 630 0x3e910000 Desktop Intel UHD Graphics 630 0x3e920000 Desktop 已知GPU的列表static struct gma_gpu_t KnownGPUS[] = &#123; //============== PowerVR =================== //--------Canmore/Sodaville/Groveland------- &#123; 0x2E5B, "Intel 500" &#125;, // //----------------Poulsbo------------------- &#123; 0x8108, "Intel 500" &#125;, // Menlow &#123; 0x8109, "Intel 500" &#125;, // Menlow //----------------Lincroft------------------ &#123; 0x4102, "Intel 600" &#125;, // Moorestown //----------------Cedarview----------------- &#123; 0x0BE0, "Intel GMA 3600" &#125;, // Cedar Trail &#123; 0x0BE1, "Intel GMA 3600" &#125;, // Cedar Trail &#123; 0x0BE2, "Intel GMA 3650" &#125;, // Cedar Trail &#123; 0x0BE3, "Intel GMA 3650" &#125;, // Cedar Trail //----------------Cloverview---------------- &#123; 0x08C7, "Intel GMA" &#125;, // Clover Trail &#123; 0x08C8, "Intel GMA" &#125;, // Clover Trail &#123; 0x08C9, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CA, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CB, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CC, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CD, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CE, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CF, "Intel GMA" &#125;, // Clover Trail //============== 1st generation ============ //----------------Auburn-------------------- &#123; 0x7800, "Intel 740" &#125;, // Desktop - Intel 740 GMCH Express Chipset Family //----------------Portola------------------- &#123; 0x1240, "Intel 752" &#125;, // Desktop - Intel 752 GMCH Express Chipset Family //----------------Whitney------------------- &#123; 0x7121, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810 GMCH Express Chipset Family &#123; 0x7123, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810-DC100 GMCH Express Chipset Family &#123; 0x7125, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810E GMCH Express Chipset Family //----------------Solano-------------------- &#123; 0x1132, "Intel 3D graphics 815" &#125;, // Desktop - Intel 815 GMCH Express Chipset Family //============== 2nd generation ============ //----------------Almador------------------- &#123; 0x3577, "Intel Extreme Graphics 830" &#125;, // Mobile - Intel 830M GMCH Express Chipset Family &#123; 0x357B, "Intel Extreme Graphics 835" &#125;, // Desktop - Intel 835G GMCH Express Chipset Family //----------------Brookdale----------------- &#123; 0x2562, "Intel Extreme Graphics 845" &#125;, // Desktop - Intel 845G GMCH Express Chipset Family //----------------Montara------------------- &#123; 0x358E, "Intel Extreme Graphics 2 854" &#125;, // Mobile - Intel 852GM/855GM GMCH Express Chipset Family &#123; 0x3582, "Intel Extreme Graphics 2 855" &#125;, // Mobile - Intel 852GM/855GM GMCH Express Chipset Family //----------------Springdale---------------- &#123; 0x2572, "Intel Extreme Graphics 2 865" &#125;, // Desktop - Intel 865G Express Chipset Family //============== 3rd generation ============ //----------------Grantsdale---------------- &#123; 0x2582, "Intel GMA 900" &#125;, // Desktop - Intel 915G Express Chipset Family &#123; 0x258A, "Intel GMA 900" &#125;, // Desktop - Intel 915GM Express Chipset Family &#123; 0x2782, "Intel GMA 900" &#125;, // Desktop - Intel 915GV Express Chipset Family //----------------Alviso-------------------- &#123; 0x2592, "Intel GMA 900" &#125;, // Mobile - Intel 82915GM/GMS, 910GML Express Chipset Family &#123; 0x2792, "Intel GMA 900" &#125;, // Mobile - Intel 82915GM/GMS, 910GML Express Chipset Family //----------------Lakeport------------------ &#123; 0x2772, "Intel GMA 950" &#125;, // Desktop - Intel 82945G Express Chipset Family &#123; 0x2776, "Intel GMA 950" &#125;, // Desktop - Intel 82945G Express Chipset Family //----------------Calistoga----------------- &#123; 0x27A2, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family - MacBook1,1/MacBook2,1 &#123; 0x27A6, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family &#123; 0x27AE, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family //----------------Bearlake------------------ &#123; 0x29B2, "Intel GMA 3100" &#125;, // Desktop - Intel Q35 Express Chipset Family &#123; 0x29B3, "Intel GMA 3100" &#125;, // Desktop - Intel Q35 Express Chipset Family &#123; 0x29C2, "Intel GMA 3100" &#125;, // Desktop - Intel G33/G31 Express Chipset Family &#123; 0x29C3, "Intel GMA 3100" &#125;, // Desktop - Intel G33/G31 Express Chipset Family &#123; 0x29D2, "Intel GMA 3100" &#125;, // Desktop - Intel Q33 Express Chipset Family &#123; 0x29D3, "Intel GMA 3100" &#125;, // Desktop - Intel Q33 Express Chipset Family //----------------Pineview------------------ &#123; 0xA001, "Intel GMA 3150" &#125;, // Nettop - Intel NetTop Atom D410 &#123; 0xA002, "Intel GMA 3150" &#125;, // Nettop - Intel NetTop Atom D510 &#123; 0xA011, "Intel GMA 3150" &#125;, // Netbook - Intel NetBook Atom N4x0 &#123; 0xA012, "Intel GMA 3150" &#125;, // Netbook - Intel NetBook Atom N4x0 //============== 4th generation ============ //----------------Lakeport------------------ &#123; 0x2972, "Intel GMA 3000" &#125;, // Desktop - Intel 946GZ Express Chipset Family &#123; 0x2973, "Intel GMA 3000" &#125;, // Desktop - Intel 946GZ Express Chipset Family //----------------Broadwater---------------- &#123; 0x2992, "Intel GMA 3000" &#125;, // Desktop - Intel Q965/Q963 Express Chipset Family &#123; 0x2993, "Intel GMA 3000" &#125;, // Desktop - Intel Q965/Q963 Express Chipset Family &#123; 0x29A2, "Intel GMA X3000" &#125;, // Desktop - Intel G965 Express Chipset Family &#123; 0x29A3, "Intel GMA X3000" &#125;, // Desktop - Intel G965 Express Chipset Family //----------------Crestline----------------- &#123; 0x2A02, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family - MacBook3,1/MacBook4,1/MacbookAir1,1 &#123; 0x2A03, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family &#123; 0x2A12, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family &#123; 0x2A13, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family //----------------Bearlake------------------ &#123; 0x2982, "Intel GMA X3500" &#125;, // Desktop - Intel G35 Express Chipset Family &#123; 0x2983, "Intel GMA X3500" &#125;, // Desktop - Intel G35 Express Chipset Family //----------------Eaglelake----------------- &#123; 0x2E02, "Intel GMA 4500" &#125;, // Desktop - Intel 4 Series Express Chipset Family &#123; 0x2E03, "Intel GMA 4500" &#125;, // Desktop - Intel 4 Series Express Chipset Family &#123; 0x2E12, "Intel GMA 4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E13, "Intel GMA 4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E42, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E43, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E92, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E93, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E32, "Intel GMA X4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E33, "Intel GMA X4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E22, "Intel GMA X4500" &#125;, // Mobile - Intel G45/G43 Express Chipset Family &#123; 0x2E23, "Intel GMA X4500HD" &#125;, // Mobile - Intel G45/G43 Express Chipset Family //----------------Cantiga------------------- &#123; 0x2A42, "Intel GMA X4500MHD" &#125;, // Mobile - Intel 4 Series Express Chipset Family &#123; 0x2A43, "Intel GMA X4500MHD" &#125;, // Mobile - Intel 4 Series Express Chipset Family //============== 5th generation ============ //----------------Ironlake------------------ &#123; 0x0042, "Intel HD Graphics" &#125;, // Desktop - Clarkdale &#123; 0x0046, "Intel HD Graphics" &#125;, // Mobile - Arrandale - MacBookPro6,x //============== 6th generation ============ //----------------Sandy Bridge-------------- //GT1 &#123; 0x0102, "Intel HD Graphics 2000" &#125;, // Desktop - iMac12,x &#123; 0x0106, "Intel HD Graphics 2000" &#125;, // Mobile &#123; 0x010A, "Intel HD Graphics P3000" &#125;, // Server //GT2 &#123; 0x0112, "Intel HD Graphics 3000" &#125;, // Desktop &#123; 0x0116, "Intel HD Graphics 3000" &#125;, // Mobile - MacBookAir4,x/MacBookPro8,2/MacBookPro8,3 &#123; 0x0122, "Intel HD Graphics 3000" &#125;, // Desktop &#123; 0x0126, "Intel HD Graphics 3000" &#125;, // Mobile - MacBookPro8,1/Macmini5,x //============== 7th generation ============ //----------------Ivy Bridge---------------- //GT1 &#123; 0x0152, "Intel HD Graphics 2500" &#125;, // Desktop - iMac13,x &#123; 0x0156, "Intel HD Graphics 2500" &#125;, // Mobile &#123; 0x015A, "Intel HD Graphics 2500" &#125;, // Server &#123; 0x015E, "Intel Ivy Bridge GT1" &#125;, // Reserved //GT2 &#123; 0x0162, "Intel HD Graphics 4000" &#125;, // Desktop &#123; 0x0166, "Intel HD Graphics 4000" &#125;, // Mobile - MacBookPro9,x/MacBookPro10,x/MacBookAir5,x/Macmini6,x &#123; 0x016A, "Intel HD Graphics P4000" &#125;, // Server //============== 7.5th generation ========== //----------------Haswell------------------- //GT1 &#123; 0x0402, "Intel Haswell GT1" &#125;, // Desktop &#123; 0x0406, "Intel Haswell GT1" &#125;, // Mobile &#123; 0x040A, "Intel Haswell GT1" &#125;, // Server &#123; 0x040B, "Intel Haswell GT1" &#125;, // &#123; 0x040E, "Intel Haswell GT1" &#125;, // //GT2 &#123; 0x0412, "Intel HD Graphics 4600" &#125;, // Desktop - iMac15,1 &#123; 0x0416, "Intel HD Graphics 4600" &#125;, // Mobile &#123; 0x041A, "Intel HD Graphics P4600" &#125;, // Server &#123; 0x041B, "Intel Haswell GT2" &#125;, // &#123; 0x041E, "Intel HD Graphics 4400" &#125;, // //GT3 &#123; 0x0422, "Intel HD Graphics 5000" &#125;, // Desktop &#123; 0x0426, "Intel HD Graphics 5000" &#125;, // Mobile &#123; 0x042A, "Intel HD Graphics 5000" &#125;, // Server &#123; 0x042B, "Intel Haswell GT3" &#125;, // &#123; 0x042E, "Intel Haswell GT3" &#125;, // //GT1 &#123; 0x0A02, "Intel Haswell GT1" &#125;, // Desktop ULT &#123; 0x0A06, "Intel HD Graphics" &#125;, // Mobile ULT &#123; 0x0A0A, "Intel Haswell GT1" &#125;, // Server ULT &#123; 0x0A0B, "Intel Haswell GT1" &#125;, // ULT &#123; 0x0A0E, "Intel Haswell GT1" &#125;, // ULT //GT2 &#123; 0x0A12, "Intel Haswell GT2" &#125;, // Desktop ULT &#123; 0x0A16, "Intel HD Graphics 4400" &#125;, // Mobile ULT &#123; 0x0A1A, "Intel Haswell GT2" &#125;, // Server ULT &#123; 0x0A1B, "Intel Haswell GT2" &#125;, // ULT &#123; 0x0A1E, "Intel HD Graphics 4200" &#125;, // ULT //GT3 &#123; 0x0A22, "Intel Iris Graphics 5100" &#125;, // Desktop ULT &#123; 0x0A26, "Intel HD Graphics 5000" &#125;, // Mobile ULT - MacBookAir6,x/Macmini7,1 &#123; 0x0A2A, "Intel Iris Graphics 5100" &#125;, // Server ULT &#123; 0x0A2B, "Intel Iris Graphics 5100" &#125;, // ULT &#123; 0x0A2E, "Intel Iris Graphics 5100" &#125;, // ULT - MacBookPro11,1 //GT1 &#123; 0x0C02, "Intel Haswell GT1" &#125;, // Desktop SDV &#123; 0x0C06, "Intel Haswell GT1" &#125;, // Mobile SDV &#123; 0x0C0A, "Intel Haswell GT1" &#125;, // Server SDV &#123; 0x0C0B, "Intel Haswell GT1" &#125;, // SDV &#123; 0x0C0E, "Intel Haswell GT1" &#125;, // SDV //GT2 &#123; 0x0C12, "Intel Haswell GT2" &#125;, // Desktop SDV &#123; 0x0C16, "Intel Haswell GT2" &#125;, // Mobile SDV &#123; 0x0C1A, "Intel Haswell GT2" &#125;, // Server SDV &#123; 0x0C1B, "Intel Haswell GT2" &#125;, // SDV &#123; 0x0C1E, "Intel Haswell GT2" &#125;, // SDV //GT3 &#123; 0x0C22, "Intel Haswell GT3" &#125;, // Desktop SDV &#123; 0x0C26, "Intel Haswell GT3" &#125;, // Mobile SDV &#123; 0x0C2A, "Intel Haswell GT3" &#125;, // Server SDV &#123; 0x0C2B, "Intel Haswell GT3" &#125;, // SDV &#123; 0x0C2E, "Intel Haswell GT3" &#125;, // SDV //GT1 &#123; 0x0D02, "Intel Haswell GT1" &#125;, // Desktop CRW &#123; 0x0D06, "Intel Haswell GT1" &#125;, // Mobile CRW &#123; 0x0D0A, "Intel Haswell GT1" &#125;, // Server CRW &#123; 0x0D0B, "Intel Haswell GT1" &#125;, // CRW &#123; 0x0D0E, "Intel Haswell GT1" &#125;, // CRW //GT2 &#123; 0x0D12, "Intel HD Graphics 4600" &#125;, // Desktop CRW &#123; 0x0D16, "Intel HD Graphics 4600" &#125;, // Mobile CRW &#123; 0x0D1A, "Intel Haswell GT2" &#125;, // Server CRW &#123; 0x0D1B, "Intel Haswell GT2" &#125;, // CRW &#123; 0x0D1E, "Intel Haswell GT2" &#125;, // CRW //GT3 &#123; 0x0D22, "Intel Iris Pro Graphics 5200" &#125;, // Desktop CRW - iMac14,1/iMac14,4 &#123; 0x0D26, "Intel Iris Pro Graphics 5200" &#125;, // Mobile CRW - MacBookPro11,2/MacBookPro11,3 &#123; 0x0D2A, "Intel Iris Pro Graphics 5200" &#125;, // Server CRW &#123; 0x0D2B, "Intel Iris Pro Graphics 5200" &#125;, // CRW &#123; 0x0D2E, "Intel Iris Pro Graphics 5200" &#125;, // CRW //----------------ValleyView---------------- &#123; 0x0F30, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F31, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F32, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F33, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0155, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0157, "Intel HD Graphics" &#125;, // Bay Trail //============== 8th generation ============ //----------------Broadwell----------------- //GT1 &#123; 0x1602, "Intel Broadwell GT1" &#125;, // Desktop &#123; 0x1606, "Intel Broadwell GT1" &#125;, // Mobile &#123; 0x160A, "Intel Broadwell GT1" &#125;, // &#123; 0x160B, "Intel Broadwell GT1" &#125;, // &#123; 0x160D, "Intel Broadwell GT1" &#125;, // &#123; 0x160E, "Intel Broadwell GT1" &#125;, // //GT2 &#123; 0x1612, "Intel HD Graphics 5600" &#125;, // Mobile &#123; 0x1616, "Intel HD Graphics 5500" &#125;, // Mobile &#123; 0x161A, "Intel Broadwell GT2" &#125;, // &#123; 0x161B, "Intel Broadwell GT2" &#125;, // &#123; 0x161D, "Intel Broadwell GT2" &#125;, // &#123; 0x161E, "Intel HD Graphics 5300" &#125;, // Ultramobile - MacBook8,1 //GT3 &#123; 0x1626, "Intel HD Graphics 6000" &#125;, // Mobile - iMac16,1/MacBookAir7,x &#123; 0x162B, "Intel Iris Graphics 6100" &#125;, // Mobile - MacBookPro12,1 &#123; 0x162D, "Intel Iris Pro Graphics P6300" &#125;, // Workstation, Mobile Workstation //GT3e &#123; 0x1622, "Intel Iris Pro Graphics 6200" &#125;, // Desktop, Mobile - iMac16,2 &#123; 0x162A, "Intel Iris Pro Graphics P6300" &#125;, // Workstation //RSVD &#123; 0x162E, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x1632, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x1636, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163A, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163B, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163D, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163E, "Intel Broadwell RSVD" &#125;, // Reserved //------------Cherryview/Braswell----------- &#123; 0x22B0, "Intel HD Graphics 400" &#125;, // Cherry Trail - Atom x5 series - Z83X0/Z8550 &#123; 0x22B1, "Intel HD Graphics 405" &#125;, // Cherry Trail - Atom x7 series - Z8750 &#123; 0x22B2, "Intel HD Graphics 400" &#125;, // Braswell - Cerelon QC/DC series - X3X60 &#123; 0x22B3, "Intel HD Graphics 405" &#125;, // Braswell - Pentium QC series - X3710 //============== 9th generation ============ //----------------Skylake------------------- //GT1 &#123; 0x1902, "Intel HD Graphics 510" &#125;, // Desktop &#123; 0x1906, "Intel HD Graphics 510" &#125;, // Mobile &#123; 0x190A, "Intel Skylake GT1" &#125;, // &#123; 0x190B, "Intel HD Graphics 510" &#125;, // &#123; 0x190E, "Intel Skylake GT1" &#125;, // //GT2 &#123; 0x1912, "Intel HD Graphics 530" &#125;, // Desktop - iMac17,1 &#123; 0x1916, "Intel HD Graphics 520" &#125;, // Mobile &#123; 0x191A, "Intel Skylake GT2" &#125;, // &#123; 0x191B, "Intel HD Graphics 530" &#125;, // Mobile - MacBookPro13,3 &#123; 0x191D, "Intel HD Graphics P530" &#125;, // Workstation, Mobile Workstation &#123; 0x191E, "Intel HD Graphics 515" &#125;, // Mobile - MacBook9,1 &#123; 0x1921, "Intel HD Graphics 520" &#125;, // //GT2f &#123; 0x1913, "Intel Skylake GT2f" &#125;, // &#123; 0x1915, "Intel Skylake GT2f" &#125;, // &#123; 0x1917, "Intel Skylake GT2f" &#125;, // //GT3 &#123; 0x1923, "Intel HD Graphics 535" &#125;, // //GT3e &#123; 0x1926, "Intel Iris Graphics 540" &#125;, // Mobile - MacBookPro13,1 &#123; 0x1927, "Intel Iris Graphics 550" &#125;, // Mobile - MacBookPro13,2 &#123; 0x192B, "Intel Iris Graphics 555" &#125;, // &#123; 0x192D, "Intel Iris Graphics P555" &#125;, // Workstation //GT4 &#123; 0x192A, "Intel Skylake GT4" &#125;, // //GT4e &#123; 0x1932, "Intel Iris Pro Graphics 580" &#125;, // Desktop &#123; 0x193A, "Intel Iris Pro Graphics P580" &#125;, // Server &#123; 0x193B, "Intel Iris Pro Graphics 580" &#125;, // Mobile &#123; 0x193D, "Intel Iris Pro Graphics P580" &#125;, // Workstation, Mobile Workstation //----------------Goldmont------------------ &#123; 0x0A84, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x1A84, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x1A85, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x5A84, "Intel HD Graphics 505" &#125;, // Apollo Lake &#123; 0x5A85, "Intel HD Graphics 500" &#125;, // Apollo Lake //============== 9.5th generation ========== //----------------Kaby Lake----------------- //GT1 &#123; 0x5902, "Intel HD Graphics 610" &#125;, // Desktop &#123; 0x5906, "Intel HD Graphics 610" &#125;, // Mobile &#123; 0x590A, "Intel Kaby Lake GT1" &#125;, // &#123; 0x5908, "Intel Kaby Lake GT1" &#125;, // &#123; 0x590B, "Intel Kaby Lake GT1" &#125;, // &#123; 0x590E, "Intel Kaby Lake GT1" &#125;, // //GT1.5 &#123; 0x5913, "Intel Kaby Lake GT1.5" &#125;, // &#123; 0x5915, "Intel Kaby Lake GT1.5" &#125;, // //GT2 &#123; 0x5912, "Intel HD Graphics 630" &#125;, // Desktop - iMac18,2/iMac18,3 &#123; 0x5916, "Intel HD Graphics 620" &#125;, // Mobile &#123; 0x591A, "Intel HD Graphics P630" &#125;, // Server &#123; 0x591B, "Intel HD Graphics 630" &#125;, // Mobile - MacBookPro14,3 &#123; 0x591D, "Intel HD Graphics P630" &#125;, // Workstation, Mobile Workstation &#123; 0x591E, "Intel HD Graphics 615" &#125;, // Mobile - MacBook10,1 //GT2F &#123; 0x5921, "Intel Kaby Lake GT2F" &#125;, // //GT3 &#123; 0x5923, "Intel HD Graphics 635" &#125;, // &#123; 0x5926, "Intel Iris Plus Graphics 640" &#125;, // Mobile - MacBookPro14,1/iMac18,1 &#123; 0x5927, "Intel Iris Plus Graphics 650" &#125;, // Mobile - MacBookPro14,2 //GT4 &#123; 0x593B, "Intel Kaby Lake GT4" &#125;, // //-------------Kaby Lake Refresh------------ //GT1.5 &#123; 0x5917, "Intel UHD Graphics 620" &#125;, // Mobile //----------------Coffee Lake--------------- //GT1 &#123; 0x3E90, "Intel UHD Graphics 610" &#125;, // Desktop &#123; 0x3E93, "Intel UHD Graphics 610" &#125;, // Desktop //GT2 &#123; 0x3E91, "Intel UHD Graphics 630" &#125;, // Desktop &#123; 0x3E92, "Intel UHD Graphics 630" &#125;, // Desktop &#123; 0x3E94, "Intel Coffee Lake GT2" &#125;, // &#123; 0x3E96, "Intel Coffee Lake GT2" &#125;, // &#123; 0x3E9B, "Intel Coffee Lake GT2" &#125;, // //GT3 &#123; 0x3EA5, "Intel Coffee Lake GT3" &#125;, // &#123; 0x3EA6, "Intel Coffee Lake GT3" &#125;, // &#123; 0x3EA7, "Intel Coffee Lake GT3" &#125;, // &#123; 0x3EA8, "Intel Coffee Lake GT3" &#125;, // //----------------Gemini Lake--------------- &#123; 0x3184, "Intel HD Graphics 605" &#125;, // &#123; 0x3185, "Intel HD Graphics 600" &#125;, // //============== 10th generation =========== //----------------Cannonlake---------------- //GT0.5 &#123; 0x5A49, "Intel Cannonlake GT0.5" &#125;, // &#123; 0x5A4A, "Intel Cannonlake GT0.5" &#125;, // //GT1 &#123; 0x5A41, "Intel Cannonlake GT1" &#125;, // &#123; 0x5A42, "Intel Cannonlake GT1" &#125;, // &#123; 0x5A44, "Intel Cannonlake GT1" &#125;, // //GT1.5 &#123; 0x5A59, "Intel Cannonlake GT1.5" &#125;, // &#123; 0x5A5A, "Intel Cannonlake GT1.5" &#125;, // &#123; 0x5A5C, "Intel Cannonlake GT1.5" &#125;, // //GT2 &#123; 0x5A50, "Intel Cannonlake GT2" &#125;, // &#123; 0x5A51, "Intel Cannonlake GT2" &#125;, // &#123; 0x5A52, "Intel Cannonlake GT2" &#125;, // &#123; 0x5A54, "Intel Cannonlake GT2" &#125;, //&#125;; 写在最后 本文会不间断更新最后更新：12-14-2017 关于打赏您的支持就是我更新的动力！本篇文章会持续不间断更新，每个Clover的更新日志都需要阅读，如果有新的platform-id，我都会第一时间添加进来。so，如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>platform</tag>
        <tag>Intel</tag>
        <tag>核显</tag>
        <tag>smbios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下使用diskpart建立EFI分区及挂载EFI分区]]></title>
    <url>%2FUnder-Windows-using-DISKPART-to-create-EFI-points.html</url>
    <content type="text"><![CDATA[Windows下使用diskpart建立EFI分区及挂载EFI分区很多人在安装黑苹果的时候都需要在Windows下使用DiskGenius进行分区，其实在Windows 7及之后的版本本身就包含了更实用的磁盘分区命令，这个命令就是：diskpart 创建EFI分区 以下操作假设磁盘未分区没有其它数据 1234diskpartlist disk # 磁盘列表select disk n # 选择需要制作EFI分区的磁盘，n为磁盘号create partition efi size=300 # efi分区大小为300Mb 挂载EFI分区123456diskpartlist disk # 磁盘列表select disk n # 选择需要制作EFI分区的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择efi分区，n为efi分区号assign letter=X # x为efi分区盘符 打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式以后再操作EFI分区请重复输入上述命令 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>diskpart</tag>
        <tag>Windows</tag>
        <tag>分区</tag>
        <tag>ESP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB8 17A358a with Clover 4189原版镜像]]></title>
    <url>%2FMacOS-High-Sierra-10.13DB8-17A358a-and-Clover-4189.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB8 17A358a with Clover 4189原版镜像 本镜像采用官方原版app制作，集成Clover 4189，支持UEFI启动安装。 Clover默认config.plist为620/630/640/650； 其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: https://pan.baidu.com/s/1qXTeYWc MD5 (macOS High Sierra 10.13DB8 17A358a with Clover 4189.dmg) = 559bbd4ad59f5f12cf058e271ef6d871 QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>DB8</tag>
        <tag>17A358a</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lilu插件列表[持续更新]]]></title>
    <url>%2FExisting-Lilu-Plugins.html</url>
    <content type="text"><![CDATA[Lilu插件列表[持续更新]本文部分翻译自 Lilu的README，一些部分基于楼主的理解写出。 什么是 Lilu ？ Lilu 是 vit9696 开发的一个内核扩展 (kext)，可对”任意” 内核扩展(kext)/进程(process)/运行库(framework/library)等 进行打补丁。(但其实某些比较底层的 kext 仍无法修改，如基本硬件驱动、底层重要依赖等) Lilu 目前实现的功能？ 为 kext 打补丁为 进程 打补丁 (目前仅支持 64 位)为 运行库 打补丁 (目前仅支持 64 位)提供一套统一的 API 接口 如何理解 “提供一套统一的 API 接口”？这意味着 Lilu 自身是不起任何作用的，你需要额外使用依赖它的 kext ，目前已知需要依赖 Lilu 的 kext 可在 下方 找到。 下载/安装关于下载：你可以直接下载作者编译好的版本，或者从 GitHub 下载源码自行编译。 关于安装： 建议将 Lilu 以及依赖它的 kext 放置于引导器用于注入 kext 的位置并使用引导器注入它，目前主流的引导器都有注入 kext 的功能。 如果将其放置于 /System/Library/Extensions 或者 /Library/Extensions 下的话，你还需要 LiluFriend 并正确配置使其正常工作。 Lilu 支持的内核参数(kernel flags)-liludbg 可以开启排错日志模式，不过只有 DEBUG 版本才可用。(对于日常使用的 RELEASE 版本此参数无效)-liluoff 会禁用 Lilu 和依赖它的 kext 。(实际上只禁用了 Lilu ，不过与之相关的 kext 也就自然会失效了)-liluslow 会启用旧版的 UserPatcher 。(可能与修改进程、运行库有关，具体的因为楼主对 Lilu 代码不是很熟悉，所以也就没法解释清楚了，抱歉)-lilulowmem 会禁止 Lilu 和依赖它的 kext 在 Recovery 模式下载入。(实际上只禁用了 Lilu ，不过与之相关的 kext 也就自然会失效了)-lilubeta 会在不受支持的 Darwin 版本启用 Lilu 。-lilubetaall 启用Lilu和所有加载的插件不受支持的os版本（非常仔细地使用）-liluforce 强制启用Lilu而不管os，该参数适用于安装或恢复。 致开发者/有兴趣的朋友：关于 Log 输出，目前 Lilu 提供的 API 中有两个输出 Log 的接口，分别为 SYSLOG(“msg\n”); 与 DBGLOG(“msg\n”); 这两个 macro ，具体输出原理这里不做过多解释，仍是调用 Apple 在 IOLib.h 中为我们提供的 IOLog 接口。但要特别注意的是，如上所说，DBGLOG(“msg\n”); 这个 macro 需要在 DEBUG 模式开启下才会被编译。相信各位看这段代码即可了解。;) (来自 Headers/kern_util.hpp) 1234567891011#define SYSLOG(str, ...) IOLog( xStringify(PRODUCT_NAME) ": " str "\n", ## __VA_ARGS__)#ifdef DEBUG#define DBGLOG(str, ...) \ do &#123; \ if (ADDPR(debugEnabled)) \ IOLog( xStringify(PRODUCT_NAME) ": (DEBUG) " str "\n", ## __VA_ARGS__); \ &#125; while(0)#else#define DBGLOG(str, ...) do &#123; &#125; while(0)#endif 另外，原宏中已经自带了换行符 \n ，所以在编写 Log 时也就无必要再换行了。 Bug 反馈建议在作者的 GitHub Issues 中提交，需使用英文。 Lilu插件列表此插件列表来自 Lilu 的 KnownPlugins.md 。 目前已知需依赖 Lilu 的 kext &amp; 作用简单说明注：某些 kext 可能还没有列在这里，如果你有发现的话，可以跟帖反馈。 Name Short description AirportBrcmFixup 修补 Broadcom Wi-Fi 综合问题 AppleALC 动态对系统注入必要的文件/打补丁以驱动声卡 AzulPatcher4600 一些针对某些笔记型 HD4600 的额外修复 CoreDisplayFixup 动态修改某些系统运行库/kext 以解决非 Iris 系列 Intel 核显/部分 N 卡高分辨率输出问题 CPUFriend 动态向 X86 注入 CPU 电源管理数据 EnableLidWake 为某些 Intel 核显开启合盖睡眠 HibernationFixup 在某些机器上修复 3/25 模式下的休眠状态 IntelGraphicsFixup 修补 Intel 核显综合问题 (开机花屏，Haswell/Skylake 因 PAVP 导致的死机等等) IntelGraphicsDVMTFixup 修正 Broadwell/Skylake 平台核显因 DVMT 不足而导致的死机 NightShiftUnlocker 解决老机型无法使用自 10.12.4 开始引入的 NightShift 功能 NvidiaGraphicsFixup 修正 N 卡 (可能也适用于 I 卡) 使用某些 SMBios 如 MacPro6,1 等引发黑屏的问题 Shiki 动态修改 iTunes 相关系统进程，以在 Ivy Bridge 或更新的平台上正确使用 iTunes 相关服务，同时其内置的 ResourceConverter 亦可配置一些自定义的针对其他 framework/lib/process 的补丁 (CoreDisplayFixup 的早期测试版本即基于 Shiki 编写) WhateverGreen 修补 AMD 独显综合问题 （单卡启动黑屏，唤醒黑屏 等等） 将功能合并到其他插件中的插件： Name Short description BrcmWLFixup 现已被 AirportBrcmFixup 取代。 原文链接：口袋妖怪heart扩展阅读：AppleALC支持的Codecs列表及AppleALC的使用 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>Lilu</tag>
        <tag>Plugins</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS High Sierra 10.13DB7 17A352a with Clover 4182原版镜像]]></title>
    <url>%2FMacOS-High-Sierra-10-13DB7-17A352a-and-Clover-4182.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB7 17A352a with Clover 4182原版镜像 本镜像采用官方原版app制作，集成Clover 4182，支持UEFI启动安装。 Clover默认config.plist为620/630/640/650； 【DELL 燃7000系列可直接安装使用】，配置文件为:config_Dell_7000.plist; 其它配置文件包括七代6x0 config.plist配置文件，其中spoof的是显卡欺骗，不带spoof字样的是支持原生显卡，配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 下载链接: 百度云盘 MD5 (macOS High Sierra 10.13DB7 17A352a with Clover 4182.dmg) = 48fc6f8cb402d4a3d8b6035ab4456efc QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>下载</tag>
        <tag>DB7</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在macOS Sierra中运行CORE Keygen破解程序]]></title>
    <url>%2FHow-macOS-Sierra-mid-operation-CORE-Keygen-breaks-down.html</url>
    <content type="text"><![CDATA[如何在macOS Sierra中运行CORE Keygen破解程序将系统升级到macOS Sierra后很多破解程序或注册机都不能用了，尤其是CORE Keygen！ 解决方案如下：下载：https://pan.baidu.com/s/1skCh1A9 密码: cqgi 将xnp.out.zip放在CORE Keygen程序相同目录，运行： 12chmod +x upx.out./upx.out -d ./YourApp.app/Contents/MacOS/CORE\ Keygen 重新运行CORE Keygen！ 收工，尽情享用吧！ QQ群:331686786 一起黑苹果]]></content>
      <categories>
        <category>破解</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>Keygen</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CodecCommander解决ALC1220唤醒无声]]></title>
    <url>%2FUse-CodecCommander-to-solve-ALC1220-sleep-wake-up-silentr.html</url>
    <content type="text"><![CDATA[使用CodecCommander解决ALC1220唤醒无声AppleALC info.plistf0111141 10401190 20100101 30600101 00001740 4090a090 60908102 50308101 70402102 29e6e740 90614b01 解决过程 整理pinconfig:屏蔽掉节点0x1a line in rear，使用f0111141，拆分为01a71cf0 01a71d11 01a71e11 01a71f41进行屏蔽 整理出两条cc命令： 01970724 01b70883 编译CodecCommander，增加10ec_1220，添加ALC1220，将两条cc命令添加进去 10ec_1220 String Realtek ALC1220 Custom Commands Command Data 01970724 Commont String 0x19 SET_PIN_WIDGET_CONTROL 0x24 On Init Boolean YES On Sleep Boolean NO ON Wake Boolean YES Command Data 01b70883 Commont String 0x1b SET_UNSOLICITED_ENABLE 0x83 On Init Boolean YES On Sleep Boolean NO ON Wake Boolean YES Perform Reset Boolean YES 更多hda-verb的用法请前往hda-verb参数详表 收工关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>驱动</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>CC</tag>
        <tag>CodecCommander</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用到的命令[持续更新]]]></title>
    <url>%2FMac-frequently-used-to-the-command---continuous-update.html</url>
    <content type="text"><![CDATA[Mac常用命令序言熟练使用Mac终端操作的常用命令，可以让你更快、更加高效地进行系统操作，shell就是你的瑞士军刀 隐藏“允许任何来源的应用”选项问题 新的系统安装好后，通常你打开一个dmg文件准备安装的时候，系统会提示你不允许打开未知来源的应用，这是因为从macOS Sierra开始增强了GateKeeper的安全性，所以“允许任何来源的应用”选项被隐藏，目的在于避免除Mac AppStore和正规签名外的未知或未签名App在系统内被任意执行，从而威胁用户隐私和系统安全。但这也造成了很多不便。操作方法：打开终端，输入命令： 1sudo spctl --master-disable 验证口令后即可。 磁盘分区的基本操作：教你将U盘上的EFI复制到磁盘的EFI分区 新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。 diskutil命令的基本用法： 查看磁盘分区表1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 256 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 3: Microsoft Basic Data WIN10 127.7 GB disk0s3 /dev/disk1(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 16 GB disk1 1: EFI EFI 200 MB disk1s1 2: Apple_HFS Install macOS Sierra 15.8 GB disk1s2 挂载磁盘EFI分区1diskutil mount disk0s1 挂载U盘EFI分区1diskutil mount disk1s1 打开Finder，注意后面有个.1open . 左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 收工磁盘分区的进阶操作：教你将apfs分区转换回hfs+ 随着macOS High Sierra发布日期的临近，苹果公司新推出的apfs文件格式已经频繁地出现在我们的面前，假如你还不了解apfs文件的前世今生，请阅读苹果文件系统。友情提示： APFS 在 macOS High Sierra（10.13）之后将成为默认的文件格式那么问题来了，万一我的分区格式已经是apfs，我想转换成HFS+有什么办法吗？当然可以了，只是这个命令隐藏得比较深，这个命令还是：diskutil diskutil命令的进阶操作查看磁盘分区表： 1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 512 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 … … … … … 10: Apple_APFS Container disk1 29.2 GB disk0s10 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme -Physical Store disk0s5 +29.2 GB disk1 1: APFS Volume test 9.8 GB disk1s1 2: APFS Volume Preboot 20.6 MB disk1s2 3: APFS Volume Recovery 519.6 MB disk1s3 4: APFS Volume VM 1.1 GB disk1s4 查看apfs分区表 1diskutil apfs list 显示结果： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889APFS Containers (2 found)|+-- Container disk1 90B9C430-E60A-4174-8F1B-B8ED6E486D8B| ====================================================| APFS Container Reference: disk1| Capacity Ceiling (Size): 29194424320 B (29.2 GB)| Capacity In Use By Volumes: 11533049856 B (11.5 GB) (39.5% used)| Capacity Available: 17661374464 B (17.7 GB) (60.5% free)| || +-&lt; Physical Store disk0s10 CF77604A-0F78-4512-9563-AD2E944353C8| | ------------------------------------------------------------| | APFS Physical Store Disk: disk0s10| | Size: 29194424320 B (29.2 GB)| || +-&gt; Volume disk1s1 12C9B3A9-0D9B-3E75-B0EF-D829FFE4D438| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s1 (No specific role)| | Name: test (Case-insensitive)| | Mount Point: /Volumes/test| | Capacity Consumed: 9848913920 B (9.8 GB)| | Encrypted: No| || +-&gt; Volume disk1s2 2316B0D9-6798-4564-A3CE-5C5D1124AE5B| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s2 (Preboot)| | Name: Preboot (Case-insensitive)| | Mount Point: Not Mounted| | Capacity Consumed: 20631552 B (20.6 MB)| | Encrypted: No| || +-&gt; Volume disk1s3 1B6EBD7A-EE58-48A7-97A8-4E31C18BE5EC| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s3 (Recovery)| | Name: Recovery (Case-insensitive)| | Mount Point: Not Mounted| | Capacity Consumed: 519573504 B (519.6 MB)| | Encrypted: No| || +-&gt; Volume disk1s4 560E6B74-04B3-4083-8730-A7FB7A0116A2| ---------------------------------------------------| APFS Volume Disk (Role): disk1s4 (VM)| Name: VM (Case-insensitive)| Mount Point: Not Mounted| Capacity Consumed: 1073762304 B (1.1 GB)| Encrypted: No|+-- Container disk2 15E113C0-6AC5-4DA5-960C-A29A3C3B418A ==================================================== APFS Container Reference: disk2 Capacity Ceiling (Size): 100411764736 B (100.4 GB) Capacity In Use By Volumes: 59094196224 B (59.1 GB) (58.9% used) Capacity Available: 41317568512 B (41.3 GB) (41.1% free) | +-&lt; Physical Store disk0s5 987E8152-DD9D-4148-8314-CDA8A28323D5 | ----------------------------------------------------------- | APFS Physical Store Disk: disk0s5 | Size: 100411764736 B (100.4 GB) | +-&gt; Volume disk2s1 931C738D-C5A4-3A43-823A-210C3E9AF123 | --------------------------------------------------- | APFS Volume Disk (Role): disk2s1 (No specific role) | Name: MAC (Case-insensitive) | Mount Point: / | Capacity Consumed: 57355460608 B (57.4 GB) | Encrypted: No | +-&gt; Volume disk2s2 95F73DEF-D85F-4F43-B35F-D8914ED4A95F | --------------------------------------------------- | APFS Volume Disk (Role): disk2s2 (Preboot) | Name: Preboot (Case-insensitive) | Mount Point: Not Mounted | Capacity Consumed: 20959232 B (21.0 MB) | Encrypted: No | +-&gt; Volume disk2s3 CDF460DC-38FE-4E79-A04C-C7A5242BD091 | --------------------------------------------------- | APFS Volume Disk (Role): disk2s3 (Recovery) | Name: Recovery (Case-insensitive) | Mount Point: Not Mounted | Capacity Consumed: 519573504 B (519.6 MB) | Encrypted: No | +-&gt; Volume disk2s4 25CC995F-FB04-4617-900A-955B423A675F --------------------------------------------------- APFS Volume Disk (Role): disk2s4 (VM) Name: VM (Case-insensitive) Mount Point: /private/var/vm Capacity Consumed: 1073762304 B (1.1 GB) Encrypted: No 以我的磁盘为例：我的磁盘中存在两个APFS容器，分别是：Container disk1和Container disk2，disk1对应的是我的test卷，它是我测试用的，我演示下使用diskutil命令将apfs转换为hfs+，并且将转换的hfs+分区重新命名为：test[提示:]执行该命令之前请保存你的数据，该命令会直接删除之前该分区存在的数据 命令：1diskutil apfs deleteContainer disk1 test 显示结果： 1234567891011121314151617Started APFS operation on disk1Deleting APFS Container with all of its APFS VolumesUnmounting VolumesUnmounting Volume &quot;test&quot; on disk1s1Unmounting Volume &quot;Preboot&quot; on disk1s2Unmounting Volume &quot;Recovery&quot; on disk1s3Unmounting Volume &quot;VM&quot; on disk1s4Deleting VolumesDeleting ContainerWiping former APFS disksSwitching content typesReformatting former APFS disksInitialized /dev/rdisk0s10 as a 27 GB case-insensitive HFS Plus volume with a 8192k journalMounting disk1 new disk created or changed due to APFS operationDisk from APFS operation: disk0s10Finished APFS operation on disk1 检查：1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 512 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 … … … … … 8: Apple_HFS test 29.1 GB disk0s10 可以看到test的分区格式已经变回hfs+了。 本教程结束，更多的命令用法请使用命令：man diskutil 收工如何开启原生SSD Trim功能1sudo trimforce enable 因为是系统原生工具，此方法无需开启rootless=0，更不会改变已有驱动的签名，也就是说不需要kext-dev-mode=1，白果也可用此方法开启Trim。 不使用任何程序教你提取显示器的EDID，解决笔记本显示器内屏黑屏/花屏的问题 经常有网友需要解决笔记本显示器内屏黑屏问题，尤其新发布的10.13的系统会出现睡眠唤醒后屏幕花屏问题。 目前最简单的方案就是通过clover注入显示器的EDID信息，之前网上的教程都是使用Windows下的应用程序进行操作。其实显示器的EDID信息都会在显卡正确驱动后存在于ioreg中的。 最简单的命令是：1ioreg -lw0 | grep -i "IODisplayEDID" | sed -e 's/.*&lt;//' -e 's/&gt;//' 显示信息如下：00ffffffffffff000daee01500000000161a0104952213780228659759548e271e505400000001010101010101010101010101010101b43b804a713834405036680058c11000001ac32f804a713834405036680058c11000001a000000fe0035324b4636803135364843410a000000000000413196011000000a010a202000e8 接着输入下面的两条命令：12345ioreg -l | grep "DisplayVendorID" "DisplayVendorID" = 3502 ioreg -l | grep "DisplayProductID" "DisplayProductID" = 5600 其中&lt;&gt;里面的内容就是显示器的EDID信息，将提取出来的EDID信息粘贴到clover的 config.plist 中，顺便将 VendorID 和 ProductID 填入相应的位置，然后保存重启你的电脑。 MacOS系统下导出man手册内容经常使用shell命令的时候需要翻看man查询命令的用法以及参数，想把使用手册导出来查看。比如我想查看10.13系统下 log show命令的具体用法，使用以下命令： 1man log | col -b &gt; ~/Desktop/log_manual.txt 命令中 col -b是导出一个纯文本版本格式的手册且显示正常 使用log show检查AppleALC和Lilu是否工作正常(内容暂未添加)命令格式：log show --predicate &#39;process == &quot;kernel&quot; AND (eventMessage CONTAINS &quot;AppleALC&quot; OR eventMessage CONTAINS &quot;Lilu&quot;)&#39; --style syslog --source 一条命令教你如何确认自己的机型及如何开启 HWP HWP是什么？HWP是Hardware Work Package的简称，翻译过来叫做：硬件标准部件在macOS下,HWP是指Intel SpeedShift，开启全功率的电源管理，更多的解释请参阅原文 用到的工具： freqVectorsEdit.sh 用法： 打开终端，复制下面命令： cd /tmp &amp;&amp; curl -s https://raw.githubusercontent.com/Piker-Alpha/freqVectorsEdit.sh/master/freqVectorsEdit.sh &gt; /tmp/freqVectorsEdit.sh &amp;&amp; chmod +x freqVectorsEdit.sh &amp;&amp; /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/Mac-*.bin 注意上面的命令为一条，须全部复制 系统会使用 curl 自动下载一个程序，保存到 /tmp ,之后自动执行，期间需要你输入自己的用户密码，程序执行完后会自动清除临时文件； 屏幕会输出40个机型，其中亮白加粗为你当时设置的机型，带 绿色 显示的那三行前面括号里的机型为可选机型，带 HWP 字样的为可以开启 HWPEnable 输入方括号里面的数字并回车，可以修改相对应的机型，同时开启 HWP 本文不讨论开启 HWP 的步骤及用法，更多的信息请参阅其它文章 检查自己的显卡驱动所使用的platform-id打开终端,输入命令: 1ioreg -l | grep -y platform-id 显示输出信息: 1| | | | "AAPL,ig-platform-id" = &lt;00001659&gt; 进行一次小端转换,就是:59160000,也就是七代核显Intel HD Graphics 620的显卡注入信息. 收工———— 未完待续 ————关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>diskutil</tag>
        <tag>shell</tag>
        <tag>spctl</tag>
        <tag>trimforce</tag>
        <tag>ioreg</tag>
        <tag>EDID</tag>
        <tag>APFS</tag>
        <tag>HFS+</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不需要制作安装盘！教你在MacOS系统下安装High Sierra系统到另一个分区]]></title>
    <url>%2FDo-not-need-to-make-installation-disk-Teach-you-to-install-the-High-Sierra-system-on-another-MacOS-system-to-another-partition.html</url>
    <content type="text"><![CDATA[不需要制作安装盘！教你在 MacOS 系统下安装 High Sierra 系统到另一个分区 此方法不支持APFS分区。 只有HFS分区才能通过此安装 High Sierra 。 而且，您还需要一个 GUID 分区表来安装它。 我无法通过我的安装 USB 启动 macOS High Sierra 安装程序。 尝试了很多方法，但没有一个实际上使其启动，所以我发现一种新的方式通过我现在使用的实际引导的 macOS 在 HFS 日志分区上安装 macOS High Sierra 成功。 通过这种方式，您不需要创建可引导的U盘，甚至不需要重新启动。 开始 通过 App Store 下载 macOS High Sierra Developer Beta / Public Beta 安装程序。 在要使用磁盘实用程序安装测试版的驱动器上创建HFS日志分区（名称不能包含空格）。 打开应用程序目录，右键单击macOS Beta安装程序，然后单击显示包内容。 转到 Contents/Shared Support ，然后双击 InstallESD.dmg 和 BaseSystem.dmg 挂载它们。 打开安装的 InstallESD.dmg ，打开Packages文件夹，然后打开 OSInstall.mpkg 文件。 这将打开 macOS 安装程序。 是的，现在您可以从启动的 MacOS 系统桌面安装 High Sierra Beta 。 选择您创建的分区以安装它，安装完成后，按照步骤5。 备注：如果无法安装请执行(其中 HighSierra 是指卷名)： diskutil umount HighSierradiskutil mount HighSierra 打开已安装的 BaseSystem.dmg 并将 boot.efi 从 /System/Library/CoreServices 复制到同一位置的 High Sierra 分区 (/System/Library/CoreServices) 虽然安装了HS测试版，但它尚不可启动。 要使其可引导，请打开 终端 并键入以下命令(假设安装分区为：HighSierra)： 命令1：1$ sudo bless --folder &quot;/Volumes/HighSierra/System/Library/CoreServices&quot; 命令2：1$ sudo bless --mount &quot;/Volumes/HighSierra&quot; --setBoot 命令3：检查分区是否可引导。 为此，键入以下命令：1$ bless --info /Volumes/HighSierra 收工关于打赏如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Sierra 10.12.6 16G29 with Clover 4133原版镜像带多驱动]]></title>
    <url>%2FmacOS-Sierra-10-12-6-16G29-with-Clover-4133-original-mirror-with-multi-drive.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Sierra 10.12.6 16G29 with Clover 4133原版镜像带多驱动 本镜像采用官方原版app制作，集成Clover 4133，支持UEFI启动安装。 Clover集成众多配置文件，系统默认config.plist支持原生I5/i7七代移动版CPU，原生支持Intel HD Graphics 620【platforms-id:59160000】； 其它显卡配置文件可通过Clover引导界面-Options-config进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 其它驱动位于/EFI/Clover/kexts/Other/backup目录下，请根据自己的机型配置适当的驱动； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决，当然您也可以通过企鹅群：331686786寻求帮助。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像唯一发布站点：远景论坛/ 黑果小兵的小站 下载链接：百度云：https://pan.baidu.com/s/1sloGhCL 密码: yknpMD5 (macOS Sierra 10.12.6 16G29 Installer with Clover 4133.dmg) = 81ecbc29863381097537ec9a40c8e1c6 QQ群：331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>Sierra</tag>
        <tag>10.12.6</tag>
        <tag>镜像</tag>
        <tag>安装</tag>
        <tag>dmg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hotpatch详解]]></title>
    <url>%2Fhotpatch-detailed-solution.html</url>
    <content type="text"><![CDATA[hotpatch详解这里阐述hotpatch的作用及各功能详解 [TOC] 核心文件 名称 解释 SSDT-Config SSDT控制入口文件 系统 名称 解释 SSDT-LPC 正确识别LPC总线到系统 SSDT-SMBUS 正确识别SMBus到系统 SSDT-DMAC 将DMA控制器公开给系统 SSDT-MCHC 将内存控制器暴露在系统中 显卡 名称 解释 SSDT-IGPU 将属性添加到集成显卡设备，可以实现HDMI音频以及正确显示 SSDT-Disable_DGPU 在启动时关闭独立显卡，因为Mac OS无法使用它 SSDT-ALS0 添加假环境光传感器以在重新启动之间保存背光信息 SSDT-BRT6 将键盘的ACPI管理亮度键映射到VoodooPS2Controller.kext的PS2代码 SSDT-Dell_FN 将键盘的ACPI管理亮度键映射到VoodooPS2Controller.kext的PS2代码【部分DELL机型】 SSDT-PNLF 显示器亮度控制，为IntelBacklight.kext或AppleBacklight.kext + AppleBacklightInjector.kext添加PNLF设备 声卡 名称 解释 SSDT-HDAU 自动注入HDAU属性 备注：适用于Haswell和Broadwell平台 SSDT-HDEF 自动注入HDEF属性 声卡layoutid注入点 睡眠相关 名称 解释 SSDT-GPRW 通过挂接GPRW或UPRW来解决即时唤醒 SSDT-LANC_PRW 通过挂接GPRW来解决即时唤醒 SSDT-UPRW 通过挂接GPRW或UPRW来解决即时唤醒 SSDT-IMEI 添加IMEI（6系列HD4000，7系HD3000） SSDT-PTSWAK 在睡眠之前对离散GPU进行驱动，并在唤醒后将其关闭，以确保系统能够跟踪它 其它杂项 名称 解释 SSDT-Debug 用于ACPIDebug 该文件是通过将“添加DSDT调试方法”应用于空SSDT创建的，使用“添加SSDT调试外部声明”从其他方式访问这些方法hotpatch SSDT甚至打补丁的OEM ACPI文件 SSDT-ESEL 关闭ESEL，在DSDT里原生ESEL被重命名为ESEX SSDT-XWAK 关闭XWAK，在DSDT里原生的XWAK被重命名为ZWAK SSDT-PluginType1 在_PR.CPU0上插入plugin-type = 1可能是所有支持XCPM的SMBIOS只需要这种插件类型的注入 SSDT-SATA 修复某些不支持的SATA设备 SSDT-XHC 自动注入XHC属性 SSDT-XOSI 覆盖主机定义的_OSI来处理“Darwin”…DSDT中的所有_OSI调用都被路由到XOSIXOSI模拟“Windows 2009”（这是Windows 7）XOSI模拟“Windows 2015”（这是Windows 10）这里是关于_OSI中微软操作系统的描述文件 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群：331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hotpatch</tag>
        <tag>DSDT</tag>
        <tag>SSDT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB6 17A334b with Clover 4160原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10-13DB6-17A334b-with-Clover-4160-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB6 17A334b with Clover 4160原版镜像 本镜像采用官方原版app制作，集成Clover 4160，支持UEFI启动安装。 Clover默认config.plist支持原生i5/i7七代移动版CPU，原生支持Intel HD Graphics 620【platforms-id:59160000】；【DELL 燃7000系列可直接安装使用】 其它配置文件包括七代6x0 config.plist配置文件，其中spoof的是显卡欺骗，不带spoof字样的是支持原生显卡，本版未放其它型号的config；所有config配置文件都可通过Clover引导界面-Options-configs进行选择； 如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒； 集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖 支持BCM94352z无线网卡，支持Realtek8111系列网卡； 已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁； 其它驱动位于/EFI/Clover/kexts/Other/backup目录下，请根据自己的机型配置适当的驱动； 本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！ 本镜像发布站点：远景论坛/ 我的github小站 ####下载链接:百度云：https://pan.baidu.com/s/1dFvkYZZ • MD5 (macOS High Sierra 10.13 17A334b Installer with Clover 4160.dmg) = 8b46ab210917be9287ac3a38b4e8eb81 QQ群:331686786 一起吃苹果[群已满,请加下面群]688324116一起黑苹果]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>镜像</tag>
        <tag>dmg</tag>
        <tag>17A344b</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[出现nginx 405 Not Allowed错误的解决方法]]></title>
    <url>%2Fan-nginx-405-not-allowed-error-solution.html</url>
    <content type="text"><![CDATA[调试网站程序的时候，出现nginx 405 Not Allowed的错误信息，出现405错误的原因是nginx不允许post静态页。修改方法： 1nano nginx.conf 添加以下内容： 123456789101112server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 404 /404.html; error_page 403 /403.html; # To allow POST on static pages 允许静态页使用POST方法 error_page 405 =200 $uri; &#125;]]></content>
      <categories>
        <category>linux</category>
        <category>网络相关</category>
      </categories>
      <tags>
        <tag>405</tag>
        <tag>error</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8个好习惯叱咤职场]]></title>
    <url>%2F8-good-habit-chi-zha-in-the-workplace.html</url>
    <content type="text"><![CDATA[8个好习惯叱咤职场 守时。这是职场中最重要的一项！守时的乌龟和不守时的兔子做选择，老板更喜欢虽然慢，但是准时到点的乌龟。 微笑！长得好或者不好都不少很重要，重要的是自己有才气；如果才气也没有，那就总是微笑。 尊敬不喜欢你的人。职场中不喜欢的也许只是他做事的风格与你有出入，不要期望所有人你都喜欢或者不要期望所有人都喜欢你，那是不可能的，让大多数人喜欢只是是成功的表现。那么就大度点，提供一个马斯洛较高级别的需求给他吧。 办公要做到对事不对人。或对事无情，对人要有情；或做人第一，做事其次。女人最容易对人不对事了这点要特别注意！职场复杂多变，做事讲原则，做人变规则。 学习。活到老学到老，不耻下问等都是用来形容学习的。在变化莫测的职场中，固步自封的知识是很容易被淘汰的，我们需要的是一种永不停息的学习态度。并且最好是向身边的人学习。 说话的时候记得常用“我们”开头。这样能让大家感觉到这是一个团队，有着团队的精神！ 拥有一个好身体。经常锻炼，健康饮食保持一个良好的健康状态，才能面对重重的工作，才能有一个好的心态去工作学习。 不要吝惜你的喝彩声。每天适当的给予别人赞美是激励的好方法，赞扬他们的每一点成就和进步，或许因为你的赞美，这一天阳光也灿烂了许多。至少要给予可观的评价而减少不必要的负面影响。]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>职场</tag>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10个 Google 有意思的事情]]></title>
    <url>%2F10-interesting-things-that-google.html</url>
    <content type="text"><![CDATA[10个Google有意思的事情 我想大部分人都已经知道 Google 最开始是2个斯坦福大学的 Ph.D. 学生 Larry Page 和 Sergey Brin的研究课题。但你可否知道 Google 最初的储存设备其实只是一个乐高玩具积木所拼搭起来的机器？或者 Google 正式成立之前，就已经有人签了一张 10万美金的支票送给这两位学生？还有 Google 甚至还有自己的官方狗？如果都不知道，那就继续看下去吧。 Google 之前被叫做 BackRub在1996年，已经毕业的 Larry Page 和 Sergey Brin 一起研究万维网（World Wide Web）之中每一个连接和每一个连接之间的关系。他们发现一个很有趣的现象就是通过知道有多少连接指向某一网站可以估计出这个网站在万维网上的重要性（这 就是我们现在所熟知的 Page Rank 的原形）。 这项研究课题被命名为 BackRub，其实就是 Backlink 的意思。这里还有一个当年他们在 斯坦福大学保存下来的网页。而 BackRub 的 Logo 其实就是一只手反着放在扫描仪里扫描出来的图像。 最初 Google 存储设备 Larry 和 Sergey 当时需要非常非常多的容量（40Gb）来研究他们的 PageRank，而当时世界上最大的硬盘只有4Gb，于是他们找到10个硬盘并组装在一起。机箱就是 Larry 用 Lego 积木拼出来的。 Google 的第一位投资者Sun Microsystem 的协助创始人 Andy Bechtolsheim 一眼就看出了 Google 的潜力，他于 Larry 和 Sergey 简短的谈了30分钟，就抽出自己的支票夹（有钱人出门都不带现金），直接签上10万美金，交给 Larry 和 Sergey 做 Google Inc. 的资金。可当时 Google 都还没有存在呢。 Google 的车库 如果说世界上最幸福的房东是谁的话，那我们要先回到1998年的某一天。那一天Susan Wojcicki 为因还不起房贷，把自己没用的存车库以1700美金一个月组给了两个陌生的学生。但没等太久，她的生活就彻底被颠覆了。 Google 成立后聘请她在其中担当一个很重要的职位，从此之后她在 Google 中成为了一个必不可少的核心人物，在工作的同时还顺便给她妹妹找了个好老公，并且慢慢的通过自己的关系，把自己全家人的饭碗问题都给解决了。。。 2006年，Google 出钱把那座房子买了下来，从此那里变成了一个 Geeks 的旅游景点。 Google 的狗经常上 Youtube 的人可能会了解，Kitty Cats 小猫咪们现在是互联网上最有影响力的动物。所有人都爱它们，只要视频题目写着猫咪，那一定会火起来（即使我这个大男生还存了几个，如果有女生要的话可以告 诉我哈）。但是对于 Google 来说，狗才是王道。1999年,一个叫做 Yoshka（由丝卡，h不发音）的兰伯格犬来到了 Google， 并且和 Google 的第一位外聘工程师 Urs Hlzle 一起工作。 题外话，兰伯格犬是匈牙利的一种长得像狮子的大型犬，但它们非常不适合做看门狗，因为它们都太善良了。 Google 到底有多少个服务器 这个问题吗。。。除了少部分 Google 内部人员知道以外，世界没有其他人知道了。Google 非常严谨，严肃的保护他们的数据中心中的秘密（他们有多少个数据中心也没人知道）。例如在 Google 镇里，没有人可以说 Google 这个词，做不到这一点的人都会被遗留在上图的河对面，不得如内，就好像哈里波特里的伏地魔一样敏感，违禁词。虽然不知道 Google 确切到底有多少服务器，但是至少和天网一样多就对了。 搜索”绿色” 以 1000 万个服务器为例的话，这些硬件所消耗的电能达到 103 兆瓦，足够为 8万多户美国居民全家的用电（美国人比中国人能用电）。Google 自己也统计过，每一个人每次的搜索会平均消耗掉1千焦的能量（一片面包所含能量是这个的300多倍）。所以这已经算非常非常的节能了。为了更加环保，Google 还安装了9212 片太阳能板，每天提供4500 千瓦时的电能。 Google 三轮车如果 Street View 只限于 Street 那其不是很无趣。为了让宅男腐女们更久的宅在家里，并且同时周游世界，Google 骑着三轮车到世界各地的好玩地方去取景，例如日本旭山动物园，加州乐高乐园 等等。更多资料可以在谷奥找到，这里就不多说了。 I’m Feeling Lucky I’m Feeling Lucky 这个按钮每年花掉 Google 1.1个亿。它的原理是穿过所有搜索的结果，直接带你去第一个搜索到的网站。而这样，Google 就没有机会给你看广告了，因此 Google 每年少进账 1个亿美金。那为什么还非有不可呢？记得 Google 的创始人 Larry 和 Sergey 吧。他们本身是科研人员，不是商人，Google 本身也是一个研究课题，不是赚钱工具。更何况他们现在”不差钱”，他们认为只要还有用户用这个功能，那就值得保持下去，少赚钱没关系的。 10）Google 机器人 在2005年 Ben Rathbone 给我们解释了他眼中的未来。 他提到，在未来世界将分成2个，一个真实世界，一个数字世界。而 Google 就是联络2个世界的中枢（让我想到 Matrix 黑客帝国，有没有人和我一样？）一个类似于机器人的东西。真实世界需要什么，他就会从另外那个世界找出来给你，同样的，真实世界中有什么事情发生都会被 Google 这个机器人以数字的形式纪录下来。]]></content>
      <categories>
        <category>网络文摘</category>
        <category>网络相关</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
</search>
