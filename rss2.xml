<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>黑果小兵的部落阁</title>
    <link>http://blog.daliansky.net/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一些平时学习笔记以及搜集到的好的文章</description>
    <pubDate>Fri, 13 Apr 2018 06:25:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【黑果小兵】CLOVER v2.4 r4438集成小米笔记本PRO EFI安装说明</title>
      <link>http://blog.daliansky.net/CLOVER-v2-4-r4438-Integrated-Millet-Notebook-PRO-EFI-Installation-Instructions.html</link>
      <guid>http://blog.daliansky.net/CLOVER-v2-4-r4438-Integrated-Millet-Notebook-PRO-EFI-Installation-Instructions.html</guid>
      <pubDate>Fri, 13 Apr 2018 05:10:15 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;运行Clover-v2-4k-r4438-pkg安装程序&quot;&gt;&lt;a href=&quot;#运行Clover-v2-4k-r4438-pkg安装程序&quot; class=&quot;headerlink&quot; title=&quot;运行Clover_v2.4k_r4438.pkg安装程序&quot;&gt;&lt;/a&gt;运行
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="运行Clover-v2-4k-r4438-pkg安装程序"><a href="#运行Clover-v2-4k-r4438-pkg安装程序" class="headerlink" title="运行Clover_v2.4k_r4438.pkg安装程序"></a>运行<code>Clover_v2.4k_r4438.pkg</code>安装程序</h2><p>下载链接：<a href="https://github.com/daliansky/XiaoMi-Pro/blob/master/Clover_v2.4k_r4438.pkg" target="_blank" rel="external">Clover_v2.4k_r4438.pkg</a></p>
<blockquote>
<p>本安装程序会覆盖你的EFI，所以请事先备份EFI，再执行改名或者删除的操作，安装程序会安装全新的EFI到你的ESP分区（其实Clover会自动在你的macOS系统根目录下创建EFI-Backups并且自动备份）</p>
</blockquote>
<p><img src="http://7.daliansky.net/clover4438/1.png" alt="Clover_v2.4k_r4438"></p>
<p>点击<code>继续</code></p>
<p><img src="http://7.daliansky.net/clover4438/2.png" alt="Clover_v2.4k_r4438"></p>
<p>请先阅读更新内容，然后点击<code>继续</code></p>
<p><img src="http://7.daliansky.net/clover4438/3.png" alt="Clover_v2.4k_r4438"></p>
<p>如果是更新安装的情况下是不需要更改安装位置的，由于我是测试安装，所以点击<code>更改安装位置</code></p>
<p><img src="http://7.daliansky.net/clover4438/4.png" alt="Clover_v2.4k_r4438"></p>
<p>本例中，我选择的安装位置是<code>EFI_TEST</code>，点击<code>继续</code></p>
<p><img src="http://7.daliansky.net/clover4438/5.png" alt="Clover_v2.4k_r4438"></p>
<p>勾选<code>仅安装UEFI开机版本</code>，勾选<code>安装Clover到EFI系统区</code>，勾选附带的三套<code>开机主题</code>，点击<code>Drivers64UEFI</code></p>
<p><img src="http://7.daliansky.net/clover4438/6.png" alt="Clover_v2.4k_r4438"></p>
<p>勾选<code>HFSPlus</code> <code>apfs</code> <code>AptioMemoryFix</code></p>
<p><img src="http://7.daliansky.net/clover4438/7.png" alt="Clover_v2.4k_r4438"></p>
<p>勾选<code>安装全部RC scripts到全部可开机的OSX磁区</code>，点击<code>安装</code></p>
<p><img src="http://7.daliansky.net/clover4438/8.png" alt="Clover_v2.4k_r4438"></p>
<p>安装开始，系统会要求输入用户密码，请输入密码，之后点击<code>安装软件</code></p>
<p><img src="http://7.daliansky.net/clover4438/9.png" alt="Clover_v2.4k_r4438"></p>
<p>程序会自动将包含小米笔记本PRO的EFI安装到<code>ESP</code>分区</p>
<p><img src="http://7.daliansky.net/clover4438/10.png" alt="Clover_v2.4k_r4438"></p>
<p>安装完成，请点击<code>关闭</code></p>
<h2 id="将config-4-13-plist重命名为config-plist"><a href="#将config-4-13-plist重命名为config-plist" class="headerlink" title="将config_4-13.plist重命名为config.plist"></a>将<code>config_4-13.plist</code>重命名为<code>config.plist</code></h2><p>打开终端，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil mount ESP		<span class="comment"># 挂载ESP分区，假如你的ESP分区名称为：ESP</span></div></pre></td></tr></table></figure>
<p>如果<code>ESP</code>分区没有命名的话，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil list</div></pre></td></tr></table></figure>
<p>命令输出信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/dev/disk4 (disk image):</div><div class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</div><div class="line">   0:      GUID_partition_scheme                        +6.0 GB     disk4</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk4s1</div><div class="line">   2:                  Apple_HFS EFI_TEST                5.7 GB     disk4s2</div></pre></td></tr></table></figure>
<p>系统显示<code>disk4s1</code>为<code>EFI</code>分区，使用重命名命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">diskutil rename disk4s1 ESP		<span class="comment"># 将disk4s1重命名为ESP</span></div><div class="line">diskutil mount ESP				<span class="comment"># 挂载ESP分区</span></div></pre></td></tr></table></figure>
<p>在本例子中，我使用的是<code>disk image</code>，也就是新建了个包含EFI分区的镜像做演示，你的设备名很有可能是<code>disk0s1</code></p>
<p>当然你也可以直接使用应用程序<code>CLOVER CONFIGURATOR</code>至于如何重命名这个就不需要我多说了吧。</p>
<h2 id="EFI下载-更新"><a href="#EFI下载-更新" class="headerlink" title="EFI下载/更新"></a>EFI下载/更新</h2><p><a href="https://github.com/daliansky/XiaoMi-Pro" target="_blank" rel="external">https://github.com/daliansky/XiaoMi-Pro</a></p>
<h2 id="教程结束"><a href="#教程结束" class="headerlink" title="教程结束"></a>教程结束</h2><h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢:"></a>特别鸣谢:</h2><p><code>@Steve</code> <code>@风之痕</code> <code>@烎⁵⁷</code> 提供的EFI测试及部分素材</p>
<h2 id="关于打赏"><a href="#关于打赏" class="headerlink" title="关于打赏"></a>关于打赏</h2><p>您的支持就是我更新的动力！<br>如果不希望看到博主停更的话，请点击下方的 <code>打赏</code> 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！</p>
<h2 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群:"></a>QQ群:</h2><p>247451054 <a href="http://shang.qq.com/wpa/qunwpa?idkey=6223ea12a7f7efe58d5972d241000dd59cbd0260db2fdede52836ca220f7f20e" target="_blank" rel="external">小米PRO黑苹果高级群</a>[群已满，请加其它群]<br>137188006 <a href="http://shang.qq.com/wpa/qunwpa?idkey=c17e190b9466a73cf12e8caec36e87124fce9e231a895353ee817e9921fdd74e" target="_blank" rel="external">小米PRO黑苹果</a><br>689011732 小米笔记本Pro黑苹果</p>
]]></content:encoded>
      
      <comments>http://blog.daliansky.net/CLOVER-v2-4-r4438-Integrated-Millet-Notebook-PRO-EFI-Installation-Instructions.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>[翻译][指南]英特尔IGPU HDMI/DP音频(Sandy/Ivy/Haswell/Broadwell/Skylake/Kabylake)</title>
      <link>http://blog.daliansky.net/translate-guide-intel-igpu-hdmi-dp-audio-sandy-ivy-haswell-broadwell-skylake-kabylake.html</link>
      <guid>http://blog.daliansky.net/translate-guide-intel-igpu-hdmi-dp-audio-sandy-ivy-haswell-broadwell-skylake-kabylake.html</guid>
      <pubDate>Tue, 03 Apr 2018 03:28:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;翻译-指南-英特尔IGPU-HDMI-DP音频-Sandy-Ivy-Haswell-Broadwell-Skylake-Kabylake&quot;&gt;&lt;a href=&quot;#翻译-指南-英特尔IGPU-HDMI-DP音频-Sandy-Ivy-Haswell-Broadwell-
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="翻译-指南-英特尔IGPU-HDMI-DP音频-Sandy-Ivy-Haswell-Broadwell-Skylake-Kabylake"><a href="#翻译-指南-英特尔IGPU-HDMI-DP音频-Sandy-Ivy-Haswell-Broadwell-Skylake-Kabylake" class="headerlink" title="翻译[指南]英特尔IGPU HDMI/DP音频(Sandy/Ivy/Haswell/Broadwell/Skylake/Kabylake)"></a><a href="https://www.tonymacx86.com/threads/guide-intel-igpu-hdmi-dp-audio-sandy-ivy-haswell-broadwell-skylake.189495/" target="_blank" rel="external">翻译</a>[指南]英特尔IGPU HDMI/DP音频(Sandy/Ivy/Haswell/Broadwell/Skylake/Kabylake)</h2><blockquote>
<p>早上起床，习惯性打开手机浏览，随着macOS发布了最新的10.13.4，最近几天远景上面关于Intel核显的显卡驱动以及HDMI的声音输出的求助帖很多，于是就跑去<code>[RehabMan](https://www.tonymacx86.com/members/rehabman.429483/)</code>的大本营，就看到了这篇文章。之前也经常使用他发布的一些patch，包括很多笔记本机型专用的config.plist都来自这位大咖。</p>
<p>现将这篇让INTEL的HDMI/DP音频正确输出的帖子转译过来，让更多的人都能看到。</p>
<p>本人英语炒鸡辣鸡，使用的是google的机翻，其中难免会存在错误，请各位群友指正。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本指南将介绍如何为连接到英特尔集成GPU的HDMI端口的笔记本电脑实现HDMI音频。其中一些内容也适用于配备DP连接器的笔记本电脑。</p>
<p>如果您的笔记本电脑有外部DP端口，您也可以阅读本指南。带有外部DP端口的笔记本电脑需要此处介绍的一部分补丁。</p>
<p>为了实现HDMI/DP，必须满足以下要求：</p>
<ul>
<li><p>使用AppleHDA的原生音频（有关更多信息，请阅读FAQ …实现板载音频不在本指南的范围内）</p>
</li>
<li><p>适当的帧缓冲（kext）补丁更改连接器类型以匹配物理连接器。这通过修补与正在使用的ig-platform-id关联的数据来完成。</p>
</li>
<li><p>Haswell/Broadwell：将B0D3重命名为HDAU（设备位于0x00030000）</p>
</li>
<li><p>在HDAU，IGPU，HDEF对象上注入属性<code>&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;</code>。</p>
</li>
<li><p>Haswell/Broadwell：在HDAU上注入layout-id以匹配HDEF上的布局ID </p>
</li>
<li><p>Haswell：安装<code>FakePCIID.kext</code>和<code>FakePCIID_Intel_HDMI_Audio.kext</code> </p>
</li>
</ul>
<p>注意：通常，对于PC笔记本电脑，英特尔图形设备的ACPI标识符为GFX0产品使用VID）。由于此标识符通常更改为IGPU以启用IGPU电源管理，因此本指南将其称为IGPU。请记住，如果您尚未实施IGPU PM。</p>
<p>注意：如果您想知道Skylake（和Kaby Lake）与HD3000/HD4000类似，因为HDMI/DP编解码器在HDEF（通常是PC DSDT中的HDAS，更名为OS X的HDEF）上，而不是单独的设备HDAU 。</p>
<p><strong>关于Clover和Clover笔记本电脑指南的注意事项</strong></p>
<p>如果您按照此处的指南进行操作：<a href="https://www.tonymacx86.com/threads/guide-booting-the-os-x-installer-on-laptops-with-clover.148093/" target="_blank" rel="external">https</a> : <a href="https://www.tonymacx86.com/threads/guide-booting-the-os-x-installer-on-laptops-with-clover.148093/" target="_blank" rel="external">//www.tonymacx86.com/threads/guide-booting-the-os-x-installer-on-laptops-with-clover.148093/</a></p>
<p>你的config.plist将已经包含所需的重命名。</p>
<p>您可以将config.plist/Devices中的#AddProperties重命名为AddProperties，它将启用所需的“hda-gfx”和其他音频注入。</p>
<p>看看它… </p>
<h2 id="帧缓冲区修补"><a href="#帧缓冲区修补" class="headerlink" title="帧缓冲区修补"></a>帧缓冲区修补</h2><p>与ig-platform-id（或具有Sandy Bridge的snb-platform-id）关联的数据对于每个连接器具有代表连接器类型（以及其他连接器相关数据）的位。由于大多数Apple产品使用DP，因此大多数连接器默认为DP。为了使HDMI音频正常工作，您必须修补kext，使连接器数据与物理连接器匹配。如果您的连接器是DP，则无需执行任何操作，但如果您的端口是HDMI，则可能需要修补连接器，使其成为HDMI连接器而不是DP连接器。</p>
<p>DP连接器通过连接器类型在ioreg中标识<code>&lt;00 04 00 00&gt;</code><br>HDMI连接器通过连接器类型在ioreg中标识<code>&lt;00 08 00 00&gt;</code></p>
<p>在ioreg中标识。在我的向导中链接的plist中，您将找到各种连接器ig-platform-id数据。</p>
<p><a href="http://www.tonymacx86.com/el-capitan-laptop-support/148093-guide-booting-os-x-installer-laptops-clover.html" target="_blank" rel="external">http://www.tonymacx86.com/el-capita…de-boot-os-x-installer-laptops-clover.html</a></p>
<p>默认情况下，每个补丁都是禁用的。您可以阅读关于禁用的修补程序以及如何在指南的第2篇后启用它们。</p>
<p>您需要使用的补丁取决于HDMI连接器插入哪个端口。每个端口在IGPU下都有自己的AppleIntelFramebuffer节点。例如，该图像显示了我的Lenovo u430上的IGPU下的每个帧缓冲区节点：<br><img src="http://7.daliansky.net/HDMI/IGPUframebuffers.png" alt="IGPUframebuffers.png"></p>
<p>如果有HDMI设备插入其中一个帧缓冲区，您将在相应的帧缓冲区下看到AppleDisplay，就像您看到与LVDS相关的帧缓冲区下的AppleBacklightDisplay一样端口（笔记本电脑内部显示）。</p>
<p>在我的联想u430的情况下，HDMI端口与AppleIntelFramebuffer @ 2相关联。每个帧缓冲区（@ 0，@ 1，@ 2，@ 3）对应于驻留在帧缓冲区kext二进制文件中的ig-platform-id数据内的一组连接器数据。每个连接器都有一个描述端口号的前缀，并且每个连接器都位于kext中（例如：按照该顺序为0105,0204,0306）。提供的plists中的每个修补程序都用前缀进行注释，并按它们在平台数据中出现的顺序进行评论。因此，对于使用ig-platform-id 0xa260006的Lenovo u430，外部端口（@ 1和@ 2）标有0105和0204。由于u430上的HDMI端口连接到AppleIntelFramebuffer @ 2这是0204连接器，我们可以将其缩小到只适用于0xa260006的0204的修补程序。</p>
<p>plist中只有两个这样的补丁。对于每个连接器，都可以选择使用非（12）修补程序或（12）修补程序之一修补。不同之处在于“（12）”变体除了修补连接器类型外，还修补了一个据信定义某种延迟的字节。一些笔记本电脑需要将此延迟从默认（09）延长到（12）。在确定你需要什么的时候，这是试错的问题。假设您已满足所有其他HDMI音频要求，并且非12修补程序导致KP(内核崩溃) /重新启动，则可能需要12个变体。</p>
<p>对于HDMI监视器热插拔时KP(内核崩溃)  /重新启动的情况，很难确定您的外部端口分配到了哪个端口（因为在监视器插入时无法查看ioreg）。在这种情况下，您应该应用适用于您正在使用的ig-platform-id的所有（12个变体）修补程序。这应该让你通过KP(内核崩溃)/重新启动，然后你可以看看ioreg，确定哪个端口实际使用，并且消除或禁用不需要的补丁。</p>
<p>在我的u430的情况下，我没有KP(内核崩溃)  /重新启动问题，所以我可以通过插入显示器并查看ioreg来确定HDMI使用哪个端口。正如我之前提到的那样，它是0204连接器（framebuffer @ 2）。因此，Lenovo u430使用标有“HDMI-audio，端口0204，0x0a260005 0x0a260006”的补丁。</p>
<p>它出现在我的config.plist中（在Xcode中）： 在修补HDMI音频之前，AppleIntelFramebuffer @ 2的连接器类型为<00 04="" 00="">。修补后，它将变为<00 08="" 00="">。 修补之前： 修补后： 如果您的物理连接器是DP，则无需为连接器类型打补丁。但是，您可能需要为09和12延迟打补丁。查看每个修补程序中替换的十六进制数据，应该很明显如何更改修补程序，使其保持<00 04="" 00="">连接器类型而不是将其更改为<00 08="" 00="">。<strong>将B0D3重命名为HDAU</strong>:</00></00></00></00></p>
<p><img src="http://7.daliansky.net/HDMI/0204patch.png" alt="0204patch.png"></p>
<p><img src="http://7.daliansky.net/HDMI/0204connector-type-HDMI.png" alt="0204connector-type-HDMI.png"></p>
<p><img src="http://7.daliansky.net/HDMI/0204connector-type-DP.png" alt="0204connector-type-DP.png"></p>
<p>Sandy Bridge（HD3000）和Ivy Bridge（HD4000）使用具有多个编解码器的单个音频设备（HDEF）。板载音频和HDMI音频均位于同一HDEF设备上。因此，没有第二个设备，所以不需要将其重命名为HDAU。</p>
<p>Haswell和Broadwell为HDMI音频编解码器使用单独的设备。通常它被命名为B0D3（它可以在DSDT或OEM SSDT中定义）。您将在ioreg中看到PCI0下的B0D3节点。对于OS X，它必须重命名为HDAU。设备的地址始终为0x00030000。</p>
<p>您可以使用笔记本修补程序存储库中的“将B0D3重命名为HDAU”来重命名设备。该补丁应该适用于包含B0D3参考的任何DSDT或SSDT。同一个补丁还定义了一个在HDAU上注入“hda-gfx”=“onboard-1”的_DSM。它还包含一个补丁，为IGPU注入“hda-gfx”。</p>
<p>请参阅ACPI修补指南更多有关ACPI修补程序的信息：<a href="http://www.tonymacx86.com/el-capitan-laptop-support/152573-guide-patching-laptop-dsdt-ssdts.html" target="_blank" rel="external">http</a> : <a href="http://www.tonymacx86.com/el-capitan-laptop-support/152573-guide-patching-laptop-dsdt-ssdts.html" target="_blank" rel="external">//www.tonymacx86.com/el-capitan-laptop-support/152573-guide-patching-laptop-dsdt-ssdts.html</a></p>
<p>注意：Skylake似乎使用单个音频设备，通常名为HDAS。它必须被重新命名为HDEF为OS X </p>
<h2 id="注入性质HDA-GFX（和布局-ID）"><a href="#注入性质HDA-GFX（和布局-ID）" class="headerlink" title="注入性质HDA-GFX（和布局-ID）"></a>注入性质HDA-GFX（和布局-ID）</h2><p>对于桑迪桥和常春藤桥（HD3000/HD4000），<code>&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;</code>必须在注入iGPU的和HDEF。</p>
<p>对于Haswell和Broadwell，必须在IGPU和HDAU上注入<code>&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;</code>。没有必要在HDEF上注入“hda-gfx”，尽管它似乎不会引起问题。</p>
<p><code>Audio Layout</code>音色（<code>Audio Layout 3</code>，<code>Audio Layout 12</code>或为您的布局ID自定义的音色）会在HDEF中注入“hda-gfx”。通常情况下，HDEF在DSDT中定义。</p>
<p>注意：HDAU/IGPU“hda-gfx”来自“将B0D3重命名为HDAU”，或者对于IGPU其他IGPU相关的修补程序。搜索“hda-gfx”的回购补丁，你会看到几个。</p>
<p><code>Rename B0D3 to HDAU&quot;</code>补丁也为IGPU注入“hda-gfx”。通常，HDAU和IGPU对象在相同的SSDT中定义，但有可能是一个不同的文件（如DSDT）。仅在应用修补程序时查看它是否适用于给定文件没有任何坏处。</p>
<p>通常情况下，以下工作将完成所有必需的重命名和注入操作：</p>
<ul>
<li>将“Audio Layout *”（布局ID取决于您修补的AppleHDA）应用于DSDT </li>
<li>将<code>Rename B0D3 to HDAU</code>应用于DSDT和所有OEM SSDT。</li>
</ul>
<p>另请注意，“将B0D3重命名为HDAU”补丁会在HDAU上注入布局ID。布局ID必须与HDEF上的布局ID匹配。在应用之前，根据需要修改修补程序中的布局ID。</p>
<p>注意：Haswell和Broadwell不需要HDEF上的hda-gfx。</p>
<h2 id="安装FakePCIID-kext-FakePCIID-Intel-HDMI-Audio"><a href="#安装FakePCIID-kext-FakePCIID-Intel-HDMI-Audio" class="headerlink" title="安装FakePCIID.kext FakePCIID_Intel_HDMI_Audio"></a>安装FakePCIID.kext FakePCIID_Intel_HDMI_Audio</h2><p><code>AppleHDAController kext</code>实现了某些HDAU设备的白名单。一些PC使用不直接支持的设备。但<code>FakePCIID_Intel_HDMI_Audio</code>可以欺骗PCI ID以满足AppleHDAController</p>
<p>安装FakePCIID.kext和FakePCIID_Intel_HDMI_Audio.kext：<a href="https://github.com/RehabMan/OS-X-Fake-PCI-ID" target="_blank" rel="external">https</a>：<a href="https://github.com/RehabMan/OS-X-Fake-PCI-ID" target="_blank" rel="external">//github.com/RehabMan/OS-X-Fake-PCI-ID</a></p>
<p>阅读README以查找预构建的kext二进制文件。</p>
<p>即使在您拥有支持的HDAU设备的情况下，安装FakePCIID_Intel_HDMI_Audio也不会造成任何伤害。kext不会附加到本机支持的设备。</p>
<h2 id="检查你的工作"><a href="#检查你的工作" class="headerlink" title="检查你的工作"></a>检查你的工作</h2><p>你可以判断一切是否完全在IORegistryExplorer中实现。</p>
<p>初始IORegistryExplorer设置：</p>
<ul>
<li>从这里下载（附加到帖子）：<a href="http://www.tonymacx86.com/audio/58368-guide-how-make-copy-ioreg.html" target="_blank" rel="external">http</a> : <a href="http://www.tonymacx86.com/audio/58368-guide-how-make-copy-ioreg.html" target="_blank" rel="external">//www.tonymacx86.com/audio/58368-guide-how-make-copy-ioreg.html</a></li>
<li>首选项 - &gt;查找，勾选“属性键“ </li>
</ul>
<p>检查<code>&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;</code></p>
<ul>
<li>在搜索框中输入”</li>
<li>你应该在HDEF/IGPU（Sandy/Ivy/Skylake/Kabylake）和HDAU/IGPU（Haswell/Broadwell）上找到它。</li>
<li>查看属性值，您应该看到“onboard-1” </li>
</ul>
<p>检查HDAU（仅限Haswell/Broadwell）：</p>
<ul>
<li>您应该在PCI0 </li>
</ul>
<p>检查layout-id 下找到HDAU（不是B0D3）：</p>
<ul>
<li>在搜索框中键入“ layout-id“ </li>
<li>您应该在HDAU（如果适用）和HDEF上找到它</li>
<li>如果您检查每个HDAU和HDEF中的值，HDAU应具有相同的值</li>
</ul>
<p>检查帧缓冲区：</p>
<ul>
<li>检查与您的HDMI对应的IGPU下的帧缓冲区/ DP连接器</li>
<li>它应该与物理连接器（DP：<00 04="" 00="">，HDMI：<00 08="" 00="">）</00></00></li>
</ul>
<p>匹配检查HDAU下的FakePCIID加载：</p>
<ul>
<li>如果您有不受支持的HDAU，您会注意到FakePCIID已连接到HDAU设备。</li>
</ul>
<p>如果只有其中一项要求未得到满足，则不起作用。</p>
<h2 id="关于打赏"><a href="#关于打赏" class="headerlink" title="关于打赏"></a>关于打赏</h2><p>您的支持就是我更新的动力！<br>如果不希望看到博主停更的话，请点击下方的 <code>打赏</code> 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！</p>
<h2 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群:"></a>QQ群:</h2><p>331686786 <a href="http://shang.qq.com/wpa/qunwpa?idkey=db511a29e856f37cbb871108ffa77a6e79dde47e491b8f2c8d8fe4d3c310de91" target="_blank" rel="external">一起吃苹果</a><br>688324116 <a href="https://shang.qq.com/wpa/qunwpa?idkey=6bf69a6f4b983dce94ab42e439f02195dfd19a1601522c10ad41f4df97e0da82" target="_blank" rel="external">一起黑苹果</a>[群已满,请加其它群]<br>257995340 <a href="http://shang.qq.com/wpa/qunwpa?idkey=8a63c51acb2bb80184d788b9f419ffcc33aa1ed2080132c82173a3d881625be8" target="_blank" rel="external">一起啃苹果</a></p>
]]></content:encoded>
      
      <comments>http://blog.daliansky.net/translate-guide-intel-igpu-hdmi-dp-audio-sandy-ivy-haswell-broadwell-skylake-kabylake.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>【黑果小兵】macOS High Sierra 10.13.4 17E199 正式版 with Clover 4418原版镜像</title>
      <link>http://blog.daliansky.net/macOS-High-Sierra-10.13.4-17E199-Release-Version-and-Clover-4418-Original-Image.html</link>
      <guid>http://blog.daliansky.net/macOS-High-Sierra-10.13.4-17E199-Release-Version-and-Clover-4418-Original-Image.html</guid>
      <pubDate>Sat, 24 Mar 2018 02:49:36 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;【黑果小兵】macOS-High-Sierra-10-13-4-17E199-正式版-with-Clover-4418原版镜像&quot;&gt;&lt;a href=&quot;#【黑果小兵】macOS-High-Sierra-10-13-4-17E199-正式版-with-Clover-44
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="【黑果小兵】macOS-High-Sierra-10-13-4-17E199-正式版-with-Clover-4418原版镜像"><a href="#【黑果小兵】macOS-High-Sierra-10-13-4-17E199-正式版-with-Clover-4418原版镜像" class="headerlink" title="【黑果小兵】macOS High Sierra 10.13.4(17E199)正式版 with Clover 4418原版镜像"></a>【黑果小兵】macOS High Sierra 10.13.4(17E199)正式版 with Clover 4418原版镜像</h1><blockquote>
<p>10.13.4镜像的制作比较坑人，之前所有的制作方法都无法正常安装，详见<a href="http://bbs.pcbeta.com/viewthread-1780071-1-1.html" target="_blank" rel="external">解决10.13.4制作镜像出现的安装盘找不到和显卡代码刷屏问题</a></p>
</blockquote>
<ul>
<li><p>本镜像采用官方原版app制作，集成Clover 4418，支持UEFI启动安装;<code>Drivers64UEFI/</code>目录下只保留的<code>AptioMemoryFix.efi</code>以解决卡+++问题；</p>
</li>
<li><p>所有配置文件中默认去掉<code>Lilu</code>的输出信息,<a href="https://blog.daliansky.net/macOS-10.13-installation-of-common-problems-and-solutions.html">让你看清10.13 内核崩溃(kernel pance)的真相</a>;</p>
</li>
<li><p>更新<code>apfs.efi</code>到<code>10.13.4</code>正式版；</p>
</li>
<li><p>更新<code>IntelGraphicsFixup</code> 到V1.2.7，原生支持UHD620/UHD630等八代核显，不需要注入<code>platform-id</code></p>
<p><img src="http://7.daliansky.net/dell/IntelGraphicsFixup.jpg" alt="http://7.daliansky.net/dell/IntelGraphicsFixup.jpg"></p>
</li>
<li><p>特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在<code>Service only ran for 0 seconds. Pushing respawn out by 10 second</code>的问题，特别感谢<code>@宪武</code>的搜集整理<strong>[最新的macOS 10.13.4可以不需要屏蔽独显而进行安装使用]</strong>；</p>
</li>
<li><p>Clover默认配置文件<code>config.plist</code>原生支持七代HD620/HD630、八代UHD620/UHD630，<code>platform-id</code> 使用自动侦测；</p>
</li>
<li><p>config_DalianSky.plist为部分机型增加<code>Drop Tables</code>,如果默认的<code>config.plist</code>无法进入安装界面,可以试试这个</p>
</li>
<li><p>其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；</p>
</li>
<li><p>如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；</p>
</li>
<li><p>本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：<a href="http://bbs.pcbeta.com/viewthread-1753483-1-1.html" target="_blank" rel="external">macOS High Sierra区笔记本安装情况集合帖</a></p>
</li>
<li><p>支持<a href="https://blog.daliansky.net/Broadcom-BCM94352z-DW1560-drive-new-posture.html#more">BCM94352z无线网卡</a>，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；</p>
</li>
<li><p>已更新Lilu(1.2.3)、AppleALC(1.2.3)、IntelGraphicsFixup(1.2.7)等驱动；</p>
</li>
<li><p>本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 <code>黑果小兵</code> 的大力支持，由于人员众多，恕不一一列名致谢！</p>
</li>
<li><p>本镜像发布站点：远景论坛/ <a href="https://blog.daliansky.net">黑果小兵的部落阁</a></p>
</li>
</ul>
<h1 id="截图："><a href="#截图：" class="headerlink" title="截图："></a>截图：</h1><p><img src="http://7.daliansky.net/10.13.4/10.13.4_17E199.jpg" alt="10.13.4_17E199.jpg"><br><img src="http://7.daliansky.net/10.13.4/Audio.jpg" alt="Audio.jpg"><br><img src="http://7.daliansky.net/10.13.4/BlueTooth.jpg" alt="BlueTooth.jpg"><br><img src="http://7.daliansky.net/10.13.4/Displays.jpg" alt="Displays.jpg"><br><img src="http://7.daliansky.net/10.13.4/HD620.jpg" alt="HD620.jpg"><br><img src="http://7.daliansky.net/10.13.4/HDMI_Audio.jpg" alt="HDMI_Audio.jpg"><br><img src="http://7.daliansky.net/10.13.4/KEXTS.jpg" alt="KEXTS.jpg"><br><img src="http://7.daliansky.net/10.13.4/PCI_List.jpg" alt="PCI_List.jpg"><br><img src="http://7.daliansky.net/10.13.4/SATA.jpg" alt="SATA.jpg"><br><img src="http://7.daliansky.net/10.13.4/Storage.jpg" alt="Storage.jpg"><br><img src="http://7.daliansky.net/10.13.4/USB.jpg" alt="USB.jpg"><br><img src="http://7.daliansky.net/10.13.4/WIFI.jpg" alt="WIFI.jpg"></p>
<h1 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h1><p>百毒云下载链接：<a href="https://pan.baidu.com/s/1UbqIbltVRDAAY7zQPIHtrw" target="_blank" rel="external">请点击下载</a></p>
<p>Mega网盘下载链接:<a href="https://mega.nz/#!B5kxmZgb!yP3SDWns61V82WHElF7hJvxvapGjNkhZJmfWCbBBSBk" target="_blank" rel="external">请点击下载</a></p>
<blockquote>
<p>如果mega无法下载,请进群下载<code>hosts_mega.txt</code></p>
</blockquote>
<p>迅雷下载链接:<a href="https://mirrors.dtops.cc/iso/MAC%20OS/黑果小兵/" target="_blank" rel="external">请点击下载</a> 感谢<code>@难忘情怀</code>提供下载资源</p>
<p>MD5 (macOS High Sierra 10.13.4(17E199) Installer with Clover 4418.dmg) = e1d1fb0f036c35582a016d50035fc1a3</p>
<h1 id="关于打赏"><a href="#关于打赏" class="headerlink" title="关于打赏"></a>关于打赏</h1><p>您的支持就是我更新的动力！<br>如果不希望看到博主停更的话，请点击下方的 <code>打赏</code> 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！</p>
<h1 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群:"></a>QQ群:</h1><p>331686786 <a href="http://shang.qq.com/wpa/qunwpa?idkey=db511a29e856f37cbb871108ffa77a6e79dde47e491b8f2c8d8fe4d3c310de91" target="_blank" rel="external">一起吃苹果</a><br>688324116 <a href="https://shang.qq.com/wpa/qunwpa?idkey=6bf69a6f4b983dce94ab42e439f02195dfd19a1601522c10ad41f4df97e0da82" target="_blank" rel="external">一起黑苹果</a>[群已满,请加其它群]<br>257995340 <a href="http://shang.qq.com/wpa/qunwpa?idkey=8a63c51acb2bb80184d788b9f419ffcc33aa1ed2080132c82173a3d881625be8" target="_blank" rel="external">一起啃苹果</a></p>
]]></content:encoded>
      
      <comments>http://blog.daliansky.net/macOS-High-Sierra-10.13.4-17E199-Release-Version-and-Clover-4418-Original-Image.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>小米PRO蓝牙设备驱动的正确姿势</title>
      <link>http://blog.daliansky.net/XiaoMiPro-Bluetooth-device-driver-correct-posture.html</link>
      <guid>http://blog.daliansky.net/XiaoMiPro-Bluetooth-device-driver-correct-posture.html</guid>
      <pubDate>Fri, 23 Mar 2018 04:29:12 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;经常使用小米Pro笔记本安装使用&lt;code&gt;macOS&lt;/code&gt;的小伙伴们都会遇到一个尴尬的问题：板载的INTEL无线二合一网卡是焊死在主板上的，INTEL的WIFI无球无解，而附带的蓝牙芯片就更让人又爱又恨了：有的时候能用，有的时候不能用；它
      
      </description>
      
      <content:encoded><![CDATA[<blockquote>
<p>经常使用小米Pro笔记本安装使用<code>macOS</code>的小伙伴们都会遇到一个尴尬的问题：板载的INTEL无线二合一网卡是焊死在主板上的，INTEL的WIFI无球无解，而附带的蓝牙芯片就更让人又爱又恨了：有的时候能用，有的时候不能用；它不好的一点是：总让人心存幻想，每每有群友问我蓝牙怎么办，我就半认真半玩笑地说：”你让太监射精可能吗？！”，尽管话说的比较难听，但是话糙理不糙。如果你想了解如何对待板载的蓝牙，那么就继续耐心往下看吧。</p>
</blockquote>
<p>正题来了：屏蔽蓝牙或者加装USB蓝牙</p>
]]></content:encoded>
      
      <comments>http://blog.daliansky.net/XiaoMiPro-Bluetooth-device-driver-correct-posture.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>修改DSDT实现电量显示方法【转载】</title>
      <link>http://blog.daliansky.net/Modify-DSDT-to-achieve-power-display-method.html</link>
      <guid>http://blog.daliansky.net/Modify-DSDT-to-achieve-power-display-method.html</guid>
      <pubDate>Thu, 15 Mar 2018 04:52:20 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;这篇帖子主要来源于论坛&lt;a href=&quot;https://github.com/RehabMan/Laptop-DSDT-Patch。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/RehabM
      
      </description>
      
      <content:encoded><![CDATA[<blockquote>
<p>这篇帖子主要来源于论坛<a href="https://github.com/RehabMan/Laptop-DSDT-Patch。" target="_blank" rel="external">https://github.com/RehabMan/Laptop-DSDT-Patch。</a></p>
<p>但是很多笔记本并未出现在这个补丁源里，并且我们要了解补丁的意思才知道它适不适合我们的电脑。</p>
</blockquote>
<h2 id="电量补丁制作过程"><a href="#电量补丁制作过程" class="headerlink" title="电量补丁制作过程"></a>电量补丁制作过程</h2><ol>
<li><p>我们需要确定DSDT里的哪些部分需要改。</p>
<p>用<code>MaciASL</code>软件打开DSDT，搜索<strong><code>EmbeddedControl</code></strong>。在<code>DSDT</code>里，可能会有一到多个。同时注意一个计算机名字如下图为<strong><code>EC0</code></strong></p>
</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">OperationRegion</span> (<span class="type">ECF2</span>, <span class="type">EmbeddedControl</span>, <span class="type">Zero</span>, <span class="number">0xFF</span>)</div></pre></td></tr></table></figure>
<p>​     上面的代码，我们只需要关注<code>ec</code>域声明的名字，即<strong><code>ECF2</code></strong>（别的可能是<code>ECF0</code>等）。<br>​     我们开始搜索<strong><code>Field（ECF2</code></strong>。</p>
<ol>
<li>我们需要查看Field里所有<strong>大于8位</strong>的元素，例如：</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Field</span> (<span class="type">ECF2</span>, <span class="type">ByteAcc</span>, <span class="type">Lock</span>, <span class="type">Preserve</span>)</div><div class="line">   &#123;</div><div class="line">       <span class="type">Offset</span> (<span class="number">0x10</span>),</div><div class="line">       <span class="type">BDN0</span>,   <span class="number">56</span>,</div><div class="line">...</div></pre></td></tr></table></figure>
<p>​    可以看到<strong><code>BDN0</code></strong>是一个大于8位的字段。</p>
<p>​    我们对其进行记录。之后我们要确定除了这里还有没有其他地方调用了这个字段。搜索他的名字：<strong><code>BDN0</code></strong>。如果<strong>只有这里被用到则不用拆分可以删除记录，</strong>如果除了这里还有其他地方用到，则进行记录。</p>
<p>​    整理到如下的结果：</p>
<p>​    可以看到我有意对16位 32位以及高于32位进行了一个空行的区分，大家也可以这样，这对下面的修改操作有着重要意义。</p>
<h3 id="补丁的制作方法"><a href="#补丁的制作方法" class="headerlink" title="补丁的制作方法"></a>补丁的制作方法</h3><h4 id="对于16位和32位字段的处理"><a href="#对于16位和32位字段的处理" class="headerlink" title="对于16位和32位字段的处理"></a>对于16位和32位字段的处理</h4><p>对于16位的<code>BDC0</code>，我么需要把它拆分为两部分（低字节，高字节）。在拆分的时候，<strong>需要注意两点</strong>：<br>​       1.拆分后，它的名字应该是 4个字符 。不能多，也不能少。如图</p>
<ol>
<li>// 拆分前： BDC0, 16</li>
<li>DC00, 8,</li>
<li>DC01, 8,</li>
</ol>
<p>复制代码</p>
<p>​       2.<strong>拆分后到名字不能已经出现在dsdt中（最好也不要与拆分到名字重复，虽然没什么问题，但是如果多次打这个补丁就会发生错误）</strong>，可以先想好几个名字，然后在dsdt中搜索，如果没有就可以。<br>​       然后。重点来了，<strong>拆分16位字段的补丁结构</strong>。（这里只会拆分ec域内的名称）</p>
<ol>
<li>into device label H_EC code_regex BDC0,\s+16, replace_matched begin DC00,8,DC01,8, end;</li>
</ol>
<p>复制代码</p>
<p>​           对于各部分的含义以及修改方法：<br>​           1.into device label<strong> H_EC</strong><br>​             含义：针对H_EC这个设备操作。对于自己电脑的名称请查看<strong>制作过程第一步的截屏处</strong>。<br>​           2.code_regex<strong> BDC0,\s+16,</strong><br>含义：code_regex表示寻找后面的匹配项。  后面的BDC0,\s+16,是寻找的内容，对于小白，只要知道把<strong>BDC0</strong>替换成你所记录的16位名称即可。<br>相关解释：\s+表示多个空格。所以这句话的意思是搜索BDCO，16，<br>​              个人建议：这一步中的最后的“，”个人觉得没必要加，因为如果这个数据出现在右括号前贼不会有这个“，”。<br>​           3.replace_matched begin<strong> DC00,8,DC01,8,</strong> end;<br>​              含义：replace_matched begin…..end表示将前面搜索到的字段替换为省略后里的字段。<strong>DC00,8,DC01,8,</strong>即替换为的内容。这里DC00 DC01即你要改为的名   字。<br>​              注意和上文的对应，如过上文按照我的建议不加最后的“，”则这里应为“<strong>DC00,8,DC01,8”</strong>！<br>​       到了这里，我们已经可以自己写替换（或者说拆分）16位字段的补丁了。但是，对于示例DSDT，BDC0是被用到的字段，因此，只是拆分它是不行的。用到它的地方也需要修改。例如这些地方：</p>
<ol>
<li>Store (BDC0, Index (DerefOf (Index (Local0, 0x02)), Zero))</li>
<li>Store (ShiftRight (BDC0, 0x08), Index (DerefOf (Index (Local0, 0x02)), One))</li>
</ol>
<p>复制代码</p>
<p>​           由于拆分，BDC0已经变成两个字段了，于是，我们需要1个工具方法来处理拆分后的字段。</p>
<ol>
<li>into method label B1B2 remove_entry;</li>
<li>into definitionblock code_regex . insert</li>
<li>begin</li>
<li>Method (B1B2, 2, NotSerialized)\n</li>
<li>{\n</li>
<li>Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n</li>
<li>}\n</li>
<li>end;</li>
</ol>
<p>复制代码</p>
<p>​          对于小白直接将这个加入加入你的补丁中就ok。<br>​          对这个补丁的解读：<br>​           1.into method label B1B2 remove_entry;       查找B1B2方法，如果有，删除它。<br>​           2.into definitionblock code_regex . insert     把后面的内容插入DefinitionBlock { }（每个dsdt的第一个就是这个）内。<br>​       对于dsdt内其他部分的修改，如下：上面是本身的效果，下面为修改结束的效果：</p>
<ol>
<li>Store (BDC0, Index (DerefOf (Index (Local0, 0x02)), Zero))</li>
<li>Store (ShiftRight (BDC0, 0x08), Index (DerefOf (Index (Local0, 0x02)), One))</li>
</ol>
<p>复制代码</p>
<ol>
<li>Store (B1B2(DC00,DC01), Index (DerefOf (Index (Local0, 0x02)), Zero))</li>
<li>Store(ShiftRight (B1B2(DC00,DC01), 0x08), Index (DerefOf (Index (Local0, 0x02)), One))</li>
</ol>
<p>复制代码</p>
<p>​        于是有了这个补丁：</p>
<ol>
<li>into method label GBTI code_regex (BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;</li>
</ol>
<p>复制代码</p>
<p>​       主要介绍下几个参数： </p>
<p>​          1.into method label <strong>GBTI</strong></p>
<p>这部分GBTI为dsdt出现的BDC0的方法，至于如何查看，点中你想要的参数，maciasl自然会显示，如下图：灰色部分即为你要修改为的名称，注意有些是有_的也要完全相同的加进去<br>​         2.code_regex <strong>(BDC0,</strong></p>
<p>这部分(BDC0,与上面的查找相同，不过这部分并不能直接把BDC0改成你自己的方法就完事！！！举个例子：</p>
<ol>
<li>Store (^^PCI0.LPCB.EC0.XIF1, Index (PAK0, One))</li>
</ol>
<p>复制代码</p>
<p>​            如果我要改这个中的XIF1应该怎么写？            应该写为：(\^\^PCI0.LPCB.EC0.XIF1,<br>​          所以这个地方就是看自己的代码具体的情况，改成自己的形式，并且每个标点符号左边要加”\”<br>​        3. replaceall_matched begin <strong>(B1B2(DC00,DC01),</strong> end;<br>​             这部分括号内就是你要修改为的内容，还以2中例子，应该改成什么？<br>​           应该改为：(B1B2(^^PCI0.LPCB.EC0.XID1,^^PCI0.LPCB.EC0.XID2),<br>​             这个地方就是把B1B2括号内的两个参数改成你本身括号内的内容，并且把你想改的参数分别改掉。<br>​     <strong>特别提醒：1.**</strong>以上都是对于在dsdt中，store（要修改参数，xxx）的形式<strong>
</strong>                      如果出现store（xxx，要修改的参数）则我们要改前改后的形式如下：**</p>
<ol>
<li>Store (Arg0, ENCR)//修改前</li>
<li>Store (ShiftRight(Arg0,8),ENC2)</li>
<li>Store (Arg0,ENC1)</li>
</ol>
<p>复制代码</p>
<p>​                        具体代码请结合上处解释自行书写，另外 换行为/n，空格为/s。                  2.<strong>如果出现Or （你要修改的参数，xxx，你要修改的参数）的形式则应该修改为如下形式：</strong></p>
<ol>
<li>Or (BATD, 0xC0, BATD)//修改前</li>
<li>Store(ShiftRight(Or(B1B2(BTD0,BTD1),0xC0),8), BTD1)</li>
<li>Store(Or(B1B2(BTD0,BTD1),0xC0), BTD0)</li>
</ol>
<p>复制代码</p>
<p>​                  3.<strong>如果出现**</strong>And （你要修改的参数，xxx，你要修改的参数）<strong><strong>的</strong></strong>形式则修改形式如下：**</p>
<ol>
<li>And  (BATD, 0xFF3F, BATD)//修改前</li>
<li>Store(ShiftRight(And(B1B2(BTD0,BTD1),0xFF3F),8), BTD1)</li>
<li>Store(And(B1B2(BTD0,BTD1),0xFF3F), BTD0)</li>
</ol>
<p>复制代码</p>
<p>​      至此，16位修改完毕，得到形如下补丁：</p>
<ol>
<li># 16-bit registers</li>
<li>into device label H_EC code_regex BDC0,\s+16 replace_matched begin DC00,8,DC01,8 end;</li>
<li>into device label H_EC code_regex BDC1,\s+16 replace_matched begin DC10,8,DC11,8 end;</li>
<li>into device label H_EC code_regex BFC0,\s+16 replace_matched begin FC00,8,FC01,8 end;</li>
<li>into device label H_EC code_regex BFC1,\s+16 replace_matched begin FC10,8,FC11,8 end;</li>
<li>into device label H_EC code_regex BDV0,\s+16 replace_matched begin DV00,8,DV01,8 end;</li>
<li>into device label H_EC code_regex BDV1,\s+16 replace_matched begin DV10,8,DV11,</li>
<li># fix 16-bit methods</li>
<li>into method label GBTI code_regex (BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;</li>
<li>into method label GBTI code_regex (BDC1, replaceall_matched begin (B1B2(DC10,DC11), end;</li>
<li>into method label GBTI code_regex (BFC0, replaceall_matched begin (B1B2(FC00,FC01), end;</li>
<li>into method label GBTI code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;</li>
<li>into method label BTIF code_regex (BFC0, replaceall_matched begin (B1B2(FC00,FC01), end;</li>
<li>into method label BTIF code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;</li>
<li>into method label ITLB code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;</li>
</ol>
<p>复制代码</p>
<p>   接着是32位字段的修改<br>​       这是与16位类似的处理方法：直接打进去就好</p>
<ol>
<li>nto method label B1B4 remove_entry;</li>
<li>into definitionblock code_regex . insert</li>
<li>begin</li>
<li>Method (B1B4, 4, NotSerialized)\n</li>
<li>{\n</li>
<li>​    Store(Arg3, Local0)\n</li>
<li>​    Or(Arg2, ShiftLeft(Local0, 8), Local0)\n</li>
<li>​    Or(Arg1, ShiftLeft(Local0, 8), Local0)\n</li>
<li>​    Or(Arg0, ShiftLeft(Local0, 8), Local0)\n</li>
<li>​    Return(Local0)\n</li>
<li>}\n</li>
<li>end;</li>
</ol>
<p>复制代码</p>
<p>​        32位的修改方法与16位差不多。形如：</p>
<ol>
<li># 32-bit registers</li>
<li>into device label H_EC code_regex BTY0,\s+32 replace_matched begin TY00,8,TY01,8,TY02,8,TY03,8 end;</li>
<li>into device label H_EC code_regex BTY1,\s+32 replace_matched begin TY10,8,TY11,8,TY12,8,TY13,8 end;</li>
<li># fix 32-bit methods</li>
<li>into method label GBTI code_regex (BTY0, replaceall_matched begin (B1B4(TY00,TY01,TY02,TY03), end;</li>
</ol>
<p>复制代码</p>
<p>​       这部分不懂的去看16位的修改方法，完全相同，只是数据变成了四个！<strong>二、大于32位的字段补丁处理</strong><br><strong>对于大于32位的字段不用进行拆分操作，只需要将用到的地方进行处理就行了。</strong><br><strong>       我们先来认识个东西：偏移量。偏移量是啥？  看看图中的offset代表的就是偏移量。中间的咋算？</strong><br><strong>       偏移量逢8进1，所以在对嘴上面的offset往下加就可以得出，如图：</strong></p>
<ol>
<li>Offset (0x04),</li>
<li>​                        CMCM,   8, //0x04</li>
<li>​                        CMD1,   8, //0x05（8位是1字节，所以加1）</li>
<li>​                        CMD2,   8, //0x06</li>
<li>​                        CMD3,   8, //0x07</li>
<li>​                        Offset (0x18), 这里空了一些，不用纠结，按原始DSDT给出的偏移量计算就好（会给开头的偏移量）</li>
<li>​                        Offset (0x19),</li>
<li>​                        SMST,   8, //0x19</li>
<li>​                        MBMN,   80, //0x1A</li>
<li>​                        MBPN,   96, //0x25 = 0x1A+A+1（0x1A是上一个的起始地址，A的得来：80除以8得10，也就是上一个占了10个字节，16进制表示就是A。 0x2A+A是它占到了哪个地址，它的下一个地址才是下一个开始，所以再加1。）</li>
<li>​                        GPB1,   8, // 0x32 = 0x25 + C（96位占了12个字节）+1</li>
<li>​                        GPB2,   8, //0x33</li>
<li>​                        GPB3,   8, //0x34</li>
<li>​                        GPB4,   8, //0x35</li>
</ol>
<p>复制代码</p>
<p>​         另外上r神的方法：（其中的H_EC同上 请改为自己的设备名，不知道在呢？去看一！）</p>
<ol>
<li># utility methods to read/write buffers from/to EC</li>
<li>into method label RE1B parent_label H_EC remove_entry;</li>
<li>into method label RECB parent_label H_EC remove_entry;</li>
<li>into device label H_EC insert</li>
<li>begin</li>
<li>Method (RE1B, 1, NotSerialized)\n</li>
<li>{\n</li>
<li>​    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n</li>
<li>​    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n</li>
<li>​    Return(BYTE)\n</li>
<li>}\n</li>
<li>Method (RECB, 2, Serialized)\n</li>
<li>// Arg0 - offset in bytes from zero-based EC\n</li>
<li>// Arg1 - size of buffer in bits\n</li>
<li>{\n</li>
<li>​    ShiftRight(Arg1, 3, Arg1)\n</li>
<li>​    Name(TEMP, Buffer(Arg1) { })\n</li>
<li>​    Add(Arg0, Arg1, Arg1)\n</li>
<li>​    Store(0, Local0)\n</li>
<li>​    While (LLess(Arg0, Arg1))\n</li>
<li>​    {\n</li>
<li>​        Store(RE1B(Arg0), Index(TEMP, Local0))\n</li>
<li>​        Increment(Arg0)\n</li>
<li>​        Increment(Local0)\n</li>
<li>​    }\n</li>
<li>​    Return(TEMP)\n</li>
<li>}\n</li>
<li>end;</li>
</ol>
<p>复制代码</p>
<ol>
<li>into method label WE1B parent_label H_EC remove_entry;</li>
<li>into method label WECB parent_label H_EC remove_entry;</li>
<li>into device label H_EC insert</li>
<li>begin</li>
<li>Method (WE1B, 2, NotSerialized)\n</li>
<li>{\n</li>
<li>​    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n</li>
<li>​    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n</li>
<li>​    Store(Arg1, BYTE)\n</li>
<li>}\n</li>
<li>Method (WECB, 3, Serialized)\n</li>
<li>// Arg0 - offset in bytes from zero-based EC\n</li>
<li>// Arg1 - size of buffer in bits\n</li>
<li>// Arg2 - value to write\n</li>
<li>{\n</li>
<li>​    ShiftRight(Add(Arg1,7), 3, Arg1)\n</li>
<li>​    Name(TEMP, Buffer(Arg1) { })\n</li>
<li>​    Store(Arg2, TEMP)\n</li>
<li>​    Add(Arg0, Arg1, Arg1)\n</li>
<li>​    Store(0, Local0)\n</li>
<li>​    While (LLess(Arg0, Arg1))\n</li>
<li>​    {\n</li>
<li>​        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n</li>
<li>​        Increment(Arg0)\n</li>
<li>​        Increment(Local0)\n</li>
<li>​    }\n</li>
<li>}\n</li>
<li>end;</li>
</ol>
<p>复制代码</p>
<p>​     两个方法不用同时打，简单来说如果你要改的参数挨着左括号则用一，如果你改的参数离右括号进就用二！   修改形式：如图改法：</p>
<ol>
<li>Store(MBMN, XXXX) -&gt; Store(RECB(0x1A, 80), XXXX)</li>
</ol>
<p>复制代码</p>
<p>​    这时补丁就是</p>
<ol>
<li>into method label XXXX code_regex (MBMN, replaceall_matched begin (RECB(0x1A,80), end;</li>
<li>into method label XXXX code_regex (MBPN, replaceall_matched begin (RECB(0x25,96), end;</li>
</ol>
<p>复制代码</p>
<p>​     对比16位改对应的位置  如果你的要改参数离右括号进则：</p>
<ol>
<li>Store (Arg3, _SB.PCI0.LPCB.EC0.SMD0) -&gt; _SB.PCI0.LPCB.EC0.WECB(0x1C,264,Arg3)</li>
</ol>
<p>复制代码</p>
<p>​        这时补丁则为：</p>
<ol>
<li>nto method label SMRW code_regex Store\s(Arg3,\s\_SB.PCI0.LPCB.EC0.SMD0) replaceall_matched begin \_SB.PCI0.LPCB.EC0.WECB(0x1C,264,Arg3) end;</li>
</ol>
<p>复制代码</p>
<p>最后总结下补丁结构：</p>
<ol>
<li># Tip: If you get a 0% battery status,you should also patch the Rehabman’s “Fix Mutex with non-zero SyncLevel” patch.</li>
<li># You also can patch the both of your computer’s battery patch and the Rehabman’s patch at one time.</li>
<li></li>
<li># 注意：如果打过电量补丁后，有获取的电池状态显示为0%的情况，还需要打 Rehabman的 “Fix Mutex with non-zero SyncLevel” 补丁。</li>
<li># 你也可以，一次性打好 自己电脑的电量补丁 和 Rehabman 的那个补丁。</li>
<li></li>
<li># ==== Field devide 字段拆分 ====</li>
<li></li>
<li># ==== Replace called method 替换调用方法 ====</li>
<li></li>
<li># ==== Data handling method 数据处理方法 ====</li>
</ol>
<p>复制代码</p>
<p>最后的解释：文中多次提到特殊情况和离括号的的远近不同的处理方法，这是为什么呢？<br>  很简答的原因是sotre（A，B）是一个从左到右的操作，也就是将A写到B<br>   所以如果A是你的参数则是读的操作，而如果是B则是写的操作，也就用到不同的方法。<br>  而Or 的第三个参数，是把前两个数的计算结果，写入到第三个参数的意思。<br>  And 的第三个参数，是把前两个数的计算结果，写入到第三个参数的意思。<br>  不过能理解store就够了。<br><strong>  将整理好的补丁保存位txt格式就能打入了 软件中点patch。点open就行</strong><br>最后，特别感谢翻译贴和r神的帖子，也希望你们都能搞定电量显示的问题，另外，如果成功请回馈社会将补丁放于最上面所说帖子的补丁源！</p>
]]></content:encoded>
      
      <comments>http://blog.daliansky.net/Modify-DSDT-to-achieve-power-display-method.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
